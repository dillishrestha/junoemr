"use strict";
/**
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:no-unused-variable member-ordering */
var JunoApi = /** @class */ (function () {
    function JunoApi($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'http://localhost/';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * @param newAppointmentTo1
     */
    JunoApi.prototype.addAppointment = function (newAppointmentTo1, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/add';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: newAppointmentTo1,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @param appointmentTo1
     */
    JunoApi.prototype.deleteAppointment = function (appointmentTo1, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/deleteAppointment';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: appointmentTo1,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @param year
     * @param month
     * @param providerNo
     */
    JunoApi.prototype.fetchMonthlyData = function (year, month, providerNo, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/fetchMonthly/{providerNo}/{year}/{month}'
            .replace('{' + 'year' + '}', encodeURIComponent(String(year)))
            .replace('{' + 'month' + '}', encodeURIComponent(String(month)))
            .replace('{' + 'providerNo' + '}', encodeURIComponent(String(providerNo)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined when calling fetchMonthlyData.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined when calling fetchMonthlyData.');
        }
        // verify required parameter 'providerNo' is not null or undefined
        if (providerNo === null || providerNo === undefined) {
            throw new Error('Required parameter providerNo was null or undefined when calling fetchMonthlyData.');
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @param demographicNo
     */
    JunoApi.prototype.findExistAppointments = function (demographicNo, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/{demographicNo}/appointmentHistory'
            .replace('{' + 'demographicNo' + '}', encodeURIComponent(String(demographicNo)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'demographicNo' is not null or undefined
        if (demographicNo === null || demographicNo === undefined) {
            throw new Error('Required parameter demographicNo was null or undefined when calling findExistAppointments.');
        }
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @param appointmentTo1
     */
    JunoApi.prototype.getAppointment = function (appointmentTo1, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/getAppointment';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: appointmentTo1,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     */
    JunoApi.prototype.getAppointmentReasons = function (extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/reasons';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     */
    JunoApi.prototype.getAppointmentStatuses = function (extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/statuses';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     */
    JunoApi.prototype.getAppointmentTypes = function (extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/types';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @param date
     */
    JunoApi.prototype.getAppointmentsForDay = function (date, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/day/{date}'
            .replace('{' + 'date' + '}', encodeURIComponent(String(date)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'date' is not null or undefined
        if (date === null || date === undefined) {
            throw new Error('Required parameter date was null or undefined when calling getAppointmentsForDay.');
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @param providerNo
     * @param date
     */
    JunoApi.prototype.getAppointmentsForDay1 = function (providerNo, date, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/{providerNo}/day/{date}'
            .replace('{' + 'providerNo' + '}', encodeURIComponent(String(providerNo)))
            .replace('{' + 'date' + '}', encodeURIComponent(String(date)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'providerNo' is not null or undefined
        if (providerNo === null || providerNo === undefined) {
            throw new Error('Required parameter providerNo was null or undefined when calling getAppointmentsForDay1.');
        }
        // verify required parameter 'date' is not null or undefined
        if (date === null || date === undefined) {
            throw new Error('Required parameter date was null or undefined when calling getAppointmentsForDay1.');
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     */
    JunoApi.prototype.getCalendarAppointmentStatuses = function (extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/calendar/statuses';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @param providerId
     * @param startDate
     * @param endDate
     * @param site
     */
    JunoApi.prototype.getCalendarEvents = function (providerId, startDate, endDate, site, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/calendar/{providerId}'
            .replace('{' + 'providerId' + '}', encodeURIComponent(String(providerId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'providerId' is not null or undefined
        if (providerId === null || providerId === undefined) {
            throw new Error('Required parameter providerId was null or undefined when calling getCalendarEvents.');
        }
        if (startDate !== undefined) {
            queryParameters['startDate'] = startDate;
        }
        if (endDate !== undefined) {
            queryParameters['endDate'] = endDate;
        }
        if (site !== undefined) {
            queryParameters['site'] = site;
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     */
    JunoApi.prototype.getScheduleGroups = function (extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/groups';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     */
    JunoApi.prototype.getScheduleTemplateCodes = function (extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/templateCodes';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @param appointmentTo1
     */
    JunoApi.prototype.updateAppointment = function (appointmentTo1, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/updateAppointment';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: appointmentTo1,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @param id
     * @param appointmentTo1
     */
    JunoApi.prototype.updateAppointmentStatus = function (id, appointmentTo1, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/appointment/{id}/updateStatus'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateAppointmentStatus.');
        }
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: appointmentTo1,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @param id
     * @param appointmentTo1
     */
    JunoApi.prototype.updateAppointmentType = function (id, appointmentTo1, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/appointment/{id}/updateType'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateAppointmentType.');
        }
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: appointmentTo1,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    JunoApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
    return JunoApi;
}());
exports.JunoApi = JunoApi;
