/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class ScheduleApi {
    protected basePath = 'http://localhost/';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * @param newAppointmentTo1 
     */
    public addAppointment (newAppointmentTo1?: models.NewAppointmentTo1, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.SchedulingResponse> {
        const localVarPath = this.basePath + '/schedule/add';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: newAppointmentTo1,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param appointmentTo1 
     */
    public deleteAppointment (appointmentTo1?: models.AppointmentTo1, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/schedule/deleteAppointment';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: appointmentTo1,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param year 
     * @param month 
     * @param providerNo 
     */
    public fetchMonthlyData (year: number, month: number, providerNo: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.SchedulingResponse> {
        const localVarPath = this.basePath + '/schedule/fetchMonthly/{providerNo}/{year}/{month}'
            .replace('{' + 'year' + '}', encodeURIComponent(String(year)))
            .replace('{' + 'month' + '}', encodeURIComponent(String(month)))
            .replace('{' + 'providerNo' + '}', encodeURIComponent(String(providerNo)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined when calling fetchMonthlyData.');
        }

        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined when calling fetchMonthlyData.');
        }

        // verify required parameter 'providerNo' is not null or undefined
        if (providerNo === null || providerNo === undefined) {
            throw new Error('Required parameter providerNo was null or undefined when calling fetchMonthlyData.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param demographicNo 
     */
    public findExistAppointments (demographicNo: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.SchedulingResponse> {
        const localVarPath = this.basePath + '/schedule/{demographicNo}/appointmentHistory'
            .replace('{' + 'demographicNo' + '}', encodeURIComponent(String(demographicNo)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'demographicNo' is not null or undefined
        if (demographicNo === null || demographicNo === undefined) {
            throw new Error('Required parameter demographicNo was null or undefined when calling findExistAppointments.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param appointmentTo1 
     */
    public getAppointment (appointmentTo1?: models.AppointmentTo1, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.SchedulingResponse> {
        const localVarPath = this.basePath + '/schedule/getAppointment';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: appointmentTo1,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     */
    public getAppointmentReasons (extraHttpRequestParams?: any ) : ng.IHttpPromise<models.SchedulingResponse> {
        const localVarPath = this.basePath + '/schedule/reasons';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     */
    public getAppointmentStatuses (extraHttpRequestParams?: any ) : ng.IHttpPromise<models.AbstractSearchResponseAppointmentStatusTo1> {
        const localVarPath = this.basePath + '/schedule/statuses';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     */
    public getAppointmentTypes (extraHttpRequestParams?: any ) : ng.IHttpPromise<models.SchedulingResponse> {
        const localVarPath = this.basePath + '/schedule/types';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param providerNo 
     * @param date 
     */
    public getAppointmentsForDay (providerNo: string, date: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.PatientListApptBean> {
        const localVarPath = this.basePath + '/schedule/{providerNo}/day/{date}'
            .replace('{' + 'providerNo' + '}', encodeURIComponent(String(providerNo)))
            .replace('{' + 'date' + '}', encodeURIComponent(String(date)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'providerNo' is not null or undefined
        if (providerNo === null || providerNo === undefined) {
            throw new Error('Required parameter providerNo was null or undefined when calling getAppointmentsForDay.');
        }

        // verify required parameter 'date' is not null or undefined
        if (date === null || date === undefined) {
            throw new Error('Required parameter date was null or undefined when calling getAppointmentsForDay.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param date 
     */
    public getAppointmentsForDay1 (date: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.PatientListApptBean> {
        const localVarPath = this.basePath + '/schedule/day/{date}'
            .replace('{' + 'date' + '}', encodeURIComponent(String(date)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'date' is not null or undefined
        if (date === null || date === undefined) {
            throw new Error('Required parameter date was null or undefined when calling getAppointmentsForDay1.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     */
    public getCalendarAppointmentStatuses (extraHttpRequestParams?: any ) : ng.IHttpPromise<models.RestSearchResponseCalendarAppointmentStatus> {
        const localVarPath = this.basePath + '/schedule/calendar/statuses';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param providerId 
     * @param startDate 
     * @param endDate 
     * @param site 
     */
    public getCalendarEvents (providerId: number, startDate?: string, endDate?: string, site?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.RestSearchResponseCalendarEvent> {
        const localVarPath = this.basePath + '/schedule/calendar/{providerId}'
            .replace('{' + 'providerId' + '}', encodeURIComponent(String(providerId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'providerId' is not null or undefined
        if (providerId === null || providerId === undefined) {
            throw new Error('Required parameter providerId was null or undefined when calling getCalendarEvents.');
        }

        if (startDate !== undefined) {
            queryParameters['startDate'] = startDate;
        }

        if (endDate !== undefined) {
            queryParameters['endDate'] = endDate;
        }

        if (site !== undefined) {
            queryParameters['site'] = site;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     */
    public getScheduleGroups (extraHttpRequestParams?: any ) : ng.IHttpPromise<models.RestSearchResponseScheduleGroup> {
        const localVarPath = this.basePath + '/schedule/groups';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     */
    public getScheduleTemplateCodes (extraHttpRequestParams?: any ) : ng.IHttpPromise<models.RestSearchResponseScheduleTemplateCode> {
        const localVarPath = this.basePath + '/schedule/templateCodes';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param appointmentTo1 
     */
    public updateAppointment (appointmentTo1?: models.AppointmentTo1, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.SchedulingResponse> {
        const localVarPath = this.basePath + '/schedule/updateAppointment';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: appointmentTo1,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param id 
     * @param appointmentTo1 
     */
    public updateAppointmentStatus (id: number, appointmentTo1?: models.AppointmentTo1, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.SchedulingResponse> {
        const localVarPath = this.basePath + '/schedule/appointment/{id}/updateStatus'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateAppointmentStatus.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: appointmentTo1,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param id 
     * @param appointmentTo1 
     */
    public updateAppointmentType (id: number, appointmentTo1?: models.AppointmentTo1, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.SchedulingResponse> {
        const localVarPath = this.basePath + '/schedule/appointment/{id}/updateType'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateAppointmentType.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: appointmentTo1,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
