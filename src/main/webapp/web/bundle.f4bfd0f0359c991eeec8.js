(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["bundle"],{

/***/ "../webapp/share/javascript/Oscar.js":
/*!*******************************************!*\
  !*** ../webapp/share/javascript/Oscar.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
 * 
 * Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved. *
 * This software is published under the GPL GNU General Public License. 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either version 2 
 * of the License, or (at your option) any later version. * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software 
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. * 
 * 
 * <OSCAR TEAM>
 * 
 * This software was written for the 
 * Department of Family Medicine 
 * McMaster University 
 * Hamilton 
 * Ontario, Canada 
 */

function popup(height, width, url, windowName) {
  return popup2(height, width, 0, 0, url, windowName);
}

function newWindow(url,windowName){
    //this way the w&d works with older browsers as well
    var w = document.getElementsByTagName('body')[0].clientWidth;//window.innerWidth;
    var h = document.getElementsByTagName('body')[0].clientHeight;//window.innerHeight;
    w = Math.max(w, window.innerWidth);
    h = Math.max(h, window.innerHeight);
    
    return popup2(h, w, 0, 0, url, windowName);
 }


function popup2(height, width, top, left, url, windowName){
  if ( typeof popup2.winRefs == 'undefined' ) {	  
	    popup2.winRefs = {};
  }
  if ( typeof popup2.winRefs[windowName] == 'undefined' || popup2.winRefs[windowName].closed ) {  
	  windowprops = "height="+height+",width="+width+",location=no,scrollbars=yes,menubars=no,toolbars=no,resizable=yes,screenX=0,screenY=0,top=" + top + ",left=" + left;
	  popup2.winRefs[windowName]=window.open(url, windowName, windowprops);
  }
  else {
	  popup2.winRefs[windowName].location.href = url;
	  popup2.winRefs[windowName].resizeTo(width,height);
	  popup2.winRefs[windowName].focus();
  }
  
  return popup2.winRefs[windowName];  
}

function confirmNGo(url, message) {
    if (confirm(message)) {
        location.href = url;
    }
    return false;
}


function showHideItem(id){ 
    if(document.getElementById(id).style.display == 'none')
        showItem(id);        
    else
        hideItem(id);        
}

function showItem(id){
        document.getElementById(id).style.display = ''; 
}

function hideItem(id){
        document.getElementById(id).style.display = 'none'; 
}

/*
oElm - Mandatory. This is element in whose children you will look for the attribute.
strTagName - Mandatory. This is the name of the HTML elements you want to look in. Use wildcard (*) if you want to look in all elements.
strAttributeName - Mandatory. The name of the attribute you’re looking for.
strAttributeValue - Optional. If you want the attribute you’re looking for to have a certain value as well. (don't specify it if you don't know it)
*/
document.getElementsByAttribute = function(oElm, strTagName, strAttributeName, strAttributeValue){
    var arrElements = (strTagName == "*" && oElm.all)? oElm.all : oElm.getElementsByTagName(strTagName);
    var arrReturnElements = new Array();
    var oAttributeValue = (typeof strAttributeValue != "undefined")? new RegExp("(^|\\s)" + strAttributeValue + "(\\s|$)") : null;
    var oCurrent;
    var oAttribute;
    for(var i=0; i<arrElements.length; i++){
        oCurrent = arrElements[i];
        oAttribute = oCurrent.getAttribute && oCurrent.getAttribute(strAttributeName);
        if(typeof oAttribute == "string" && oAttribute.length > 0){
            if(typeof strAttributeValue == "undefined" || (oAttributeValue && oAttributeValue.test(oAttribute))){
                arrReturnElements.push(oCurrent);
            }
        }
    }
    return arrReturnElements;
}

function validDate(id) {
   //checks if the <input type="text"> has a valid date format yyyy/mm/dd
   var completeRawDate = document.getElementById(id).value;
   return validDateText(completeRawDate);
}

function validDateText(completeRawDate) {
//Just another method that validates date in a string, useful if you want to make your own
//date checking script.
   var delimiter = '/';
   if (completeRawDate.indexOf('/') == -1)
       delimiter = '-';
   var dateArray = completeRawDate.split(delimiter);
   if (dateArray.length != 3) return false;
   year = (dateArray[0] - 0);
   month = (dateArray[1] - 1);
   day = (dateArray[2] - 0);
   //alert("year: " + year + ", " + month + ", " + day);
   dateObject = new Date(year,month,day);
   return ((day==dateObject.getDate()) && (month==dateObject.getMonth()) && (year==dateObject.getFullYear()));
}

function validDateFieldsByClass(className, parentEle) {
//Checks if the dates are valid, identifies date fields by class name; datefield preferrably type="text"
// parentEle is any object that encloses the fields, usually the form element
   var datefields = document.getElementsByClassName(className, parentEle)
   for (var i=0; i<datefields.length; i++) {
      if (!validDateText(datefields[i].value)) {
        datefields[i].focus();
        return false;
      }
   }
   return true;
}

//returns mouse coordinates
function getMouseCoords(e) {
        var array = new Array(2);
	var posx = 0;
	var posy = 0;
	if (!e) var e = window.event;
	if (e.pageX || e.pageY) 	{
		posx = e.pageX;
		posy = e.pageY;
	}
	else if (e.clientX || e.clientY) 	{
        posx = e.clientX + document.body.scrollLeft
			+ document.documentElement.scrollLeft;
		posy = e.clientY + document.body.scrollTop
			+ document.documentElement.scrollTop;
	}
        array[0] = posx;
        array[1] = posy;
        return array;
}

//example  <input type="checkbox" onclick="checkAll(this, 'parentEle', 'checkclass')">
function checkAll(master, parentEle, className){
   var val = master.checked;
   var chkList = document.getElementsByClassName(className, parentEle);
   for (i =0; i < chkList.length; i++){
      chkList[i].checked = val;
   }
}

//Calls firebugs console log if it's available.  A safer way to use the console because if firebug is not enabled the javascript will error on the console.log line.
function oscarLog(str){
    if(window.console){
       console.log(str);
    }
    
}


//Can be use the enter key in a text box and call javacript function
//example:  <itput type="text" onkeypress="return grabEnter(event,'ReferralScriptAttach1()')"/>
function grabEnter(event,callb){
  if( (window.event && window.event.keyCode == 13) || (event && event.which == 13) )  {
     eval(callb);
     return false;
  }
}



//Checks to see if a String is numeric integer ie. No decimal aloud
function isNumericInt(sText){
   var validNumChars = "0123456789";
   var isNumber=true;
   var chara;
   for (i = 0; i < sText.length && isNumber == true; i++) {
      chara = sText.charAt(i);
      if (validNumChars.indexOf(chara) == -1) {
         isNumber = false;
      }
   }
   return isNumber;
}

//Checks to see if a String is numeric
function isNumeric(sText){
   var validNumChars = "0123456789.";
   var isNumber=true;
   var chara;
   for (i = 0; i < sText.length && isNumber == true; i++) {
      chara = sText.charAt(i);
      if (validNumChars.indexOf(chara) == -1) {
         isNumber = false;
      }
   }
   return isNumber;
}
//remove leading and trailing white space
function trim(str){
   str=str.replace(/^\s+/g,"");
   str=str.replace(/\s+$/g,"");//trim str
   return str;
}

/***/ }),

/***/ "./app.js":
/*!****************!*\
  !*** ./app.js ***!
  \****************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
__webpack_require__(/*! jquery-ui/ui/widgets/draggable */ "./node_modules/jquery-ui/ui/widgets/draggable.js")
__webpack_require__(/*! jquery-ui/themes/base/draggable.css */ "./node_modules/jquery-ui/themes/base/draggable.css");
__webpack_require__(/*! jquery-ui/ui/widgets/resizable */ "./node_modules/jquery-ui/ui/widgets/resizable.js")
__webpack_require__(/*! jquery-ui/themes/base/resizable.css */ "./node_modules/jquery-ui/themes/base/resizable.css");
__webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
__webpack_require__(/*! angular */ "./node_modules/angular/index.js");
__webpack_require__(/*! angular-ui-bootstrap */ "./node_modules/angular-ui-bootstrap/index.js");
__webpack_require__(/*! angular-ui-router */ "./node_modules/angular-ui-router/release/ui-router-angularjs.js");
__webpack_require__(/*! angular-ui-router/release/stateEvents */ "./node_modules/angular-ui-router/release/stateEvents.js");
__webpack_require__(/*! fullcalendar-scheduler */ "./node_modules/fullcalendar-scheduler/dist/scheduler.js");
__webpack_require__(/*! fullcalendar/dist/fullcalendar.min.css */ "./node_modules/fullcalendar/dist/fullcalendar.min.css");
__webpack_require__(/*! fullcalendar-scheduler/dist/scheduler.min.css */ "./node_modules/fullcalendar-scheduler/dist/scheduler.min.css");
__webpack_require__(/*! ng-table/bundles/ng-table */ "./node_modules/ng-table/bundles/ng-table.js");
__webpack_require__(/*! ng-table/bundles/ng-table.css */ "./node_modules/ng-table/bundles/ng-table.css");
__webpack_require__(/*! angular-resource */ "./node_modules/angular-resource/index.js");
__webpack_require__(/*! ng-infinite-scroll */ "./node_modules/ng-infinite-scroll/build/ng-infinite-scroll.js");
__webpack_require__(/*! angular-loading-bar */ "./node_modules/angular-loading-bar/index.js");
__webpack_require__(/*! angular-loading-bar/build/loading-bar.min.css */ "./node_modules/angular-loading-bar/build/loading-bar.min.css");
__webpack_require__(/*! bootstrap-datepicker */ "./node_modules/bootstrap-datepicker/dist/js/bootstrap-datepicker.js");
__webpack_require__(/*! bootstrap-datepicker/dist/css/bootstrap-datepicker.css */ "./node_modules/bootstrap-datepicker/dist/css/bootstrap-datepicker.css");
__webpack_require__(/*! bootstrap-timepicker */ "./node_modules/bootstrap-timepicker/js/bootstrap-timepicker.js");
__webpack_require__(/*! ngstorage */ "./node_modules/ngstorage/ngStorage.js");
__webpack_require__(/*! ./scss/juno.scss */ "./scss/juno.scss");
__webpack_require__(/*! font-awesome/css/font-awesome.min.css */ "./node_modules/font-awesome/css/font-awesome.min.css");


var oscarApp = angular.module('oscarProviderViewModule', [
	'ui.router',
	'ui.router.state.events',
	'ngResource',
	'ui.bootstrap',
	'ui.calendar',
	'angular-loading-bar',
	'ngTable',
	'ngStorage',
	'Common',
	'Common.Services',
	'Common.Filters',
	'Common.Directives',
	'Common.Util',
	'Layout',
	'Tickler',
	'Record',
	'Record.Summary',
	'Record.Tracker',
	'Record.Details',
	'Record.PHR',
	'Record.Forms',
	'Schedule',
	'Settings',
	'Report',
	'Patient',
	'Patient.Search',
	'PatientList',
	'Inbox',
	'Help',
	'Document',
	'Dashboard',
	'Consults',
	'Admin',
	'Admin.Integration',
	'Admin.Integration.Know2act',
	'Admin.Integration.Fax'
]);

oscarApp.config(['$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider)
{
	//
	// For any unmatched url, redirect to /state1
	$urlRouterProvider.otherwise("/dashboard");
	//
	// Now set up the states
	$stateProvider
		.state('dashboardManager',
		{
			url: '/dashboard/admin',
			templateUrl: 'src/dashboard/admin/DashboardManager.jsp',
			controller: 'dashboardManagerController'
		})
		.state('dashboard',
		{
			url: '/dashboard',
			templateUrl: 'src/dashboard/dashboard.jsp',
			controller: 'Dashboard.DashboardController'
		})
		.state('inbox',
		{
			url: '/inbox',
			templateUrl: 'src/inbox/inbox_popup.jsp',
			// templateUrl: 'src/inbox/inbox.jsp',
			controller: 'Inbox.InboxController'
		})
		.state('consultRequests',
		{
			url: '/consults',
			templateUrl: 'src/consults/consultRequestList.jsp',
			controller: 'Consults.ConsultRequestListController as consultRequestListCtrl'
		})
		.state('consultResponses',
		{
			url: '/consultResponses',
			templateUrl: 'src/consults/consultResponseList.jsp',
			controller: 'Consults.ConsultResponseListController as consultResponseListCtrl'
		})
		.state('billing',
		{
			url: '/billing',
			templateUrl: 'src/billing/billing_popup.jsp',
			controller: 'BillingCtrl'
		})
		.state('schedule',
		{
			url: '/schedule',
			templateUrl: 'src/schedule/view.jsp',
			controller: 'Schedule.ScheduleController'
		})
		.state('admin',
		{
			url: '/admin',
			templateUrl: 'src/admin/admin_popup.jsp',
			controller: 'AdminCtrl'
		})
		.state('ticklers',
		{
			url: '/ticklers',
			templateUrl: 'src/tickler/ticklerList.jsp',
			controller: 'Tickler.TicklerListController as ticklerListCtrl',
			resolve:
			{
				providers: ['providerService', function(providerService)
				{
					return providerService.searchProviders(
					{
						active: true
					});
				}],
			}
		})
		.state('search',
		{
			url: '/search',
			templateUrl: 'src/patient/search/patientSearch.jsp',
			controller: 'Patient.Search.PatientSearchController as patientSearchCtrl',
			params:
			{
				term: null
			}
		})
		.state('reports',
		{
			url: '/reports',
			templateUrl: 'src/report/reports.jsp',
			//templateUrl: 'src/report/reports_classic.jsp',
			controller: 'Report.ReportsController as reportsCtrl',
		})
		.state('documents',
		{
			url: '/documents',
			templateUrl: 'src/document/documents_classic.jsp',
			controller: 'Document.DocumentsController'
		})
		.state('settings',
		{
			url: '/settings',
			templateUrl: 'src/settings/settings.jsp',
			controller: 'Settings.SettingsController as settingsCtrl',
			resolve:
			{
				user: ['providerService', function(providerService)
				{
					return providerService.getMe();
				}],
				billingServiceTypes: ['billingService', function(billingService)
				{
					return billingService.getUniqueServiceTypes();
				}],
				providerList: ['providerService', function(providerService)
				{
					return providerService.searchProviders(
					{
						'active': true
					});
				}],
				loadedSettings: ['providerService', function(providerService)
				{
					return providerService.getSettings();
				}],
				encounterForms: ['formService', function(formService)
				{
					return formService.getAllEncounterForms();
				}],
				eforms: ['formService', function(formService)
				{
					return formService.getAllEForms();
				}],
				teams: ['providerService', function(providerService)
				{
					return providerService.getActiveTeams();
				}],
				groupNames: ['formService', function(formService)
				{
					return formService.getGroupNames();
				}],
				loadedApps: ['appService', function(appService)
				{
					return appService.getApps();
				}]
			}
		})
		.state('settings.persona',
			{
				url: '/persona',
				templateUrl: 'src/settings/settings.jsp',
				controller: 'Settings.SettingsController as settingsCtrl',
				data: {
					tab: 'persona'
				}
			})
		.state('settings.general',
			{
				url: '/general',
				templateUrl: 'src/settings/settings.jsp',
				controller: 'Settings.SettingsController as settingsCtrl',
				data: {
					tab: 'general'
				}
			})
		.state('settings.schedule',
			{
				url: '/schedule',
				templateUrl: 'src/settings/settings.jsp',
				controller: 'Settings.SettingsController as settingsCtrl',
				data: {
					tab: 'schedule'
				}
			})
		.state('settings.billing',
			{
				url: '/billing',
				templateUrl: 'src/settings/settings.jsp',
				controller: 'Settings.SettingsController as settingsCtrl',
				data: {
					tab: 'billing'
				}
			})
		.state('settings.rx',
			{
				url: '/rx',
				templateUrl: 'src/settings/settings.jsp',
				controller: 'Settings.SettingsController as settingsCtrl',
				data: {
					tab: 'rx'
				}
			})
		.state('settings.masterdemo',
			{
				url: '/masterdemo',
				templateUrl: 'src/settings/settings.jsp',
				controller: 'Settings.SettingsController as settingsCtrl',
				data: {
					tab: 'masterdemo'
				}
			})
		.state('settings.consults',
			{
				url: '/consults',
				templateUrl: 'src/settings/settings.jsp',
				controller: 'Settings.SettingsController as settingsCtrl',
				data: {
					tab: 'consults'
				}
			})
		.state('settings.documents',
			{
				url: '/documents',
				templateUrl: 'src/settings/settings.jsp',
				controller: 'Settings.SettingsController as settingsCtrl',
				data: {
					tab: 'documents'
				}
			})
		.state('settings.summary',
			{
				url: '/summary',
				templateUrl: 'src/settings/settings.jsp',
				controller: 'Settings.SettingsController as settingsCtrl',
				data: {
					tab: 'summary'
				}
			})
		.state('settings.eforms',
			{
				url: '/eforms',
				templateUrl: 'src/settings/settings.jsp',
				controller: 'Settings.SettingsController as settingsCtrl',
				data: {
					tab: 'eforms'
				}
			})
		.state('settings.inbox',
			{
				url: '/inbox',
				templateUrl: 'src/settings/settings.jsp',
				controller: 'Settings.SettingsController as settingsCtrl',
				data: {
					tab: 'inbox'
				}
			})
		.state('settings.programs',
			{
				url: '/programs',
				templateUrl: 'src/settings/settings.jsp',
				controller: 'Settings.SettingsController as settingsCtrl',
				data: {
					tab: 'programs'
				}
			})
		.state('settings.integration',
			{
				url: '/integration',
				templateUrl: 'src/settings/settings.jsp',
				controller: 'Settings.SettingsController as settingsCtrl',
				data: {
					tab: 'integration'
				}
			})
		.state('support',
		{
			url: '/support',
			templateUrl: 'src/help/support.jsp',
			controller: 'Help.SupportController'
		})
		.state('help',
		{
			url: '/help',
			templateUrl: 'src/help/help.jsp',
			controller: 'Help.HelpController'
		})
		.state('record',
		{
			url: '/record/:demographicNo',
			templateUrl: 'src/record/record.jsp',
			controller: 'Record.RecordController as recordCtrl',
			resolve:
			{
				demo: ['$stateParams', 'demographicService', function($stateParams, demographicService)
				{
					return demographicService.getDemographic($stateParams.demographicNo);
				}],
				user: ['providerService', function(providerService)
				{
					return providerService.getMe();
				}],
				properties: ['uxService', function(uxService)
				{
					return uxService.getDisplayProperties();
				}]
			}
		})
		.state('record.details',
		{
			url: '/details',
			templateUrl: 'src/record/details/details.jsp',
			controller: 'Record.Details.DetailsController as detailsCtrl'
		})
		.state('record.summary',
		{
			url: '/summary?appointmentNo&encType',
			templateUrl: 'src/record/summary/summary.jsp',
			controller: 'Record.Summary.SummaryController as summaryCtrl'
		})
		.state('record.forms',
		{
			url: '/forms',
			templateUrl: 'src/record/forms/forms.jsp',
			controller: 'Record.Forms.FormController as formCtrl',
			params: {
				formListId: 0
			}
		})
		.state('record.forms.view',
		{
			url: '/view/:type/:id?name',
			templateUrl: 'src/record/forms/forms.jsp',
			params: { name: { dynamic: true } },
			controller: 'Record.Forms.FormController as formCtrl'
		})
		.state('record.forms.add',
		{
			url: '/add/:type/:id',
			templateUrl: 'src/record/forms/forms.jsp',
			controller: 'Record.Forms.FormController as formCtrl'
		})
		.state('record.consultRequests',
		{
			url: '/consults',
			templateUrl: 'src/consults/consultRequestList.jsp',
			controller: 'Consults.ConsultRequestListController as consultRequestListCtrl'
		})
		.state('record.consultResponses',
		{
			url: '/consultResponses',
			templateUrl: 'src/consults/consultResponseList.jsp',
			controller: 'Consults.ConsultResponseListController as consultResponseListCtrl'
		})
		.state('record.consultRequest',
		{
			url: '/consult/:requestId',
			templateUrl: 'src/consults/consultRequest.jsp',
			controller: 'Consults.ConsultRequestController as consultRequestCtrl',
			resolve:
			{
				consult: ['$stateParams', 'consultService', function($stateParams, consultService)
				{
					if($stateParams.requestId === "new") {
						return consultService.getNewRequest($stateParams.demographicNo);
					}
					return consultService.getRequest($stateParams.requestId);
				}],
				user: ['providerService', function(providerService)
				{
					return providerService.getMe();
				}]
			}
		})
		.state('record.consultResponse',
		{
			url: '/consultResponse/:responseId',
			templateUrl: 'src/consults/consultResponse.jsp',
			controller: 'Consults.ConsultResponseController as consultResponseCtrl',
			resolve:
			{
				consult: ['$stateParams', 'consultService', function($stateParams, consultService)
				{
					return consultService.getResponse($stateParams.responseId, $stateParams.demographicNo);
				}],
				user: ['providerService', function(providerService)
				{
					return providerService.getMe();
				}]
			}
		})
		.state('record.tickler',
		{
			url: '/tickler',
			templateUrl: 'src/tickler/ticklerList.jsp',
			controller: 'Tickler.TicklerListController as ticklerListCtrl',
			resolve:
			{
				providers: ['providerService', function(providerService)
				{
					return providerService.searchProviders(
					{
						active: true
					});
				}]
			}
		}).state('record.tracker',
		{
			url: '/tracker',
			templateUrl: 'src/record/tracker/tracker.jsp',
			controller: 'Record.Tracker.TrackerController as trackerCtrl'
		})
		.state('record.phr',
		{
			url: '/phr',
			templateUrl: 'src/record/phr/phr.jsp',
			controller: 'Record.PHR.PHRController as phrCtrl'
		})
		// .state('admin.integration',
		.state('k2aConfig',
			{
			// url: '/admin/integration',
			url:'/k2aConfig',
			templateUrl: 'src/admin/integration/know2act/Know2actConfiguration.jsp',
			controller: 'Admin.Integration.Know2act.k2aConfigController as k2aConfigCtrl'
		})
		.state('k2aTemplate',
			{
				// url: '/admin/integration',
				url:'/k2aTemplate',
				templateUrl: 'src/admin/integration/know2act/Know2actTemplate.jsp',
				controller: 'Admin.Integration.Know2act.k2aTemplateController as k2aTemplateCtrl'
			})
		.state('k2aNotification',
			{
				url: '/k2aNotification',
				templateUrl: 'src/admin/integration/know2act/Know2actNotifications.jsp',
				controller: 'Admin.Integration.Know2act.k2aNotificationController as k2aNoteCtrl'
			})
		.state('faxConfig',
			{
				url: '/faxConfig',
				templateUrl: 'src/admin/integration/fax/faxConfiguration.jsp',
				controller: 'Admin.Integration.Fax.FaxConfigurationController as faxController'
			})
		.state('faxSendReceive',
			{
				url: '/faxSendReceive',
				templateUrl: 'src/admin/integration/fax/faxSendReceive.jsp',
				controller: 'Admin.Integration.Fax.FaxSendReceiveController as faxSendReceiveController'
			})
	;

}]);

// For debugging purposes
/*
oscarApp.run( function($rootScope, $location) {

$rootScope.$on('$stateChangeStart',function(event, toState, toParams, fromState, fromParams){
	  console.log('$stateChangeStart to '+toState.to+'- fired when the transition begins. toState,toParams : \n',toState, toParams);
	});
	$rootScope.$on('$stateChangeError',function(event, toState, toParams, fromState, fromParams){
	  console.log('$stateChangeError - fired when an error occurs during transition.');
	  console.log(arguments);
	});
	$rootScope.$on('$stateChangeSuccess',function(event, toState, toParams, fromState, fromParams){
	  console.log('$stateChangeSuccess to '+toState.name+'- fired once the state transition is complete.');
	});
	// $rootScope.$on('$viewContentLoading',function(event, viewConfig){
	//   // runs on individual scopes, so putting it in "run" doesn't work.
	//   console.log('$viewContentLoading - view begins loading - dom not rendered',viewConfig);
	// });
	$rootScope.$on('$viewContentLoaded',function(event){
	  console.log('$viewContentLoaded - fired after dom rendered',event);
	});
	$rootScope.$on('$stateNotFound',function(event, unfoundState, fromState, fromParams){
	  console.log('$stateNotFound '+unfoundState.to+'  - fired when a state cannot be found by its name.');
	  console.log(unfoundState, fromState, fromParams);
	});

});
*/



/*

 user: function($stateParams, UserService) {
	  return UserService.find($stateParams.id);
	},
oscarApp.config(['$routeProvider',
					function($routeProvider) {

						when('/settings', {
							templateUrl: 'src/partials/settings-classic.jsp',
							controller: 'Settings.SettingsController'
						}).
						when('/support', {
							templateUrl: 'src/partials/support.jsp',
							controller: 'Help.SupportController'
						}).
						when('/help', {
							templateUrl: 'src/partials/help.jsp',
							controller: 'Help.HelpController'
						}).

						when('/messenger', {
							templateUrl: 'src/partials/messenger.jsp',
							controller: 'MessengerCtrl'
						}).
						when('/eform', {
							templateUrl: 'src/partials/eform.jsp',
							controller: 'EformFullCtrl'
						}).
						when('/eform2', {
							templateUrl: 'src/partials/eform2.jsp',
							controller: 'EformFull2Ctrl'
						}).

					}
]);
*/



//for dev - just to keep the cache clear
/*
oscarApp.run(function($rootScope, $templateCache) {
	$rootScope.$on('$viewContentLoaded', function() {
		$templateCache.removeAll();
		console.log("onclick of tab");
	});
});


//reset the left nav back
oscarApp.run( function($rootScope, $location) {
	$rootScope.$on( "$routeChangeStart", function(event, next, current) {
		$("#left_pane").addClass("col-md-2");
		$("#left_pane").show();
		$("#right_pane").removeClass("col-md-12");
		$("#right_pane").addClass("col-md-10");
	});
});

*/

//this is for the patient list control. Tells us which template to load
/*angular.module('oscarProviderViewModule').factory('Navigation', function($rootScope)
{
	return {
		location: '',

		load: function(msg)
		{
			this.location = msg;
		}
	};
});*/
angular.module('oscarProviderViewModule').factory('Navigation', [
	function()
	{
		return {
			location: '',

			load: function(msg)
			{
				this.location = msg;
			}
		};
	}
]);

/*

angular.module('oscarProviderViewModule').directive('oscarSecurityShow', function ($animate, securityService) {
	  return function(scope, element, attr) {
			scope.$watch(attr.oscarSecurityShow, function ngShowWatchAction(value){
				//console.log('valuee='+value.toSource());

				if(value.objectName != null && value.privilege != null) {
					//securityService.hasHigh(value.objectName,value.privilege,null);
					console.log('gtg');
				}

			  //set value to true to show, or else hide
			  $animate[value ? 'removeClass' : 'addClass'](element, 'ng-hide');
			});
	  };
});
*/


/***/ }),

/***/ "./generated/api/AppointmentApi.ts":
/*!*****************************************!*\
  !*** ./generated/api/AppointmentApi.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
exports.__esModule = true;
/* tslint:disable:no-unused-variable member-ordering */
var AppointmentApi = /** @class */ (function () {
    function AppointmentApi($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'http://localhost/';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * @param calendarAppointment
     */
    AppointmentApi.prototype.addAppointment = function (calendarAppointment, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/appointment';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: calendarAppointment,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @param appointmentNo
     */
    AppointmentApi.prototype.deleteAppointment = function (appointmentNo, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/appointment/{appointmentNo}'
            .replace('{' + 'appointmentNo' + '}', encodeURIComponent(String(appointmentNo)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'appointmentNo' is not null or undefined
        if (appointmentNo === null || appointmentNo === undefined) {
            throw new Error('Required parameter appointmentNo was null or undefined when calling deleteAppointment.');
        }
        var httpRequestParams = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @param appointmentNo
     */
    AppointmentApi.prototype.setNextStatus = function (appointmentNo, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/appointment/{appointmentNo}/rotate_status'
            .replace('{' + 'appointmentNo' + '}', encodeURIComponent(String(appointmentNo)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'appointmentNo' is not null or undefined
        if (appointmentNo === null || appointmentNo === undefined) {
            throw new Error('Required parameter appointmentNo was null or undefined when calling setNextStatus.');
        }
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @param calendarAppointment
     */
    AppointmentApi.prototype.updateAppointment = function (calendarAppointment, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/appointment';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            data: calendarAppointment,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    AppointmentApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
    return AppointmentApi;
}());
exports.AppointmentApi = AppointmentApi;


/***/ }),

/***/ "./generated/api/ScheduleApi.ts":
/*!**************************************!*\
  !*** ./generated/api/ScheduleApi.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
exports.__esModule = true;
/* tslint:disable:no-unused-variable member-ordering */
var ScheduleApi = /** @class */ (function () {
    function ScheduleApi($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'http://localhost/';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * @param year
     * @param month
     * @param providerNo
     */
    ScheduleApi.prototype.fetchMonthlyData = function (year, month, providerNo, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/fetchMonthly/{providerNo}/{year}/{month}'
            .replace('{' + 'year' + '}', encodeURIComponent(String(year)))
            .replace('{' + 'month' + '}', encodeURIComponent(String(month)))
            .replace('{' + 'providerNo' + '}', encodeURIComponent(String(providerNo)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined when calling fetchMonthlyData.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined when calling fetchMonthlyData.');
        }
        // verify required parameter 'providerNo' is not null or undefined
        if (providerNo === null || providerNo === undefined) {
            throw new Error('Required parameter providerNo was null or undefined when calling fetchMonthlyData.');
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @param demographicNo
     */
    ScheduleApi.prototype.findExistAppointments = function (demographicNo, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/{demographicNo}/appointmentHistory'
            .replace('{' + 'demographicNo' + '}', encodeURIComponent(String(demographicNo)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'demographicNo' is not null or undefined
        if (demographicNo === null || demographicNo === undefined) {
            throw new Error('Required parameter demographicNo was null or undefined when calling findExistAppointments.');
        }
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @param appointmentTo1
     */
    ScheduleApi.prototype.getAppointment = function (appointmentTo1, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/getAppointment';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: appointmentTo1,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     */
    ScheduleApi.prototype.getAppointmentReasons = function (extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/reasons';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     */
    ScheduleApi.prototype.getAppointmentStatuses = function (extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/statuses';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     */
    ScheduleApi.prototype.getAppointmentTypes = function (extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/types';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @param providerNo
     * @param date
     */
    ScheduleApi.prototype.getAppointmentsForDay = function (providerNo, date, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/{providerNo}/day/{date}'
            .replace('{' + 'providerNo' + '}', encodeURIComponent(String(providerNo)))
            .replace('{' + 'date' + '}', encodeURIComponent(String(date)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'providerNo' is not null or undefined
        if (providerNo === null || providerNo === undefined) {
            throw new Error('Required parameter providerNo was null or undefined when calling getAppointmentsForDay.');
        }
        // verify required parameter 'date' is not null or undefined
        if (date === null || date === undefined) {
            throw new Error('Required parameter date was null or undefined when calling getAppointmentsForDay.');
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @param date
     */
    ScheduleApi.prototype.getAppointmentsForDay1 = function (date, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/day/{date}'
            .replace('{' + 'date' + '}', encodeURIComponent(String(date)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'date' is not null or undefined
        if (date === null || date === undefined) {
            throw new Error('Required parameter date was null or undefined when calling getAppointmentsForDay1.');
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     */
    ScheduleApi.prototype.getCalendarAppointmentStatuses = function (extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/calendar/statuses';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @param providerId
     * @param startDate
     * @param endDate
     * @param site
     */
    ScheduleApi.prototype.getCalendarEvents = function (providerId, startDate, endDate, site, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/calendar/{providerId}'
            .replace('{' + 'providerId' + '}', encodeURIComponent(String(providerId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'providerId' is not null or undefined
        if (providerId === null || providerId === undefined) {
            throw new Error('Required parameter providerId was null or undefined when calling getCalendarEvents.');
        }
        if (startDate !== undefined) {
            queryParameters['startDate'] = startDate;
        }
        if (endDate !== undefined) {
            queryParameters['endDate'] = endDate;
        }
        if (site !== undefined) {
            queryParameters['site'] = site;
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     */
    ScheduleApi.prototype.getScheduleGroups = function (extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/groups';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     */
    ScheduleApi.prototype.getScheduleTemplateCodes = function (extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/templateCodes';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @param id
     * @param appointmentTo1
     */
    ScheduleApi.prototype.updateAppointmentStatus = function (id, appointmentTo1, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/appointment/{id}/updateStatus'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateAppointmentStatus.');
        }
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: appointmentTo1,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @param id
     * @param appointmentTo1
     */
    ScheduleApi.prototype.updateAppointmentType = function (id, appointmentTo1, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/schedule/appointment/{id}/updateType'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateAppointmentType.');
        }
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: appointmentTo1,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    ScheduleApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
    return ScheduleApi;
}());
exports.ScheduleApi = ScheduleApi;


/***/ }),

/***/ "./node_modules/css-loader/index.js?sourceMap!./node_modules/sass-loader/lib/loader.js?sourceMap&precision=8!./scss/juno.scss":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/css-loader?sourceMap!./node_modules/sass-loader/lib/loader.js?sourceMap&precision=8!./scss/juno.scss ***!
  \***************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

throw new Error("Module build failed: \n\t\tcolor: $dark-grey;\n        ^\n      Undefined variable: \"$dark-grey\".\n      in /home/jordan/oscar/RELEASE_15_BETA/src/main/frontend/src/admin/integration/fax/_fax.scss (line 93, column 10)");

/***/ }),

/***/ "./scss/juno.scss":
/*!************************!*\
  !*** ./scss/juno.scss ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../node_modules/css-loader?sourceMap!../node_modules/sass-loader/lib/loader.js?sourceMap&precision=8!./juno.scss */ "./node_modules/css-loader/index.js?sourceMap!./node_modules/sass-loader/lib/loader.js?sourceMap&precision=8!./scss/juno.scss");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./src/admin/adminController.js":
/*!**************************************!*\
  !*** ./src/admin/adminController.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('oscarProviderViewModule').controller('AdminCtrl', ['$scope', '$http', function ($scope,$http) {

}]);


/***/ }),

/***/ "./src/admin/integration/fax/faxConfigurationController.js":
/*!*****************************************************************!*\
  !*** ./src/admin/integration/fax/faxConfigurationController.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module("Admin.Integration.Fax").controller('Admin.Integration.Fax.FaxConfigurationController', [
	"$uibModal",
	"faxAccountService",
	"providerService",
	"systemPreferenceService",
	function ($uibModal,
	          faxAccountService,
	          providerService,
	          systemPreferenceService)
	{
		var controller = this;
		controller.faxAccountList = [];
		controller.loggedInProvider = null;
		controller.masterFaxDisabled = true;
		controller.masterFaxEnabledInbound = false;
		controller.masterFaxEnabledOutbound = false;

		controller.initialize = function()
		{
			// if the current provider number is unknown, retrieve it.
			if(controller.loggedInProvider == null)
			{
				providerService.getMe().then(
					function success(response)
					{
						controller.loggedInProvider = response;
					},
					function error(error)
					{
						console.error(error);
					}
				)
			}
			systemPreferenceService.isPreferenceEnabled("masterFaxEnabledInbound", controller.masterFaxEnabledInbound).then(
				function success(response)
				{
					controller.masterFaxEnabledInbound = response;
					controller.updateMasterFaxDisabledStatus();
				},
				function error(error)
				{
					console.error(error);
				}
			);
			systemPreferenceService.isPreferenceEnabled("masterFaxEnabledOutbound", controller.masterFaxEnabledOutbound).then(
				function success(response)
				{
					controller.masterFaxEnabledOutbound = response;
					controller.updateMasterFaxDisabledStatus();
				},
				function error(error)
				{
					console.error(error);
				}
			);

			faxAccountService.listAccounts().then(
				function success(response)
				{
					controller.faxAccountList = response;
				},
				function error(error)
				{
					console.error(error);
				}
			)
		};

		controller.editNewFaxAccount = function editNewFaxAccount()
		{
			controller.editFaxAccount();
		};
		controller.editFaxAccount = function editFaxAccount(faxAccount)
		{
			let isNewAcct = true;
			if(faxAccount)
			{
				isNewAcct = false;
			}

			var modalInstance = $uibModal.open(
				{
					templateUrl: 'admin/integration/fax/faxConfigurationEdit.jsp',
					controller: 'Admin.Integration.Fax.FaxConfigurationEditController as faxConfigEditController',
					backdrop: 'static',
					windowClass: 'faxEditModal',
					resolve:
						{
							faxAccount: function()
							{
								return faxAccount;
							},
							masterFaxEnabledInbound: function()
							{
								return controller.masterFaxEnabledInbound;
							},
							masterFaxEnabledOutbound: function()
							{
								return controller.masterFaxEnabledOutbound;
							}
						}
				});

			modalInstance.result.then(
				// the object passed back on closing
				function success(updatedAccount)
				{
					if(isNewAcct)
					{
						// new accounts get added to the account list
						controller.faxAccountList.push(updatedAccount);
					}
					else
					{
						// clear the existing properties and replace with the updated ones
						angular.copy(updatedAccount, faxAccount);
					}
				},
				function error(errors)
				{
					// do nothing on dismissal
				});
		};

		controller.saveMasterFaxEnabledStateInbound = function saveMasterFaxEnabledState()
		{
			controller.setSystemProperty("masterFaxEnabledInbound", controller.masterFaxEnabledInbound);
			controller.updateMasterFaxDisabledStatus();
		};
		controller.saveMasterFaxEnabledStateOutbound = function saveMasterFaxEnabledState()
		{
			controller.setSystemProperty("masterFaxEnabledOutbound", controller.masterFaxEnabledOutbound);
			controller.updateMasterFaxDisabledStatus();
		};

		controller.updateMasterFaxDisabledStatus = function updateMasterFaxDisabledStatus()
		{
			controller.masterFaxDisabled = !controller.masterFaxEnabledInbound && !controller.masterFaxEnabledOutbound;
		};
		controller.setSystemProperty = function setSystemProperty(key, value)
		{
			systemPreferenceService.setPreference(key, value).then(
				function success(response)
				{
				},
				function error(error)
				{
					console.error(error);
				}
			);
		};

		controller.initialize();
	}
]);

/***/ }),

/***/ "./src/admin/integration/fax/faxConfigurationEditController.js":
/*!*********************************************************************!*\
  !*** ./src/admin/integration/fax/faxConfigurationEditController.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module("Admin.Integration.Fax").controller('Admin.Integration.Fax.FaxConfigurationEditController', [
	"$uibModal",
	"$uibModalInstance",
	"faxAccountService",
	"faxAccount",
	"masterFaxEnabledInbound",
	"masterFaxEnabledOutbound",
	function ($uibModal,
	          $uibModalInstance,
	          faxAccountService,
	          faxAccount,
	          masterFaxEnabledInbound,
	          masterFaxEnabledOutbound)
	{
		var controller = this;
		controller.connectionStatusEnum = Object.freeze({"unknown":1, "success":2, "failure":3});
		controller.coverLetterOptions = [
			"None",
			"Basic",
			"Standard",
			"Company",
			"Personal"
		];

		controller.initialize = function()
		{
			if(faxAccount)
			{
				controller.faxAccount = angular.copy(faxAccount);
				if(!controller.faxAccount.connectionStatus)
				{
					controller.setDefaultConnectionStatus();
				}
			}
			else
			{
				controller.faxAccount = {
					enabled: true,
					enableInbound: false,
					enableOutbound: false,
					accountLogin: null,
					accountEmail: '',
					password: '',
					displayName: '',
					coverLetterOption: '',
					faxNumber: '',
					connectionStatus: controller.connectionStatusEnum.unknown
				};
			}
			// get the master flag status for inbound/outbound settings
			controller.masterFaxEnabledInbound = masterFaxEnabledInbound;
			controller.masterFaxEnabledOutbound = masterFaxEnabledOutbound;

			// switch off settings that are disabled and un-editable.
			// if this is not done, form errors may prevent saving changes to other section
			if(!controller.masterFaxEnabledInbound)
			{
				controller.faxAccount.enableInbound = false;
			}
			if(!controller.masterFaxEnabledOutbound)
			{
				controller.faxAccount.enableOutbound = false;
			}
		};

		controller.saveSettings = function (form)
		{
			if(!form.$valid)
			{
				alert("The form contains errors");
				return;
			}

			let closeSuccess = function(updatedAccount)
			{
				// keep these settings
				updatedAccount.connectionStatus = controller.faxAccount.connectionStatus;
				$uibModalInstance.close(updatedAccount);
			};
			let closeError = function(error)
			{
				console.error(error);
			};

			if (controller.faxAccount.id)
			{
				faxAccountService.updateAccountSettings(controller.faxAccount.id, controller.faxAccount).then(
					closeSuccess,
					closeError
				)
			}
			else
			{
				faxAccountService.addAccountSettings(controller.faxAccount).then(
					closeSuccess,
					closeError
				)
			}
		};
		controller.cancel = function cancel()
		{
			$uibModalInstance.dismiss('cancel');
		};

		controller.testConnection = function()
		{
			faxAccountService.testConnection(controller.faxAccount).then(
				function success(response)
				{
					if(response)
					{
						controller.faxAccount.connectionStatus = controller.connectionStatusEnum.success;
					}
					else
					{
						controller.faxAccount.connectionStatus = controller.connectionStatusEnum.failure;
					}
				},
				function error(error)
				{
					console.error(error);
					controller.faxAccount.connectionStatus = controller.connectionStatusEnum.unknown;
				}
			)
		};
		controller.setDefaultConnectionStatus = function()
		{
			controller.faxAccount.connectionStatus = controller.connectionStatusEnum.unknown;
		};

		controller.initialize();
	}
]);

/***/ }),

/***/ "./src/admin/integration/fax/faxSendReceiveController.js":
/*!***************************************************************!*\
  !*** ./src/admin/integration/fax/faxSendReceiveController.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(moment) {angular.module("Admin.Integration.Fax").controller('Admin.Integration.Fax.FaxSendReceiveController', [
	'NgTableParams',
	'providerService',
	"faxAccountService",
	"faxInboundService",
	"faxOutboundService",
	function (NgTableParams,
	          providerService,
	          faxAccountService,
	          faxInboundService,
	          faxOutboundService)
	{
		var controller = this;
		controller.systemStatusEnum = Object.freeze({"sent":"SENT", "queued":"QUEUED", "error":"ERROR"});
		controller.tabEnum = Object.freeze({"inbox":0, "outbox":1});
		controller.activeTab = controller.tabEnum.outbox;
		controller.loggedInProviderNo = null;

		controller.nextPullTime = null;
		controller.nextPushTime = null;

		controller.selectedFaxAccount = null;
		controller.faxAccountList = [];
		controller.outboxItemList = [];
		controller.inboxItemList = [];

		// ngTable object for storing search parameters
		controller.inbox =
		{
			search: {
				page: 1,
				count: 10,
				sorting: {
					DateSent: "desc"
				}
			},
			startDate: null,
			endDate: null
		};
		// ngTable object for storing search parameters
		controller.outbox =
			{
				search: {
					page: 1,
					count: 10,
					sorting: {
						DateSent: "desc"
					}
				},
				startDate: null,
				endDate: null
			};

		controller.initialize = function()
		{
			faxAccountService.listAccounts().then(
				function success(response)
				{
					controller.faxAccountList = response;
					if(controller.faxAccountList.length > 0)
					{
						controller.selectedFaxAccount = controller.faxAccountList[0];
					}
				},
				function error(error)
				{
					console.error(error);
				}
			);
			controller.loadNextPushTime();
			controller.loadNextPullTime();
		};

		controller.loadOutboxItems = function()
		{
			controller.tableParamsOutbox = new NgTableParams(
				controller.outbox.search,
				{
					getData: function(params)
					{
						controller.outbox.search = params.url();

						let defaults = {
							page: controller.outbox.search.page,
							perPage: controller.outbox.search.count
						};
						let searchParams = {
							startDate:  controller.formatOptionalDateParam(controller.outbox.startDate),
							endDate: controller.formatOptionalDateParam(controller.outbox.endDate),
						};
						var searchListHelper = new Juno.Common.SearchListHelper(defaults, searchParams);
						return faxAccountService.getOutbox(controller.selectedFaxAccount.id, searchListHelper).then(
							function success(response)
							{
								controller.outboxItemList = response.data;
								controller.tableParamsOutbox.total(response.meta.total);
								return controller.outboxItemList;
							},
							function error(error)
							{
								console.error(error);
								alert("Failed to load outbox");
							}
						);
					}
				}
			);
			controller.loadNextPushTime();
		};

		controller.loadInboxItems = function ()
		{
			controller.tableParamsInbox = new NgTableParams(
				controller.inbox.search,
				{
					getData: function (params)
					{
						controller.inbox.search = params.url();
						console.info(controller.inbox);

						let defaults = {
							page: controller.inbox.search.page,
							perPage: controller.inbox.search.count
						};
						let searchParams = {
							startDate:  controller.formatOptionalDateParam(controller.inbox.startDate),
							endDate: controller.formatOptionalDateParam(controller.inbox.endDate),
						};
						var searchListHelper = new Juno.Common.SearchListHelper(defaults, searchParams);
						return faxAccountService.getInbox(controller.selectedFaxAccount.id, searchListHelper).then(
							function success(response)
							{
								controller.inboxItemList = response.data;
								controller.tableParamsInbox.total(response.meta.total);
								return controller.inboxItemList;
							},
							function error(error)
							{
								console.error(error);
								alert("Failed to load inbox");
							}
						);
					}
				}
			);
			controller.loadNextPullTime();
		};

		controller.resendFax = function(outboxItem)
		{
			outboxItem.systemStatus = 'RESEND';
			faxOutboundService.resendOutboundFax(outboxItem.id).then(
				function success(response)
				{
					angular.copy(response, outboxItem);
					console.info(outboxItem);
					if(outboxItem.systemStatus === controller.systemStatusEnum.error)
					{
						alert(outboxItem.systemStatusMessage);
					}
				},
				function error(error)
				{
					outboxItem.systemStatus = controller.systemStatusEnum.error;
					console.error(error);
					alert(error);
				}
			);
		};

		controller.loadNextPullTime = function()
		{
			faxInboundService.getNextPullTime().then(
				function success(response)
				{
					controller.nextPullTime = response;
				},
				function error(error)
				{
					controller.nextPullTime = null;
					console.error(error);
					alert(error);
				}
			);
		};
		controller.loadNextPushTime = function()
		{
			faxOutboundService.getNextPushTime().then(
				function success(response)
				{
					controller.nextPushTime = response;
				},
				function error(error)
				{
					controller.nextPushTime = null;
					console.error(error);
					alert(error);
				}
			);
		};

		controller.changeTab = function(tabId)
		{
			controller.activeTab = tabId;
		};

		controller.openDocument = function(documentId)
		{
			let openDocumentWindow = function()
			{
				let url = "../dms/showDocument.jsp";
				let params = "segmentID="+documentId+"&providerNo="+ controller.loggedInProviderNo + "&status=A&inWindow=true&chartView&demoName=";
				let windowName = "ShowDocument" + documentId;
				window.open(url + "?" + params, windowName, "scrollbars=1,width=1024,height=768");
			};

			// if the current provider number is unknown, retrieve it before opening the new window.
			if(controller.loggedInProviderNo == null)
			{
				providerService.getMe().then(
					function success(response)
					{
						controller.loggedInProviderNo = response.providerNo;
						openDocumentWindow();
					},
					function error(error)
					{
						console.error(error);
					}
				)
			}
			else
			{
				openDocumentWindow();
			}
		};

		controller.viewDownloadFile = function(outboundId)
		{
			let url = faxOutboundService.getDownloadUrl(outboundId);
			let windowName = "ViewFaxFile" + outboundId;
			window.open(url, windowName, "scrollbars=1,width=1024,height=768");
		};

		controller.formatOptionalDateParam = function(dateObj)
		{
			return Juno.Common.Util.isUndefinedOrNull(dateObj)? null : moment(dateObj).format('YYYY-MM-DD')
		};

		controller.initialize();
	}
]);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! moment */ "./node_modules/moment/moment.js")))

/***/ }),

/***/ "./src/admin/integration/fax/module.js":
/*!*********************************************!*\
  !*** ./src/admin/integration/fax/module.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('Admin.Integration.Fax', ['Common', 'Common.Services']);

/***/ }),

/***/ "./src/admin/integration/know2act/Know2actConfigController.js":
/*!********************************************************************!*\
  !*** ./src/admin/integration/know2act/Know2actConfigController.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module("Admin.Integration.Know2act").controller('Admin.Integration.Know2act.k2aConfigController', [
	"k2aService",
	function (k2aService)
	{
		var controller = this;

		controller.PrevListQuantity = 10;
		controller.availablePreventionRuleSets = [];
		controller.currentPreventionRulesSet = [];
		controller.clinicName = "";
		controller.k2aActive = false;

		controller.checkStatus = function ()
		{
			k2aService.isK2AInit().then(
				function success(data)
				{
					controller.k2aActive = data;
					if (controller.k2aActive)
					{
						controller.getPreventionRulesList();
						controller.getCurrentPreventionRulesVersion();
					}
				},
				function failure(error)
				{
					console.error(error);
					alert("Failed to verify K2A Status");
				}
			);
		};
		controller.checkStatus();

		controller.getPreventionRulesList = function ()
		{
			k2aService.preventionRulesList().then(
				function success(data)
				{
					controller.availablePreventionRuleSets = data;
					console.log("availablePreventionRuleSets", controller.availablePreventionRuleSets);
				},
				function failure(error)
				{
					console.error(error);
				}
			);
		};

		controller.getCurrentPreventionRulesVersion = function ()
		{
			k2aService.getCurrentPreventionRulesVersion().then(
				function success(data)
				{
					controller.currentPreventionRulesSet = data;
					console.log("currentPreventionRulesSet", data);
				},
				function failure(error)
				{
					console.error(error);
				}
			);
		};

		controller.loadPreventionRuleById = function (prevSet)
		{

			// if (confirm("<bean:message key="admin.k2a.confirmation"/>")) {
			// prevSet.agreement = "<bean:message key="admin.k2a.confirmation"/>";
			k2aService.loadPreventionRuleById(prevSet).then(function (data)
			{
				k2aService.getCurrentPreventionRulesVersion();
			});
			// }
		};

		controller.increasePrevListQuantity = function ()
		{
			controller.PrevListQuantity = controller.availablePreventionRuleSets.length;
		};

		controller.initK2A = function ()
		{
			k2aService.initK2A(controller.clinicName).then(
				function success(response)
				{
					console.info("Init complete, check status", response);
					controller.checkStatus();
				},
				function failure(error)
				{
					console.log(error);
					alert("Failed to initialize K2A");
				}
			);
		}
	}
]);

/***/ }),

/***/ "./src/admin/integration/know2act/Know2actNotificationController.js":
/*!**************************************************************************!*\
  !*** ./src/admin/integration/know2act/Know2actNotificationController.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module("Admin.Integration.Know2act").controller('Admin.Integration.Know2act.k2aNotificationController', [
	"k2aService",
	function (k2aService)
	{
		var controller = this;
		controller.page = {};
		controller.page.notifications = [];

		controller.readMore = function (notif) {
			k2aService.getMoreNotification(notif).then(
				function success(data) {
					var win = window.open(data, 'moreInfo', 'width=700,height=700');
					win.focus();
				},
				function failure(error) {
					console.error(error);
				});
		};
		controller.archive = function (notif) {
			k2aService.ackNotification(notif).then(
				function success(data) {
					controller.getNotifications();
				},
				function failure(error) {
					console.error(error);
					alert("Failed to acknowledge notification");
				});
		};
		controller.getNotifications = function () {
			k2aService.getNotifications().then(
				function success(data) {
					controller.page.notifications = data;
				},
				function failure(error) {
					console.error(error);
					alert("Failed to load notifications");
				});
		};
		controller.getNotifications();
	}
]);

/***/ }),

/***/ "./src/admin/integration/know2act/Know2actTemplateController.js":
/*!**********************************************************************!*\
  !*** ./src/admin/integration/know2act/Know2actTemplateController.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module("Admin.Integration.Know2act").controller('Admin.Integration.Know2act.k2aTemplateController', [
	"reportByTemplateService",
	"k2aService",
	function (reportByTemplateService,
	          k2aService)
	{
		var controller = this;

		controller.message = "";
		controller.k2aActive = false;
		controller.k2aReports = null;
		controller.K2A_URL = "";

		controller.dtOptions = {};
		// controller.dtOptions = DTOptionsBuilder.newOptions().withOption('order', [1, 'asc']);

		controller.checkStatus = function checkStatus() {
			k2aService.isK2AInit().then(
				function success(data) {
					controller.k2aActive = data;
				},
				function failure(error) {
					console.error(error);
					alert("Failed to verify K2A Status");
				}
			);
		};
		controller.checkStatus();

		controller.getAllK2AReports = function getAllK2AReports(){
			reportByTemplateService.getAllK2AReports().then(function(data){
				controller.k2aReports = data;
				console.log("k2a reports", controller.k2aReports);
			});
		};
		controller.getAllK2AReports();

		controller.saveK2AReport = function saveK2AReport(id){
			reportByTemplateService.getK2AReportById(id).then(function(data){
				controller.message = data;
				console.log(controller.message);
				refreshParent();
			});
		};

		controller.openK2AUrl = function openK2AUrl() {
			reportByTemplateService.getK2AUrl().then(
				function success(data) {
					window.open(data + "/#/ws/rs/posts/browse/Report");
				},
				function failure(error) {
					console.log(error);
				});
		};

		controller.refreshParent = function refreshParent() {
			window.opener.document.location.href = "../../../../oscarReport/reportByTemplate/homePage.jsp";
		};
		window.onunload = controller.refreshParent();
	}
]);

/***/ }),

/***/ "./src/admin/integration/know2act/module.js":
/*!**************************************************!*\
  !*** ./src/admin/integration/know2act/module.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('Admin.Integration.Know2act', ['Common', 'Common.Services']);

/***/ }),

/***/ "./src/admin/integration/module.js":
/*!*****************************************!*\
  !*** ./src/admin/integration/module.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('Admin.Integration', ['Common', 'Common.Services']);

/***/ }),

/***/ "./src/admin/module.js":
/*!*****************************!*\
  !*** ./src/admin/module.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('Admin', ['Common', 'Common.Services']);

/***/ }),

/***/ "./src/billing/billingController.js":
/*!******************************************!*\
  !*** ./src/billing/billingController.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('oscarProviderViewModule').controller('BillingCtrl', [ '$scope', '$http', function ($scope,$http) {

}]);


/***/ }),

/***/ "./src/common/directives/angular-ui-calendar.js":
/*!******************************************************!*\
  !*** ./src/common/directives/angular-ui-calendar.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(moment, $) {/*
*  AngularJs Fullcalendar Wrapper for the JQuery FullCalendar
*  API @ http://arshaw.com/fullcalendar/
*
*  Angular Calendar Directive that takes in the [eventSources] nested array object as the ng-model and watches it deeply changes.
*       Can also take in multiple event urls as a source object(s) and feed the events per view.
*       The calendar will watch any eventSource array and update itself when a change is made.
*
*/

/*
 * Copied and modified for use at Cloudpractice because I couldn't figure out how to keep it from
 * loading before our initialization was done.  I've marked the changes with a CP below.
 */

angular.module('ui.calendar', [])
  .constant('uiCalendarConfig', {calendars: {}})
  .controller('uiCalendarCtrl', ['$scope', 
                                 '$locale', function(
                                  $scope, 
                                  $locale){

      var sources = $scope.eventSources,
          extraEventSignature = $scope.calendarWatchEvent ? $scope.calendarWatchEvent : angular.noop,

          wrapFunctionWithScopeApply = function(functionToWrap){
              return function(){
                  // This may happen outside of angular context, so create one if outside.

                  if ($scope.$root.$$phase) {
                      return functionToWrap.apply(this, arguments);
                  } else {
                      var args = arguments;
                      var self = this;
                      return $scope.$root.$apply(function(){
                          return functionToWrap.apply(self, args);
                      });
                  }
              };
          };

      var eventSerialId = 1;
      // @return {String} fingerprint of the event object and its properties
      this.eventFingerprint = function(e) {
        if (!e._id) {
          e._id = eventSerialId++;
        }
        
        var extraSignature = extraEventSignature({event: e}) || '';
        var start = moment.isMoment(e.start) ? e.start.unix() : (e.start ? moment(e.start).unix() : '');
        var end =   moment.isMoment(e.end)   ? e.end.unix()   : (e.end   ? moment(e.end).unix()   : '');
        
        // This extracts all the information we need from the event. http://jsperf.com/angular-calendar-events-fingerprint/3
        return "" + e._id + (e.id || '') + (e.title || '') + (e.url || '') + start + end +
          (e.allDay || '') + (e.className || '') + extraSignature;
      };

      var sourceSerialId = 1, sourceEventsSerialId = 1;
      // @return {String} fingerprint of the source object and its events array
      this.sourceFingerprint = function(source) {
          var fp = '' + (source.__id || (source.__id = sourceSerialId++)),
              events = angular.isObject(source) && source.events;
          if (events) {
              fp = fp + '-' + (events.__id || (events.__id = sourceEventsSerialId++));
          }
          return fp;
      };

      // @return {Array} all events from all sources
      this.allEvents = function() {
        // do sources.map(&:events).flatten(), but we don't have flatten
        var arraySources = [];
        for (var i = 0, srcLen = sources.length; i < srcLen; i++) {
          var source = sources[i];
          if (angular.isArray(source)) {
            // event source as array
            arraySources.push(source);
          } else if(angular.isObject(source) && angular.isArray(source.events)){
            // event source as object, ie extended form
            var extEvent = {};
            for(var key in source){
              if(key !== '_id' && key !== 'events'){
                 extEvent[key] = source[key];
              }
            }
            for(var eI = 0;eI < source.events.length;eI++){
              angular.extend(source.events[eI],extEvent);
            }
            arraySources.push(source.events);
          }
        }
        return Array.prototype.concat.apply([], arraySources);
      };

      // Track changes in array of objects by assigning id tokens to each element and watching the scope for changes in the tokens
      // @param {Array|Function} arraySource array of objects to watch
      // @param tokenFn {Function} that returns the token for a given object
      // @return {Object}
      //  subscribe: function(scope, function(newTokens, oldTokens))
      //    called when source has changed. return false to prevent individual callbacks from firing
      //  onAdded/Removed/Changed:
      //    when set to a callback, called each item where a respective change is detected
      this.changeWatcher = function(arraySource, tokenFn) {
        var self;
        var getTokens = function() {
          var array = angular.isFunction(arraySource) ? arraySource() : arraySource;
          var result = [], token, el;
          for (var i = 0, n = array.length; i < n; i++) {
            el = array[i];
            token = tokenFn(el);
            map[token] = el;
            result.push(token);
          }
          return result;
        };

        // @param {Array} a
        // @param {Array} b
        // @return {Array} elements in that are in a but not in b
        // @example
        //  subtractAsSets([6, 100, 4, 5], [4, 5, 7]) // [6, 100]
        var subtractAsSets = function(a, b) {
          var result = [], inB = {}, i, n;
          for (i = 0, n = b.length; i < n; i++) {
            inB[b[i]] = true;
          }
          for (i = 0, n = a.length; i < n; i++) {
            if (!inB[a[i]]) {
              result.push(a[i]);
            }
          }
          return result;
        };

        // Map objects to tokens and vice-versa
        var map = {};

        // Compare newTokens to oldTokens and call onAdded, onRemoved, and onChanged handlers for each affected event respectively.
        var applyChanges = function(newTokens, oldTokens) {
          var i, n, el, token;
          var replacedTokens = {};
          var removedTokens = subtractAsSets(oldTokens, newTokens);
          for (i = 0, n = removedTokens.length; i < n; i++) {
            var removedToken = removedTokens[i];
            el = map[removedToken];
            delete map[removedToken];
            var newToken = tokenFn(el);
            // if the element wasn't removed but simply got a new token, its old token will be different from the current one
            if (newToken === removedToken) {
              self.onRemoved(el);
            } else {
              replacedTokens[newToken] = removedToken;
              self.onChanged(el);
            }
          }

          var addedTokens = subtractAsSets(newTokens, oldTokens);
          for (i = 0, n = addedTokens.length; i < n; i++) {
            token = addedTokens[i];
            el = map[token];
            if (!replacedTokens[token]) {
              self.onAdded(el);
            }
          }
        };
        return self = {
          subscribe: function(scope, onArrayChanged) {
            scope.$watch(getTokens, function(newTokens, oldTokens) {
              var notify = !(onArrayChanged && onArrayChanged(newTokens, oldTokens) === false);
              if (notify) {
                applyChanges(newTokens, oldTokens);
              }
            }, true);
          },
          onAdded: angular.noop,
          onChanged: angular.noop,
          onRemoved: angular.noop
        };
      };

      this.getFullCalendarConfig = function(calendarSettings, uiCalendarConfig){
          var config = {};

          angular.extend(config, uiCalendarConfig);
          angular.extend(config, calendarSettings);

          angular.forEach(config, function(value,key){
            if (typeof value === 'function'){
              config[key] = wrapFunctionWithScopeApply(config[key]);
            }
          });

          return config;
      };

    this.getLocaleConfig = function(fullCalendarConfig) {
      if (!fullCalendarConfig.lang || fullCalendarConfig.useNgLocale) {
        // Configure to use locale names by default
        var tValues = function(data) {
          // convert {0: "Jan", 1: "Feb", ...} to ["Jan", "Feb", ...]
          var r, k;
          r = [];
          for (k in data) {
            r[k] = data[k];
          }
          return r;
        };
        var dtf = $locale.DATETIME_FORMATS;
        return {
          monthNames: tValues(dtf.MONTH),
          monthNamesShort: tValues(dtf.SHORTMONTH),
          dayNames: tValues(dtf.DAY),
          dayNamesShort: tValues(dtf.SHORTDAY)
        };
      }
      return {};
    };
  }])
  .directive('uiCalendar', ['uiCalendarConfig', function(uiCalendarConfig) {
    return {
      restrict: 'A',
      scope: {
        eventSources:'=ngModel',
        calendarWatchEvent: '&',
        enabled: '=ngEnabled'     // CP: Added an option to enable the calendar
      },
      controller: 'uiCalendarCtrl',
      link: function(scope, elm, attrs, controller) {

        var sources = scope.eventSources,
            sourcesChanged = false,
            calendar,
            eventSourcesWatcher = controller.changeWatcher(sources, controller.sourceFingerprint),
            eventsWatcher = controller.changeWatcher(controller.allEvents, controller.eventFingerprint),
            options = null;

        function getOptions(){
          var calendarSettings = attrs.uiCalendar ? scope.$parent.$eval(attrs.uiCalendar) : {},
              fullCalendarConfig;

          fullCalendarConfig = controller.getFullCalendarConfig(calendarSettings, uiCalendarConfig);

          var localeFullCalendarConfig = controller.getLocaleConfig(fullCalendarConfig);
          angular.extend(localeFullCalendarConfig, fullCalendarConfig);
          options = { eventSources: sources };
          angular.extend(options, localeFullCalendarConfig);
          //remove calendars from options
          options.calendars = null;

          var options2 = {};
          for(var o in options){
            if(o !== 'eventSources'){
              options2[o] = options[o];
            }
          }
          return JSON.stringify(options2);
        }

        scope.destroyCalendar = function(){
          if(calendar && calendar.fullCalendar){
            calendar.fullCalendar('destroy');
          }
          if(attrs.calendar) {
            calendar = uiCalendarConfig.calendars[attrs.calendar] = $(elm).html('');
          } else {
            calendar = $(elm).html('');
          }
        };

        scope.initCalendar = function(){
          // CP: The calendar won't initialize when it's not enabled
          if(scope.enabled) {
		    if (!calendar) {
		      calendar = angular.element(elm).html('');
		    }
		    calendar.fullCalendar(options);
		    if(attrs.calendar) {
		      uiCalendarConfig.calendars[attrs.calendar] = calendar;
		    }
		  }
        };
        scope.$on('$destroy', function() {
          scope.destroyCalendar();
        });

        eventSourcesWatcher.onAdded = function(source) {
          if (calendar && calendar.fullCalendar) {
            calendar.fullCalendar(options);
            if (attrs.calendar) {
                uiCalendarConfig.calendars[attrs.calendar] = calendar;
            }
            calendar.fullCalendar('addEventSource', source);
            sourcesChanged = true;
          }
        };

        eventSourcesWatcher.onRemoved = function(source) {
          if (calendar && calendar.fullCalendar) {
            calendar.fullCalendar('removeEventSource', source);
            sourcesChanged = true;
          }
        };

        eventSourcesWatcher.onChanged = function() {
          if (calendar && calendar.fullCalendar) {
            calendar.fullCalendar('refetchEvents');
            sourcesChanged = true;
          }

        };

        eventsWatcher.onAdded = function(event) {
          if (calendar && calendar.fullCalendar) {
            calendar.fullCalendar('renderEvent', event, (event.stick ? true : false));
          }
        };

        eventsWatcher.onRemoved = function(event) {
          if (calendar && calendar.fullCalendar) {
            calendar.fullCalendar('removeEvents', event._id);
          }
        };

        eventsWatcher.onChanged = function(event) {
          if (calendar && calendar.fullCalendar) {
            var clientEvents = calendar.fullCalendar('clientEvents', event._id);
            for (var i = 0; i < clientEvents.length; i++) {
              var clientEvent = clientEvents[i];
              clientEvent = angular.extend(clientEvent, event);
              calendar.fullCalendar('updateEvent', clientEvent);
            }
          }
        };

        eventSourcesWatcher.subscribe(scope);
        eventsWatcher.subscribe(scope, function() {
          if (sourcesChanged === true) {
            sourcesChanged = false;
            // return false to prevent onAdded/Removed/Changed handlers from firing in this case
            return false;
          }
        });

        scope.$watch(getOptions, function(newValue, oldValue) {
          if(newValue !== oldValue) {
            scope.destroyCalendar();
            scope.initCalendar();
          } else if((newValue && angular.isUndefined(calendar))) {
            scope.initCalendar();
          }
        });
      }
    };
}]);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! moment */ "./node_modules/moment/moment.js"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/common/directives/clinicaid/ca_field_alpha.js":
/*!***********************************************************!*\
  !*** ./src/common/directives/clinicaid/ca_field_alpha.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common').directive(
	'caFieldAlpha',

	[
		'fieldHelperService',

	function (
		helper
	)
{
	var template_function = function template_function(element, attributes) {
		return helper.resolve_template(attributes, 'src/common/directives/clinicaid/ca_field_alpha');
	};

	return {
		restrict: 'EAC',
		scope: helper.default_scope,
		templateUrl: template_function,
		replace: true,
		link: helper.default_link_function,
		controller: helper.default_controller
	};

}]);


/***/ }),

/***/ "./src/common/directives/clinicaid/ca_field_alphadate.js":
/*!***************************************************************!*\
  !*** ./src/common/directives/clinicaid/ca_field_alphadate.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(moment) {angular.module('Common').directive(
	'caFieldAlphadate',

	[
		'fieldHelperService',

	function (
		helper
	)
{
	var template_function = function template_function(element, attributes) {
		return helper.resolve_template(attributes, 'src/common/directives/clinicaid/ca_field_alphadate');
	};

	var scope = angular.copy(helper.default_scope);
	scope.placeholder = '@caPlaceholder';

	var alphadate_link_function = function alphadate_link_function(
		$scope, element, attribute, controller)
	{
		// use the passed-in placeholder or default to 'yyyy-mm-dd'
		$scope.input_placeholder = $scope.placeholder;
		if(!angular.isDefined($scope.input_placeholder))
		{
			$scope.input_placeholder = 'yyyy-mm-dd';
		}

		$scope.on_blur = function on_blur()
		{
			// parse the input as a date, then format as YYYY-MM-DD (or clear it)
			var momentDate = moment($scope.model, ["YYYY-MM-DD", "YYYYMMDD"], true);
			if(momentDate.isValid())
			{
				$scope.model = momentDate.format("YYYY-MM-DD");
			}
			else
			{
				$scope.model = null;
			}
		};

		// run the default field link function
		helper.default_link_function($scope, element, attribute, controller);
	};

	return {
		restrict: 'EAC',
		scope: scope,
		templateUrl: template_function,
		replace: true,
		link: alphadate_link_function,
		controller: helper.default_controller
	};

}]);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! moment */ "./node_modules/moment/moment.js")))

/***/ }),

/***/ "./src/common/directives/clinicaid/ca_field_autocomplete.js":
/*!******************************************************************!*\
  !*** ./src/common/directives/clinicaid/ca_field_autocomplete.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common').directive(
	'caFieldAutocomplete',

	[
		'$q',
		'globalStateService',
		'$timeout',
		'fieldHelperService',
		'autoCompleteService',
		'resultsService',
		'focusService',

	function($q, global_state, $timeout, helper, autocomplete, results_factory, focus)
{
	var min_length_zero_types = [
		'yes_no_boolean',
		'gender',
		'schedule',
		'schedule_type',
		'schedule_template',
		'schedule_event_status',
		'user_roles',
		'user_type',
		'province',
		'country',
		'custom_tax',
		'alberta_location_code',
		'alberta_default_time_role_modifier',
		'service_modifier',
		'ontario_office_code',
		'ontario_service_location_indicator',
		'bc_service_location_code',
		'bc_referral_code',
		'sask_clinic',
		'sask_oop_province',
		'sask_mode',
		'sask_location_of_service',
		'sask_location_of_service_short',
		'sask_corporation_indicator',
		'sask_submission_type',
		'sask_submission_file',
		'provider' ];

	var scope = angular.copy(helper.default_scope);

	scope.placeholder = '@caPlaceholder';
	scope.input_group_class = '@caInputGroupClass';

	// must be a valid generic_ref type
	scope.autocomplete_type = '@caAutocompleteType';

	// Extra params to pass in the REST call
	scope.params = '=caParams';
	scope.params_fn = '&caParamsFn';

	// the on-select function to call, and if applicable, additional data to pass into it
	scope.on_select_fn = '&caOnSelect';
	scope.on_select_data = '=caOnSelectData';

	// the clear function to call, and if applicable, data to pass into it
	scope.on_clear_fn = '&caClear';
	scope.on_clear_data = '=caClearData';

	// the create function to call
	// create option will only appear if function is provided and create_if is met (if also provided)
	// and there is no selected autocomplete value
	scope.on_create_fn = '&caCreate';
	scope.create_if = '=caCreateIf';

	// the modify function to call
	// modify option will only appear if function is provided and modify_if is met (if also provided)
	// and there is a selected autocomplete value
	scope.on_modify_fn = '&caModify';
	scope.modify_if = '=caModifyIf';
	scope.create_on_not_found = '=?caCreateOnNotFound';
	scope.editable = '=?caEditable';

	// List of records to exclude from the results. EG These items are already linked
	// Must be an array of pojo models
	scope.ca_exclude_list = '=caExcludeList';

	var template_function = function template_function(element, attributes) {
		return helper.resolve_template(attributes, 'code/common/directives/ca_field_autocomplete');
	};

	var autocomplete_link_function = function autocomplete_link_function(
		$scope, element, attribute, controller)
	{
		$scope.autocomplete = autocomplete;
		$scope.search_field = null;

		if(!angular.isDefined($scope.model))
		{
			$scope.model = null;
		}

		if(!Juno.Common.Util.exists($scope.create_on_not_found))
		{
			$scope.create_on_not_found = false;
		}

		if(!Juno.Common.Util.exists($scope.editable))
		{
			$scope.editable = false;
		}

		// ensure autocomplete type is either a listed dao or defined in GenericRef
		if(Object.keys($scope.autocomplete.dao_map).indexOf(
					$scope.autocomplete_type) == -1 &&
				Object.keys(Clinicaid.Model.GenericRef.REF_DEFINITIONS).indexOf(
					$scope.autocomplete_type) == -1)
		{
			console.log("invalid autocomplete type:", $scope.autocomplete_type,
				"valid values: (" ,
					Object.keys($scope.autocomplete.dao_map),
					Object.keys(Clinicaid.Model.GenericRef.REF_DEFINITIONS));
			return;
		}

		// default min-length is 1 except for some types
		$scope.autocomplete_min_length =
			(min_length_zero_types.indexOf($scope.autocomplete_type) != -1) ? 0 : 1;

		// use the passed-in placeholder or default to 'Search...'
		$scope.input_placeholder = $scope.placeholder;
		if(!angular.isDefined($scope.input_placeholder))
		{
			$scope.input_placeholder = 'Search...';
		}

		// clear function:
		// call the passed-in function with the passed-in data
		$scope.clear_autocomplete_search = function clear_autocomplete_search()
		{
			$scope.search_field = null;
		};

		$scope.clear_autocomplete_model = function clear_autocomplete_model(focus_input)
		{
			$scope.model = null;
			if(angular.isFunction($scope.on_clear_fn()))
			{
				$scope.on_clear_fn()($scope.on_clear_data);
			}

			if(focus_input)
			{
				focus.element(element.find('input'));
			}
		};

		// select function:
		// call the passed-in function with the autocomplete and passed-in data
		$scope.on_select = function on_select($item, $model, $label, $event)
		{
			$scope.model = $item;
			$scope.change_fn();
			if(angular.isFunction($scope.on_select_fn()))
			{
				$scope.on_select_fn()($item, $model, $label, $event, $scope.on_select_data);
			}
		};

		$scope.create_on_not_found_fn = function create_on_not_found_fn(temp_model)
		{
			if(Juno.Common.Util.exists(temp_model))
			{
				$scope.autocomplete.create_on_not_found(
						temp_model, $scope.autocomplete_type, true).then(
						function success(results)
						{
							$scope.on_select(results.data, results.data, null, null, $scope.on_select_data);
							if (angular.isFunction($scope.change_fn))
							{
								$scope.change_fn();
							}
						}, function error(errors)
						{
							console.log('error:', errors);
						}
				);
			}
		};

		$scope.on_change = function on_change()
		{
			if(!$scope.editable)
			{
				$scope.clear_autocomplete_model();
				return;
			}

			var temp_model = $scope.autocomplete.build_model_object(
					$scope.autocomplete_type, $scope.search_field);

			$scope.on_select(temp_model, temp_model, null, null, $scope.on_select_data);

			if ($scope.create_on_not_found)
			{
				$scope.create_on_not_found_fn(temp_model);
			}
		};

		// blur function
		$scope.on_blur = function on_blur()
		{
			// this is for the case when the user does a search and then blurs the field:
			// if the value is null, call the clear function (since the select function doesn't fire)
			if($scope.model == null)
			{
				$scope.clear_autocomplete_model();
				$scope.clear_autocomplete_search();

				// only run the change function if the model existed when the autocomplete was last focused
				if(Juno.Common.Util.exists($scope.model_on_focus) &&
					angular.isFunction($scope.change_fn))
				{
					$scope.change_fn();
				}
			}

			// call the passed-in function, if provided
			if (angular.isFunction($scope.blur_fn))
			{
				$scope.blur_fn();
			}
		};

		// on focus
		$scope.on_focus = function on_focus()
		{
			// make a copy of the current model (needed for comparison on_blur)
			$scope.model_on_focus = angular.copy($scope.model);

			// call the passed-in function, if provided
			if(angular.isFunction($scope.focus_fn))
			{
				$scope.focus_fn();
			}
		};

		// create function: call the passed-in function, if provided
		$scope.on_create = null;
		if(angular.isFunction($scope.on_create_fn()))
		{
			$scope.on_create = function on_create()
			{
				$scope.on_create_fn()();
			};
		}

		// modify function: call the passed-in function, if provided
		$scope.on_modify = null;
		if(angular.isFunction($scope.on_modify_fn()))
		{
			$scope.on_modify = function on_modify()
			{
				$scope.on_modify_fn()();
			};
		}
		$scope.show_modify_if = (typeof $scope.modify_if === 'undefined' || $scope.modify_if);

		// autocomplete search: invoke configured function
		$scope.autocomplete_items = function autocomplete_items($viewValue)
		{
			var deferred = $q.defer();
			var params = $scope.params ? $scope.params : {};
			if(angular.isFunction($scope.params_fn))
			{
				// If the params_fn definition has arguments, $scope.params_fn() with return the results.
				// If it doesnt have armuments it returns a reference to the funciton which still needs
				// to be executed to get the results
				var params_check = $scope.params_fn();
				if(angular.isFunction(params_check))
				{
					params_check = params_check();
				}
				angular.extend(params, params_check);
			}

			autocomplete.get_items($scope.autocomplete_type, $viewValue, params).then(
					function success(results)
					{
						var out_items = results.data;
						if(Juno.Common.Util.exists($scope.ca_exclude_list))
						{
							out_items = $scope.prune_items(out_items);
						}
						deferred.resolve(out_items);
					}, function error(errors)
					{
						deferred.reject(errors)
					}
			);
			return deferred.promise;
		};

		$scope.prune_items = function prune_items(items)
		{
			var out_items = [];
			for(var i = 0; i < items.length; i++)
			{
				var in_list = false;
				for(var ii = 0; ii < $scope.ca_exclude_list.length; ii++)
				{
					var exclude_item = $scope.ca_exclude_list[ii];
					if(typeof(exclude_item) == 'string')
					{
						if(items[i].data[items[i].value_field] == exclude_item)
						{
							in_list = true;
						}
					} else
					{
						if(items[i].data[items[i].value_field] ==
								exclude_item.data[$scope.ca_exclude_list[ii].value_field])
						{
							in_list = true;
						}
					}
				}
				if(!in_list)
				{
					out_items.push(items[i]);
				}
			}
			return out_items;
		};

		// autocomplete format: format the selection for display in the box
		$scope.autocomplete_input_formatter = function autocomplete_input_formatter($model)
		{
			return $model != null ? $model.autocomplete_input_formatted : null;
		};

		// show the create button?
		$scope.show_create = function show_create()
		{
			return $scope.on_create && !$scope.model &&
				(typeof $scope.create_if === 'undefined' || $scope.create_if);
		};

		// show the modify button?
		$scope.show_modify = function show_modify()
		{
			return $scope.on_modify && $scope.model && !$scope.model.dummy_record &&
				(typeof $scope.modify_if === 'undefined' || $scope.modify_if);
		};

		// show the buttons?
		$scope.show_buttons = function show_buttons()
		{
			return !$scope.disabled && ($scope.model || $scope.show_create());
		};

		// required for initialization of the search field value:
		// the directive is created before the model is populated
		$scope.$watch('model', function(new_value, old_value)
		{
			$scope.search_field = $scope.model;
		});

		// run the default field link function
		helper.default_link_function($scope, element, attribute, controller);
	};

	return {
		restrict: 'E',
		scope: scope,
		templateUrl: template_function,
		replace: true,
		link: autocomplete_link_function,
		controller: helper.default_controller
	};

}]);


/***/ }),

/***/ "./src/common/directives/clinicaid/ca_field_boolean.js":
/*!*************************************************************!*\
  !*** ./src/common/directives/clinicaid/ca_field_boolean.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common').directive(
	'caFieldBoolean',

	[
		'fieldHelperService',

	function(
		helper
	)
{

	var template_function = function template_function(element, attributes) {
		return helper.resolve_template(attributes, 'src/common/directives/clinicaid/ca_field_boolean');
	};

	var link_function = function link_function(
			$scope, element, attribute, controller)
	{
		if(!Juno.Common.Util.exists($scope.model))
		{
			$scope.model = false;
		}

		// run the default field link function
		helper.default_link_function($scope, element, attribute, controller);
	};

	return {
		restrict: 'EAC',
		scope: helper.default_scope,
		templateUrl: template_function,
		replace: true,
		link: link_function,
		controller: helper.default_controller
	};

}]);


/***/ }),

/***/ "./src/common/directives/clinicaid/ca_field_button_group.js":
/*!******************************************************************!*\
  !*** ./src/common/directives/clinicaid/ca_field_button_group.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common').directive(
		'caFieldButtonGroup',

		[
			'fieldHelperService',

			function(
					helper
			)
			{

				var link_function = function link_function($scope, element, attribute, controller)
				{
					// run the default field link function
					helper.default_link_function($scope, element, attribute, controller);

					$scope.selected_values = [$scope.field_default];

					$scope.is_selected = function is_selected(value)
					{
						return $scope.selected_values.indexOf(value) != -1;
					};

					$scope.toggle_selected = function toggle_selected(value)
					{
						var value_index = $scope.selected_values.indexOf(value);
						if(value_index == -1)
						{
							$scope.selected_values.push(value);
						}
						else
						{
							$scope.selected_values.splice(value_index, 1);
						}
						$scope.model = $scope.selected_values.join(",");
					};
				};

				var scope = angular.copy(helper.default_scope);
				scope.field_settings = '=caFieldSettings';
				scope.field_default = '=caFieldDefault';

				return {
					restrict: 'EAC',
					scope: scope,
					templateUrl: 'src/common/directives/clinicaid/ca_field_button_group.jsp',
					replace: true,
					link: link_function,
					controller: helper.default_controller
				};

			}]);


/***/ }),

/***/ "./src/common/directives/clinicaid/ca_field_color.js":
/*!***********************************************************!*\
  !*** ./src/common/directives/clinicaid/ca_field_color.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common').directive(
	'caFieldColor', 

	[
		'fieldHelperService', 

	function(
		helper
	)
{
    return {
		restrict: 'EAC',
		scope: helper.default_scope,
		templateUrl: 'src/common/directives/clinicaid/ca_field_color.jsp',
		replace: true,
		link: helper.default_link_function,
		controller: helper.default_controller, 
	};
}]);


/***/ }),

/***/ "./src/common/directives/clinicaid/ca_field_currency.js":
/*!**************************************************************!*\
  !*** ./src/common/directives/clinicaid/ca_field_currency.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common').directive(
	'caFieldCurrency', 

	[
		'fieldHelperService', 

	function(
		helper
	)
{
	
	return {
		restrict: 'EAC',
		scope: helper.default_scope,
		templateUrl: 'src/common/directives/clinicaid/ca_field_currency.jsp',
		replace: true,
		link: helper.default_link_function,
		controller: helper.default_controller 
	};
	
}]);


/***/ }),

/***/ "./src/common/directives/clinicaid/ca_field_currency_filter.js":
/*!*********************************************************************!*\
  !*** ./src/common/directives/clinicaid/ca_field_currency_filter.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common').directive(
	'caFieldCurrencyFilter',
	[
		'$filter',
		function ($filter)
		{
			var link_function = function link_function(scope, element, attribute, ngModelController)
			{
				ngModelController.$parsers.push(
					function fromUser(text)
					{
						if (text == null)
						{
							text = "0";
						}

						var tempValue = text.replace(/[$,]/g, '');
						if (tempValue.trim() == "")
						{
							tempValue = "0";
						}
						var newValue = parseFloat(tempValue).toFixed(4);
						if (isNaN(newValue))
						{
							newValue = null;
						}
						return newValue;
					});

				ngModelController.$formatters.unshift(
					function toUser(text)
					{
						if (text == null)
						{
							return null;
						}

						var currencyFilter = $filter('myCurrencyFilter');
						var newValue = currencyFilter(text);

						return newValue;
					});
			};

			return {
				require: 'ngModel',
				restrict: 'EAC',
				link: link_function
			};

		}
	]
);


/***/ }),

/***/ "./src/common/directives/clinicaid/ca_field_date.js":
/*!**********************************************************!*\
  !*** ./src/common/directives/clinicaid/ca_field_date.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) { angular.module('Common').directive(
 'caFieldDate',

 [
	 '$compile',
	 '$timeout',
	 'fieldHelperService',

	 function(
		 $compile,
		 $timeout,
		 helper
	 )
 {
	 var scope = angular.copy(helper.default_scope);

	 scope.date_picker_id = '@caDatePickerId';
	 scope.orientation = '@caOrientation';
	 scope.use_multi_date = '@caUseMultiDate';
	 scope.container_id = '@caContainerId';

	 var template_function = function template_function(element, attributes) {
		 if(attributes['caTemplate'] == 'bare')
		 {
			 return 'src/common/directives/clinicaid/ca_field_date_bare.jsp';
		 }
		 return 'src/common/directives/clinicaid/ca_field_date.jsp';
	 };

	 var link_function = function link_function($scope, element, attribute, controller)
	 {
		 // Creating the datepicker changes the value of the ng-model and fires the
		 // ng-change event. This disables the event until the field initialization is complete
		 $scope.initialization_complete = false;
		 $scope.delayed_change_fn = function()
		 {
			 if($scope.initialization_complete === true)
			 {
				 $scope.change_fn();
			 }
		 };

		 helper.merge_title_messages($scope);

		 $scope.datepicker = null;
		 $scope.is_multi_date = false;
		 $scope.CTRL_KEY = 17;
		 $scope.LEFT_SHIFT_KEY = 16;
		 $scope.ctrl_key_down = false;
		 $scope.shift_key_down = false;
		 $scope.is_visible = false;

		 // Default container for datepicker is "body", but can be overridden
		 $scope.container = $("body");
		 if(!$scope.container_id)
		 {
			 $scope.container = $("#" + $scope.container_id);
		 }

		 var buttons_html_with_picker = "<tfoot><tr>" +
				 "<th style='display: table-cell;' ng-class=\"{active: is_multi_date}\" ng-click='toggle_multi()' colspan='2' class='multi'>Multi</th>" +
				 //"<th style='display: table-cell;' colspan='3' class='today'>Today</th>" +
				 "<th style='display: table-cell;' ng-click='close_date_picker()' colspan='3' class='multi'>Close</th>" +
					 //	"class='close'>Close</th></tr></tfoot>";
				 "<th style='display: table-cell;' colspan='2' class='clear'>Clear</th></tr>";

		 var buttons_html = "<tfoot><tr>" +
				 "<th style='display: table-cell;' colspan='4' class='today'>Today</th>" +
				 "<th style='display: table-cell;' colspan='3' class='clear'>Clear</th></tr>";
				 //"<tr class='close'><th style='display: table-cell;' ng-click='close_date_picker()' colspan='7' " +
		 			//	"class='close'>Close</th></tr></tfoot>";

		 $scope.create_datepicker = function create_datepicker()
		 {
			 // Build datepicker. By default put it in the <body> tag so that it is
			 // placed correctly and is always on top. They container can be overridden
			 // though.
			 if($scope.container_id == null)
			 {
				 $scope.datepicker.datepicker({
					 multidate: $scope.is_multi_date,
					 autoclose: !$scope.is_multi_date,
					 todayHighlight: true,
					 todayBtn: 'linked',
					 clearBtn: true,
					 toggleActive: $scope.is_multi_date,
					 orientation: $scope.orientation,
					 format: 'yyyy-mm-dd',
					 showOnFocus: false,
					 keyboardNavigation: false
				 });
			 }
			 else
			 {
				 $scope.datepicker.datepicker({
					 multidate: $scope.is_multi_date,
					 autoclose: !$scope.is_multi_date,
					 todayHighlight: true,
					 todayBtn: 'linked',
					 clearBtn: true,
					 toggleActive: $scope.is_multi_date,
					 orientation: $scope.orientation,
					 format: 'yyyy-mm-dd',
					 container: '#' + $scope.container_id,
					 showOnFocus: false,
					 keyboardNavigation: false
				 });

			 }

			 $scope.datepicker.datepicker().on('show', function ()
			 {
				 $scope.is_visible = true;
			 });

			 $scope.datepicker.datepicker().on('hide', function ()
			 {
				 $scope.is_visible = false;
			 });
		 };

		 $scope.toggle_multi = function toggle_multi(force_true, input_string)
		 {
			 if($scope.use_multi_date == 'true')
			 {
				 $scope.is_multi_date = force_true || !$scope.is_multi_date;
				 $scope.datepicker.datepicker('remove');
				 $scope.create_datepicker();
				 $scope.datepicker.datepicker('show');

				 // Datepicker forces valid dates on the input box when the datepicker opens. This breaks
				 // manual entry when you istart to enter a second date and auto switch to multi date mode.
				 // We put the date string back in after the parse occurs, to account for this
				 if(input_string && input_string.length > 0)
				 {
					 element.find("input").val(input_string);
				 }
			 }
		 };

		 // We assume the client is done picking multiple dates when they release control
		 // Close the datepicker
		 $scope.key_up = function key_up(event)
		 {
			 if ($scope.use_multi_date == 'true')
			 {
				 // Switch to multi-date if a date seperator (comma) is entered
				 if (!$scope.is_multi_date)
				 {
					 var input_value = element.find("input").val();
					 if (input_value.search(",") != -1)
					 {
						 $scope.toggle_multi(true, input_value);
					 }
				 }

				 if (event.keyCode == $scope.CTRL_KEY)
				 {
					 $scope.close_date_picker(event);
					 $scope.ctrl_key_down = false;
				 }
				 else if (event.keyCode == $scope.LEFT_SHIFT_KEY)
				 {
					 $scope.close_date_picker(event);
					 $scope.shift_key_down = false;
				 }
			 }
		 };

		 // Switch to multi-date mode when control or shift is pressed
		 $scope.key_down = function key_down(event)
		 {
			 if ($scope.use_multi_date == 'true')
			 {
				 // Switch to multi-date when ctrl is pressed. For selecting arbitrary dates
				 if ($scope.ctrl_key_down)
				 {
					 return;
				 }

				 if (event.keyCode == $scope.CTRL_KEY)
				 {
					 $scope.ctrl_key_down = true;
					 $scope.toggle_multi(true);
				 }
				 // Switch to multi-date when shift. For selecting date ranges. NOT IMPLEMENTED
				 else if (event.keyCode == $scope.LEFT_SHIFT_KEY)
				 {
					 $scope.shift_key_down = true;
					 $scope.toggle_multi(true);
				 }
			 }
		 };

		 $scope.on_focus = function on_focus(event)
		 {
			 // Prevent toggling datepicker on click and on focus
			 if(!$scope.is_visible)
			 {
				 $scope.open_date_picker(event);
			 }

			 $scope.focus_fn();
		 };

		 $scope.on_click = function on_click(event)
		 {
			 // Toggle datepicker open/closed
			 if(!$scope.is_visible)
			 {
				 $scope.open_date_picker(event);
			 }
		 };

		 $scope.open_date_picker = function open_date_picker(event)
		 {
			 var dates = element.find("input").val().split(',');
			 var new_is_multi_date = false;

			 // Use whatever dates are in the input box when opening datepicker
			 if(dates && dates.length > 1)
			 {
				 new_is_multi_date = true;
			 }

			 $scope.datepicker.datepicker('setDates', dates);

			 // Switch between multi date and single date picker depending on number of dates in
			 // input box
			 if($scope.use_multi_date == 'true' && new_is_multi_date != $scope.is_multi_date)
			 {
				 $scope.toggle_multi();
			 }
			 else
			 {
				 $scope.datepicker.datepicker('show');
			 }
		 };

		 $scope.close_date_picker = function close_date_picker(event)
		 {
			 $scope.datepicker.datepicker('hide');
		 };

		 // wrap focus function the same way as the field_helper
		 $scope.focus_fn = function on_focus()
		 {
			 if(angular.isFunction($scope.on_focus_fn))
			 {
				 // only call the focus function if the field still has focus after a timeout
				 $timeout(function() {
					 if($(element).find(" input:enabled, select:enabled, textarea:enabled ").is(':focus'))
					 {
						 $scope.on_focus_fn();
					 }
					 else
					 {
						 console.log('ignoring on focus function - element is no longer in focus', $scope.name)
					 }
				 });
			 }
		 };

		 $scope.$watch('focus_field', function()
		 {
			 if($scope.focus_field == $scope.name)
			 {
				 var input_box = element.find("input");
				 // Focus and select the input element
				 $timeout(function()
				 {
					 if(!input_box.is(':focus'))
					 {
						 input_box.focus();
					 }
					 input_box.select();
				 });
			 }
		 });

		 // Initial Datepicker setup
		 $timeout( function() {
			 var date_picker_id = attribute.caDatePickerId;
			 if(!date_picker_id)
			 {
				 date_picker_id = 'ca-date-picker';
			 }
			 $scope.datepicker = $('#' + date_picker_id).find('input');
			 $scope.create_datepicker();

			 $scope.datepicker.on('show', function(e) {

				 // Show multi button only if this is a multi-date picker
				 var dropdown = $(".datepicker.datepicker-dropdown");
				 var footer = dropdown.find('tfoot');
				 if($scope.use_multi_date == 'true')
				 {
					 footer.replaceWith(buttons_html_with_picker);
				 }
				 else
				 {
					 footer.replaceWith(buttons_html);
				 }
				 footer = dropdown.find('tfoot');
				 $compile(footer.contents())($scope);
				 $scope.initialization_complete = true;
			 })
		 });
	 };

	 return {
		 restrict: 'EA',
		 scope: scope,
		 replace: true,
		 templateUrl: template_function,
		 link: link_function,
		 controller: helper.default_controller
	 };

 }]);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/common/directives/clinicaid/ca_field_date3.js":
/*!***********************************************************!*\
  !*** ./src/common/directives/clinicaid/ca_field_date3.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {angular.module('Common').directive(
	'caFieldDate3',

	[
		'$timeout',
		'fieldHelperService',

	function(
		$timeout, helper
	)
{
	var default_scope = angular.copy(helper.default_scope);

	delete default_scope.focus_fn;
	default_scope.on_focus_fn_year = '&caFocusYear';
	default_scope.on_focus_fn_month = '&caFocusMonth';
	default_scope.on_focus_fn_day = '&caFocusDay';

	var get_date = function get_date(new_value, old_value, $scope)
	{
		$scope.field_year = '';
		$scope.field_month = '';
		$scope.field_day = '';

		if(!new_value)
		{
			return;
		}

		var date_part_array = new_value.split('-');

		if(angular.isDefined(date_part_array[0]))
		{
			$scope.field_year = date_part_array[0];
		}

		if(angular.isDefined(date_part_array[1]))
		{
			$scope.field_month = date_part_array[1];
		}

		if(angular.isDefined(date_part_array[2]))
		{
			$scope.field_day = date_part_array[2];
		}
	};

	var put_date = function put_date(new_value, old_value, $scope)
	{
		if(!$scope.field_year && !$scope.field_month && !$scope.field_day)
		{
			$scope.model = null;
		}
		else
		{
			$scope.model = $scope.field_year + '-' +
				$scope.field_month + '-' +
				$scope.field_day;
		}
	};

	var template_function = function template_function(element, attributes) {
		return helper.resolve_template(attributes, 'src/common/directives/clinicaid/ca_field_date3');
	};

	var link_function = function link_function($scope, element, attribute, controller)
	{
		// Don't call the helper default link function, we want to do it differently
		// We do still need to merge the title messages though
		helper.merge_title_messages($scope);

		$scope.field_year = '';
		$scope.field_month = '';
		$scope.field_day = '';

		// wrap each of the focus functions the same way as the field_helper

		$scope.focus_fn_year = function focus_fn_year()
		{
			if(angular.isFunction($scope.on_focus_fn_year))
			{
				// only call the focus function if the field still has focus after a timeout
				$timeout(function() {
					if($(element).find(" input:enabled, select:enabled, textarea:enabled ").is(':focus'))
					{
						$scope.on_focus_fn_year();
					}
					else
					{
						console.log('ignoring on focus function - element is no longer in focus', $scope.name)
					}
				});
			}
		};

		$scope.focus_fn_month = function focus_fn_month()
		{
			if(angular.isFunction($scope.on_focus_fn_month))
			{
				// only call the focus function if the field still has focus after a timeout
				$timeout(function() {
					if($(element).find(" input:enabled, select:enabled, textarea:enabled ").is(':focus'))
					{
						$scope.on_focus_fn_month();
					}
					else
					{
						console.log('ignoring on focus function - element is no longer in focus', $scope.name)
					}
				});
			}
		};

		$scope.focus_fn_day = function focus_fn_day()
		{
			if(angular.isFunction($scope.on_focus_fn_day))
			{
				// only call the focus function if the field still has focus after a timeout
				$timeout(function() {
					if($(element).find(" input:enabled, select:enabled, textarea:enabled ").is(':focus'))
					{
						$scope.on_focus_fn_day();
					}
					else
					{
						console.log('ignoring on focus function - element is no longer in focus', $scope.name)
					}
				});
			}
		};

		$scope.$watch('focus_field',
			function update_focus(new_value, old_value, $scope)
		{
			if($scope.focus_field == $scope.name + "[year]")
			{
				// Focus the input element
				$(element).find(".ca-field-date3 input").get(0).focus().select();
			}
			else if($scope.focus_field == $scope.name + "[month]")
			{
				// Focus the input element
				$(element).find(".ca-field-date3 input").get(1).focus().select();
			}
			else if($scope.focus_field == $scope.name + "[day]")
			{
				// Focus the input element
				$(element).find(".ca-field-date3 input").get(2).focus().select();
			}
		});

		// listen for focusCaFocusField event: when it matches, focus the element
		$scope.$on('focusCaFocusField', function(e, focus)
		{
			if(Juno.Common.Util.exists($scope.name) && $scope.name == focus)
			{
				$(element).find(".ca-field-date3 input").get(0).focus().select();
			}
		});

		$scope.$watch('model', get_date);

		$scope.$watch('field_year', put_date);
		$scope.$watch('field_month', put_date);
		$scope.$watch('field_day', put_date);
	};

	return {
		restrict: 'E',
		scope: default_scope,
		templateUrl: template_function,
		replace: true,
		link: link_function,
		controller: helper.default_controller
	};

}]);


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/common/directives/clinicaid/ca_field_number.js":
/*!************************************************************!*\
  !*** ./src/common/directives/clinicaid/ca_field_number.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common').directive(
	'caFieldNumber',

	[
		'fieldHelperService',

	function(
		helper
	)
{
	var scope = angular.copy(helper.default_scope);
	scope.pad_length = '@caPadLength';

	var link_function = function link_function($scope, element, attribute, controller)
	{
		if(!$scope.pad_length)
		{
			$scope.pad_length = 0;
		}

		// run the default field link function
		helper.default_link_function($scope, element, attribute, controller);
	};

	return {
		restrict: 'EAC',
		scope: scope,
		templateUrl: 'src/common/directives/clinicaid/ca_field_number.jsp',
		replace: true,
		link: link_function,
		controller: helper.default_controller
	};

}]);


/***/ }),

/***/ "./src/common/directives/clinicaid/ca_field_select.js":
/*!************************************************************!*\
  !*** ./src/common/directives/clinicaid/ca_field_select.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common').directive(
	'caFieldSelect',

	[
		'fieldHelperService',

	function(
		helper
	)
{
	var scope = angular.copy(helper.default_scope);

	scope.options = '=caOptions';
	scope.include_empty_option = '@caEmptyOption';

	var template_function = function template_function(element, attributes) {
		return helper.resolve_template(attributes, 'src/common/directives/clinicaid/ca_field_select');
	};

  return {
		restrict: 'EAC',
		scope: scope,
		templateUrl: template_function,
		replace: true,
		link: helper.default_link_function,
		controller: helper.default_controller
	};
}]);


/***/ }),

/***/ "./src/common/directives/clinicaid/ca_field_text.js":
/*!**********************************************************!*\
  !*** ./src/common/directives/clinicaid/ca_field_text.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common').directive(
	'caFieldText',

	[
		'fieldHelperService',

	function(
		helper
	)
{
	var scope = angular.copy(helper.default_scope);

	scope.rows = '@caRows';
	scope.max_characters = '@caMaxCharacters';

	var template_function = function template_function(element, attributes) {
		return helper.resolve_template(attributes, 'src/common/directives/clinicaid/ca_field_text');
	};

	var link_function = function link_function($scope, element, attribute, controller)
	{
		if(!$scope.model)
		{
			$scope.model = '';
		}

		$scope.$watch('model', function(new_value, old_value)
		{
			if(Juno.Common.Util.exists($scope.model) && $scope.model.length > $scope.max_characters)
			{
				$scope.error_message = "Character limit exceeded. Max allowed: " + $scope.max_characters;
			}
		});

		helper.default_link_function($scope, element, attribute, controller);
	};

	return {
		restrict: 'EAC',
		scope: scope,
		templateUrl: template_function,
		replace: true,
		link: link_function,
		controller: helper.default_controller
	};

}]);



/***/ }),

/***/ "./src/common/directives/clinicaid/ca_field_time.js":
/*!**********************************************************!*\
  !*** ./src/common/directives/clinicaid/ca_field_time.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {angular.module('Common').directive(
	'caFieldTime',

	[
		'fieldHelperService',
		'$timeout',

	function (
		helper,
		$timeout)
{

	var scope = angular.copy(helper.default_scope);

	scope.minute_step = '=caMinuteStep';

	/* These are all available for the timepicker, but are not wired up yet
	 scope.input_size = '@caInputSize';
	 scope.template = '@caTemplate';
	 scope.max_hours = '@caMaxHours';
	 scope.snap_to_step = '@caSnapToStep';
	 scope.show_seconds = '@caShowSeconds';
	 scope.default_time = '@caDefaultTime';
	 scope.show_meridian = '@caShowMeridian';
	 scope.show_inputs = '@caShowInputs';
	 scope.disable_focus = '@caDisableFocus';
	 scope.disable_mousewheel = '@caDisableMousewheel';
	 scope.disable_unit_hightlight = '@disableUnitHightlight';
	 scope.modal_backdrop = '@caModalBackdrop';
	 scope.append_widget_to = '@caAppendWidgetTo';
	 scope.explicit_mode = '@caExplicitMode';
	 scope.icons = '@caIcons';
	*/

	var template_function = function template_function(element, attributes) {
		return helper.resolve_template(attributes, 'src/common/directives/clinicaid/ca_field_time');
	};

	var link_function = function link_function($scope, element, attribute, controller)
	{
		$scope.picker_container = null;
		$scope.toggle_widget = function toggle_widget()
		{
			$scope.picker_container.timepicker('showWidget');
		};

		$timeout(function()
		{
			$scope.picker_container = $('#input-' + $scope.name);
			$scope.picker_container.timepicker(
				{
					defaultTime: false,
					minuteStep: $scope.minute_step,
					//disableFocus: true,
					//showInputs: false,
					icons: {
						up: "fa fa-chevron-up",
						down: "fa fa-chevron-down"
					}
				}
			);
		});

		// run the default field link function
		helper.default_link_function($scope, element, attribute, controller);

	};

	return {
		restrict: 'EAC',
		scope: scope,
		templateUrl: template_function,
		replace: true,
		link: link_function,
		controller: helper.default_controller
	};

}]);


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/common/directives/clinicaid/ca_field_toggle.js":
/*!************************************************************!*\
  !*** ./src/common/directives/clinicaid/ca_field_toggle.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common').directive(
		'caFieldToggle',

		[
			'fieldHelperService',

			function(
					helper
			)
			{

				var template_function = function template_function(element, attributes) {
					return helper.resolve_template(attributes, 'src/common/directives/clinicaid/ca_field_toggle');
				};

				var link_function = function link_function($scope, element, attribute, controller)
				{
					// run the default field link function
					helper.default_link_function($scope, element, attribute, controller);
				};

				var scope = angular.copy(helper.default_scope);
				scope.true_text = '@caTrueText';
				scope.false_text = '@caFalseText';
				scope.true_value = '@caTrueValue';
				scope.false_value = '@caFalseValue';

				return {
					restrict: 'EAC',
					scope: scope,
					templateUrl: template_function,
					replace: true,
					link: link_function,
					controller: helper.default_controller
				};

			}]);


/***/ }),

/***/ "./src/common/directives/clinicaid/ca_focus_field.js":
/*!***********************************************************!*\
  !*** ./src/common/directives/clinicaid/ca_focus_field.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {


angular.module('Common').directive(
	'caFocusField',
	[
		function()
{

	var link_function = function($scope, element, attr, field_controllers)
	{
		var field = attr[ 'caName' ];

		// Forget the whole thing if there is already a controller that tells us to
		var ignore = false;
		for(var i = 0; i < field_controllers.length; i++)
		{
			if (field_controllers[ i ] &&
				field_controllers[ i ].ignore_focus_field())
			{
				ignore = true;
				break;
			}
		}

		if(angular.isDefined($scope.form_nav) && !ignore)
		{
			var focus_field = attr['caFocusField'];

			// watch the focus field: when it matches, focus the element
			$scope.$watch(focus_field, function()
			{
				if(Juno.Common.Util.exists(field) && field == $scope.form_nav.focus_field)
				{
					element[0].focus().select();
				}
			});

			// listen for focusCaFocusField event: when it matches, focus the element
			$scope.$on('focusCaFocusField', function(e, focus)
			{
				if(Juno.Common.Util.exists(field) && field == focus)
				{
					element[0].focus().select();
				}
			});
		}
	};

	return {
		restrict: 'A',
		replace: false,
		priority: 100,
		require: [
			'?^caFieldAlpha',
			'?^caFieldAlphadate',
			'?^caFieldAutocomplete',
			'?^caFieldBoolean',
			'?^caFieldColor',
			'?^caFieldCurrency',
			'?^caFieldDate',
			'?^caFieldDate3',
			'?^caFieldNumber',
			'?^caFieldSelect',
			'?^caFieldText',
			'?^caFieldTime'
		],
		link: link_function
	};

}]);



/***/ }),

/***/ "./src/common/directives/clinicaid/ca_info_messages.js":
/*!*************************************************************!*\
  !*** ./src/common/directives/clinicaid/ca_info_messages.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common').directive(
	'caInfoMessages',

	[ function()
{

	var scope = {
		saving: '=?caSavingFlag',
		errors: '=caErrorsObject',
		field_value_map: '=?caFieldValueMap',
		success_message: '@caSuccessMessage',
		field_value_map_label_key: '@caFieldValueMapLabelKey',
		displayFieldErrors: '=?caDisplayFieldErrors',
		prepend_name_to_field_errors: '=?caPrependNameToFieldErrors',
		error_link_functions: '=?caErrorLinkFunctions'
	};

	var link_function = function link_function($scope, element, attribute, controller)
	{
		if(!Juno.Common.Util.exists($scope.displayFieldErrors) ||
			$scope.displayFieldErrors !== false)
		{
			$scope.displayFieldErrors = true;
		}

		if(!Juno.Common.Util.exists($scope.prepend_name_to_field_errors) ||
			$scope.prepend_name_to_field_errors !== false)
		{
			$scope.prepend_name_to_field_errors = true;
		}

		// get a field label given a key
		$scope.get_label = function get_label(key)
		{
			var label = key;
			if(Juno.Common.Util.exists($scope.field_value_map) && $scope.field_value_map.hasOwnProperty(key))
			{
				if(Juno.Common.Util.exists($scope.field_value_map_label_key))
				{
					label = $scope.field_value_map[key][$scope.field_value_map_label_key];
				}
				else
				{
					label = $scope.field_value_map[key];
				}
			}
			return label;
		};

		// Ensure the item is an array of elements
		$scope.force_array = function force_array(item)
		{
			if(!angular.isArray(item))
			{
				return [item];
			}
			return item;
		};

		$scope.has_sub_errors = function has_sub_errors(errors)
		{
			return !angular.isString(errors) && angular.isObject(errors);
		};

		$scope.error_link_has_function = function error_link_has_function(index)
		{
			var error_link = $scope.errors.error_links()[index];

			// error link must have a js function in its data
			// and the function is implemented in error_link_functions
			return $scope.error_link_functions &&
				error_link['js_fn'] &&
				angular.isFunction($scope.error_link_functions[error_link['js_fn']]);
		};

		// execute the ng-click action on error links
		$scope.execute_error_link_fn = function execute_error_link_fn(index)
		{
			var error_link = $scope.errors.error_links()[index];

			// shouldn't be called unless the error link function is
			if(!$scope.error_link_has_function(index))
			{
				console.log("error link does not have a function!", error_link);
				return;
			}

			// basic implementation: always pass the 'uuid' field in as a parameter
			// (may require other options in the future)
			$scope.error_link_functions[error_link['js_fn']](error_link['uuid']);
		};

		$scope.should_display_field_errors = function should_display_field_errors()
		{
			return Juno.Common.Util.exists($scope.errors) &&
				$scope.errors.has_field_errors() &&
				$scope.displayFieldErrors &&
				$scope.errors.displayFieldErrors;
		};
	};

	return {
		restrict: 'E',
		scope: scope,
		templateUrl: 'src/common/directives/clinicaid/ca_info_messages.jsp',
		link: link_function
	};

}]);



/***/ }),

/***/ "./src/common/directives/clinicaid/ca_key_bind_scope.js":
/*!**************************************************************!*\
  !*** ./src/common/directives/clinicaid/ca_key_bind_scope.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {angular.module('Common').directive(
		'caKeyBindScope',[

			'$rootScope',

			function($rootScope)
			{

				var scope = {
					identifier: '@caIdentifier',
					key_combo: '@caKeyCombo',
					callback_fn: '=caCallbackFn',
					key_bind_settings: '=caKeyBindSettings',
				};

				var build_hierarchy = function build_hierarchy(element)
				{
					var parents = element.parents("ca-key-bind-scope");

					var hierarchy = [];
					$.each( parents, function( index, value )
					{
						try
						{
							hierarchy.unshift(value.attributes['ca-identifier'].nodeValue);
						} catch(error)
						{
							console.log("This ca-key-bind-scope element has an invalid parent: ");
							console.log(element);
						}
					});
					return hierarchy
				};

				var link_function = function link_function($scope, element, attribute, controller)
				{
					// identifier is required
					if($scope.identifier == null)
					{
						console.log("The following ca_key_bind_scope element is missing the required " +
								"ca-identifier attribute");
						console.log(element);
						return;
					}

					var hierarchy = build_hierarchy(element);

					if($scope.key_bind_settings != null)
					{
						for (var key_combo in $scope.key_bind_settings)
						{
							$rootScope.ca_key_binding.bind_key_element(
									$scope, element, $scope.identifier, angular.copy(hierarchy),
									key_combo,
									$scope.key_bind_settings[key_combo]);
						}
					}
					else
					{
						console.log("No key bind settings set for ca-key-bind-scope directive (" +
								$scope.identifier + ")");
					}
				};

				return {
					scope: scope,
					restrict: 'EA',
					link: link_function
				}
			}]
);


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/common/directives/clinicaid/ca_pagination.js":
/*!**********************************************************!*\
  !*** ./src/common/directives/clinicaid/ca_pagination.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common').directive(
	'caPagination',

	[ '$timeout',

	function($timeout)
{

	var scope = {
		pagination: '=caModel',
		change_page_callback: '=caChangePage'
	};

	var link_function = function link_function($scope, element, attribute, controller)
	{
		$scope.mode = 'pages';

		$scope.change_page = function change_page(page_number)
		{
			if(Juno.Common.Util.exists(page_number) &&
				page_number != $scope.pagination.current_page &&
				page_number > 0 &&
				page_number <= $scope.pagination.total_pages)
			{
				$scope.change_page_callback(page_number);
			}
		};

		$scope.expand_ellipsis = function expand_ellipsis()
		{
			$scope.go_to_page_num = $scope.pagination.current_page;
			$scope.mode = 'goto';
			$timeout(function()
			{
				element.find("input").focus().select();
			});
		};

		$scope.close_ellipsis = function close_ellipsis()
		{
			$scope.mode = 'pages';
		};

		$scope.go_to_page = function go_to_page()
		{
			if(Juno.Common.Util.isIntegerString($scope.go_to_page_num))
			{
				var page_int = parseInt($scope.go_to_page_num);
				if(page_int <= 0)
				{
					page_int = 1;
				}
				else if (page_int > $scope.pagination.total_pages)
				{
					page_int = $scope.pagination.total_pages;
				}
				$scope.change_page(page_int);

				$scope.close_ellipsis();
			}
		}
	};

	return {
		restrict: 'E',
		scope: scope,
		templateUrl: 'src/common/directives/clinicaid/ca_pagination.jsp',
		replace: true,
		link: link_function
	};

}]);



/***/ }),

/***/ "./src/common/directives/clinicaid/ca_quill.js":
/*!*****************************************************!*\
  !*** ./src/common/directives/clinicaid/ca_quill.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common').directive('caQuill',
	[

			'$timeout',

	function($timeout)
{
		var link_function = function link_function(scope, element, attrs, ngModel)
		{

			var updateModel = function updateModel(value) {
					scope.$apply(function () {
						ngModel.$setViewValue(value);
					});
				},
				options = {
					modules: {
						'toolbar': { container: '.wysiwyg-toolbar' },
						'image-tooltip': true,
						'link-tooltip': true
					},
					theme: 'snow'
				},
				extraOptions = attrs.quill ?
														scope.$eval(attrs.quill) : {},
				editor;

			angular.extend(options, extraOptions);

			$timeout(function () {

				editor = new Quill(element.children()[1], options);

				ngModel.$render();

				editor.on('text-change', function(delta, source) {
					updateModel(this.getHTML());
				});

				/*
				editor.once('selection-change', function(hasFocus) {
					$(editor).toggleClass('focus', hasFocus);
					// Hack for inability to scroll on mobile
					if (/mobile/i.test(navigator.userAgent)) {
						$(editor).css('height', quill.root.scrollHeight + 30)   // 30 for padding
					}
				});
				*/

			});


			ngModel.$render = function () {
				if (angular.isDefined(editor)) {
					$timeout(function() {
						editor.setHTML(ngModel.$viewValue || '');
					});
				}

			};

		};
	return {
		restrict: 'A',
		require: "ngModel",
		replace: true,
		templateUrl: 'src/common/directives/clinicaid/ca_quill.jsp',
		link: link_function
	}
}]);



/***/ }),

/***/ "./src/common/directives/clinicaid/ca_sticky_search_results_footer.js":
/*!****************************************************************************!*\
  !*** ./src/common/directives/clinicaid/ca_sticky_search_results_footer.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {angular.module('Common').directive(
	'caStickySearchResultsFooter',

	[ '$document', '$timeout',

	function($document, $timeout)
{
	var scope = {
		eventName: '@caEventName'
	};

	var link_function = function link_function($scope, element, attribute, controller)
	{
		var searchResultsRecordsElement =
			angular.element(element[0].querySelector('.search-results-records'));

		var scrollbarWrapperElement = angular.element(element[0].querySelector('.search-results-scrollbar'));
		var scrollbarElement = angular.element(scrollbarWrapperElement[0].querySelector('.scrollbar'));

		var tableWrapperElement = angular.element(element[0].querySelector('.stickied-table-wrapper'));
		var tableElement = angular.element(tableWrapperElement[0].querySelector('table'));

		var footerElement = angular.element(element[0].querySelector('.search-results-footer'));
		var searchResultsElement = angular.element(element[0].querySelector('.search-results-records'));

		var contentWrapperElement = angular.element($document.find('#center-panel-wrapper'));
		var layoutSidebarElement = angular.element($document.find('#layout-sidebar'));

		// connect the dummy scrollbar in the footer with the table scrollbar
		scrollbarWrapperElement.scroll(function()
		{
			tableWrapperElement.scrollLeft(scrollbarWrapperElement.scrollLeft());
		});
		tableWrapperElement.scroll(function()
		{
			scrollbarWrapperElement.scrollLeft(tableWrapperElement.scrollLeft());
		});

		// resize and position the footer when the specified event is fired
		$scope.$on($scope.eventName, function()
		{
			$timeout($scope.update_search_results_footer);
		});

		$scope.update_search_results_footer = function update_search_results_footer()
		{
			// for a fixed footer, main content must be longer than the sidebar,
			// and the search results must extend beyond the bottom of the screen
			var fixedFooter = (contentWrapperElement.height() >= layoutSidebarElement.height()) &&
				searchResultsElement.offset().top + searchResultsElement.height() > $(window).height();

			if(fixedFooter)
			{
				// fixed footer at bottom of screen, with scrollbar
				footerElement.addClass('fixed').removeClass('static');

				footerElement.css('width', searchResultsRecordsElement.width());

				scrollbarWrapperElement.width(tableWrapperElement.width());
				scrollbarElement.width(tableElement.width());

				if(scrollbarWrapperElement.width() < scrollbarElement.width())
				{
					tableWrapperElement.css('padding-bottom', footerElement.height() - 15);
				}
				else
				{
					tableWrapperElement.css('padding-bottom', footerElement.height());
				}
			}
			else
			{
				// static footer below search results
				footerElement.addClass('static').removeClass('fixed');
				footerElement.css('width', 'initial');
				tableWrapperElement.css('padding-bottom', 0);
			}
		};
	};

	return {
		restrict: 'A',
		scope: scope,
		link: link_function
	};

}]);


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/common/directives/clinicaid/ca_zero_pad.js":
/*!********************************************************!*\
  !*** ./src/common/directives/clinicaid/ca_zero_pad.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common').directive(
	'zeroPad', 

	[
		'$filter',

	function(
		$filter
	)
{
    return {
		restrict: 'A',
		link: function (scope, element, attrs, ctrl) {
			ctrl.$formatters.unshift(function (data) {
				return $filter('numberFixedLength')(data, 4);
			});

			ctrl.$parsers.unshift(function (data) {
				return $filter('numberFixedLength')(data, 4);
			});            
		},
	};
}]);


/***/ }),

/***/ "./src/common/directives/clinicaid/compile_html.js":
/*!*********************************************************!*\
  !*** ./src/common/directives/clinicaid/compile_html.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common').directive(
	'compileHtml',
	[ '$compile',
	function($compile)
	{
		// this directive is like ng-bind-html but it will angular-compile the content
		return function(scope, element, attrs)
		{
			scope.$watch(
				function(scope)
				{
					return scope.$eval(attrs.compileHtml);
				},
				function(value)
				{
					element.jsp(value);
					$compile(element.contents())(scope);
				}
			)
		};
	}
]);


/***/ }),

/***/ "./src/common/directives/clinicaid/file_model.js":
/*!*******************************************************!*\
  !*** ./src/common/directives/clinicaid/file_model.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common').directive('fileModel', ['$parse', function ($parse) {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            var model = $parse(attrs.fileModel);
            var modelSetter = model.assign;
            
            element.bind('change', function(){
                scope.$apply(function(){
                    modelSetter(scope, element[0].files[0]);
                });
            });
        }
    };
}]);


/***/ }),

/***/ "./src/common/directives/clinicaid/resize.js":
/*!***************************************************!*\
  !*** ./src/common/directives/clinicaid/resize.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common').directive('resize',
	[
		'$window',
		function($window)
		{
			// this directive broadcasts resize::resize on window resize
			// use the resize-handler directive to listen for and handle the event

			return {
				link: function(scope) {
					angular.element($window).on('resize', function(e)
					{
						// use name of directive + event to avoid collisions
						scope.$broadcast('resize::resize');
					});
				}
			}
		}
	]
);


/***/ }),

/***/ "./src/common/directives/clinicaid/resize_handler.js":
/*!***********************************************************!*\
  !*** ./src/common/directives/clinicaid/resize_handler.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common').directive(
	'resizeHandler',[
	'$parse',
	function($parse)
	{
		// the resize directive broadcasts resize::resize on window resize
		// use this directive to listen and handle the resize event
		return {
			restrict: 'A',
			link: function (scope, element, attrs) {
				scope.$on('resize::resize', function () {
					$parse(attrs.resizeHandler)(scope);
				});
			}
		}
	}]
);



/***/ }),

/***/ "./src/common/directives/clinicaid/scroll.js":
/*!***************************************************!*\
  !*** ./src/common/directives/clinicaid/scroll.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common').directive('scroll',
	[
		'$window',
		function($window)
		{
			// this directive broadcasts scroll::scroll on window scroll
			// use the scroll-handler directive to listen for and handle the event

			return {
				link: function(scope) {
					angular.element($window).on('scroll', function(e)
					{
						// use name of directive + event to avoid collisions
						scope.$broadcast('scroll::scroll');
					});
				}
			}
		}
	]
);


/***/ }),

/***/ "./src/common/directives/clinicaid/scroll_handler.js":
/*!***********************************************************!*\
  !*** ./src/common/directives/clinicaid/scroll_handler.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common').directive(
	'scrollHandler', [
	'$parse',
	function($parse)
	{
		// the scroll directive broadcasts scroll::scroll on window scroll
		// use this directive to listen and handle the scroll event
		return {
			restrict: 'A',
			link: function (scope, element, attrs) {
				scope.$on('scroll::scroll', function () {
					$parse(attrs.scrollHandler)(scope);
				});
			}
		}
	}]
);



/***/ }),

/***/ "./src/common/directives/clinicaid/zero_pad.js":
/*!*****************************************************!*\
  !*** ./src/common/directives/clinicaid/zero_pad.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common').directive(
	'caZeroPad', 

	[
		'$filter',

	function(
		$filter
	)
{
    return {
		restrict: 'A',
		require: 'ngModel',
		link: function (scope, element, attrs, ctrl) {

			ctrl.$formatters.unshift(function (data) {
				var pad_length = attrs.caZeroPad;
				if(!pad_length)
				{
					pad_length = 0;
				}
				return $filter('numberFixedLength')(data, pad_length);
			});

			ctrl.$parsers.unshift(function (data) {
				var pad_length = attrs.caZeroPad;
				if(!pad_length)
				{
					pad_length = 0;
				}
				return $filter('numberFixedLength')(data, pad_length);
			});            
		},
	};
}]);


/***/ }),

/***/ "./src/common/directives/datepickerPopup.js":
/*!**************************************************!*\
  !*** ./src/common/directives/datepickerPopup.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */

angular.module('Common.Directives').directive('junoDatepickerPopup', [

	function()
	{
		var scope = {


		};

		scope.model = '=junoModel';
		scope.placeholder = '@';
		scope.showIcon = '=';
		scope.disableInput = '=';

		var linkFunction = function link_function($scope, element, attribute, controller)
		{
			$scope.format = 'yyyy-MM-dd';

			$scope.dateOptions = {
				showWeeks: false
			};

			$scope.opened = false;

			$scope.openDatepicker = function()
			{
				$scope.opened = true;
			};

		};

		return {
			restrict: 'E',
			scope: scope,
			templateUrl: function(elem, attribute)
			{
				return 'src/common/directives/datepickerPopup' + attribute.type + '.jsp';
			},
			replace: true,
			link: linkFunction
		};

	}
]);

/***/ }),

/***/ "./src/common/directives/jqueryUIDraggable.js":
/*!****************************************************!*\
  !*** ./src/common/directives/jqueryUIDraggable.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Common.Directives').directive('draggable', [
	function()
	{
		console.log('DRAGGABLE DIRECTIVE LOADED');

		return {
			restrict: 'A',
			link: function postLink(scope, elem, attrs)
			{
				elem.draggable(
				{
					axis: "x",
					containment: "#main-body"
				});
			}
		};
	}
]);

/***/ }),

/***/ "./src/common/directives/jqueryUIResizable.js":
/*!****************************************************!*\
  !*** ./src/common/directives/jqueryUIResizable.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {
__webpack_require__(/*! jquery-ui/ui/widgets/resizable */ "./node_modules/jquery-ui/ui/widgets/resizable.js");

angular.module('Common.Directives').directive('resizable', [
	function()
	{
		console.log('RESIZABLE DIRECTIVE LOADED');

		return {
			restrict: 'A',
			scope:
			{
				callback: '&onResize'
			},
			link: function postLink(scope, elem, attrs)
			{

				console.log('RESIZABLE DIRECTIVE HEIGHT ', $(".note-editor-textarea").height());
				elem.resizable(
				{
					handles: 'n, nw, ne',
					minHeight: 250,
					minWidth: 510,
					maxWidth: window.innerWidth,
					maxHeight: window.innerHeight / 1.5,
					// containment: "#main-body"
				});
				elem.on('resizestop', function(evt, ui)
				{
					if (scope.callback)
					{
						scope.callback();
					}

				});
				elem.on('resize', function()
				{
					$(".note-editor-textarea").css('height', elem.height() - 145 - $(".note-editor-issues").height());
				});

				// Workaround, need to either replace JqueryUI or find a better way to account for dynamic changes to resizable div size
				// Doesn't seem to be an easy way to dynamically set minHeight appropriately
				scope.$on('noteIssueAdded', function()
				{
					var newHeight = $('#note-editor').height() + 33;
					$('#note-editor').height(newHeight);
				});

				// Workaround, need to either replace JqueryUI or find a better way to account for dynamic changes to resizable div size
				// Doesn't seem to be an easy way to dynamically set minHeight appropriately
				scope.$on('noteIssueRemoved', function()
				{
					var newHeight = $('#note-editor').height() - 33;
					$('#note-editor').height(newHeight);
				});


			}
		};
	}
]);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/common/directives/module.js":
/*!*****************************************!*\
  !*** ./src/common/directives/module.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */

angular.module('Common.Directives', [ 'Common.Services' ]);



/***/ }),

/***/ "./src/common/directives/patientSearchTypeahead.js":
/*!*********************************************************!*\
  !*** ./src/common/directives/patientSearchTypeahead.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */

angular.module('Common.Directives').directive('junoPatientSearchTypeahead', [
	'$q',
	'typeaheadHelper',
	'demographicsService',

	function($q, typeaheadHelper, demographicsService)
	{
		var scope = typeaheadHelper.defaultTypeaheadScope();

		var linkFunction = function link_function($scope, element, attribute, controller)
		{
			typeaheadHelper.initTypeahead($scope);

			$scope.optionsTemplateUrl = 'src/common/directives/patientSearchTypeaheadOption.jsp';

			$scope.findMatches = function findMatches(search)
			{
				var deferred = $q.defer();
				demographicsService.quickSearch(search).then(
					function success(results)
					{
						var matches = results.data;
						var meta = results.meta;

						if(meta.total > 10)
						{
							matches.push({
								moreResults: true,
								total: meta.total,
								searchQuery: search
							});
						}
						deferred.resolve(matches);
					},
					function error()
					{
						deferred.reject();
					});
				return deferred.promise;
			};

			$scope.formatMatchSelection = function formatMatchSelection(demographic)
			{
				if(demographic.moreResults)
				{
					return null;
				}

				return Juno.Common.Util.formatName(demographic.firstName, demographic.lastName);
			};
		};

		return {
			restrict: 'E',
			scope: scope,
			templateUrl: 'src/common/directives/typeahead.jsp',
			replace: true,
			link: linkFunction
		};

	}
]);


/***/ }),

/***/ "./src/common/directives/patientTypeahead.js":
/*!***************************************************!*\
  !*** ./src/common/directives/patientTypeahead.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */

angular.module('Common.Directives').directive('junoPatientTypeahead', [
	'$q',
	'typeaheadHelper',
	'demographicsService',

	function($q, typeaheadHelper, demographicsService)
	{
		var scope = typeaheadHelper.defaultTypeaheadScope();

		var linkFunction = function link_function($scope, element, attribute, controller)
		{
			typeaheadHelper.initTypeahead($scope);

			$scope.forceSelection = true;

			$scope.findMatches = function findMatches(search)
			{
				var deferred = $q.defer();

				var params = {
					type: 'Name',
					'term': search,
					active: true,
					integrator: false,
					outofdomain: true
				};
				demographicsService.search(params, 0, 25).then(function success(data)
					{
						deferred.resolve(data.content);
						console.log('dataa', data);
					},
					function error()
					{
						deferred.reject();
					});

				return deferred.promise;
			};

			$scope.formatMatchSelection = function formatMatchSelection(demographic)
			{
				return demographic.lastName + ', ' + demographic.firstName;
			};

			$scope.typeaheadLabel = function(match)
			{
				return $scope.formatMatchSelection(match);
			};
		};

		return {
			restrict: 'E',
			scope: scope,
			templateUrl: 'src/common/directives/typeahead.jsp',
			replace: true,
			link: linkFunction
		};

	}
]);


/***/ }),

/***/ "./src/common/directives/typeaheadHelper.js":
/*!**************************************************!*\
  !*** ./src/common/directives/typeaheadHelper.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Directives").service("typeaheadHelper", [
	'$timeout',
	function($timeout)
	{
		var helper = {};

		helper.defaultTypeaheadScope = function()
		{
			var scope = {};

			// holds the selected match
			scope.model = '=junoModel';

			// placeholder for the text input
			scope.placeholder = '@junoPlaceholder';

			// called when the search button is clicked (search button will only appear if defined)
			scope.onSearchFn = '&junoOnSearchFn';

			scope.onAddFn = '&junoOnAddFn';
			// title for the search button
			scope.searchButtonTitle = '@junoSearchButtonTitle';

			scope.addButtonTitle = '@junoAddButtonTitle';

			return scope;
		};

		helper.initTypeahead = function initTypeahead($scope)
		{
			//=========================================================================
			// typeahead directives must define/override these
			//=========================================================================

			$scope.findMatches = function findMatches($viewValue)
			{
				console.log('findMatches function must be defined by the typeahead implementation');
			};

			$scope.formatMatchSelection = function formatMatchSelection($model)
			{
				console.log('formatMatch function must be defined by the typeahead implementation');
			};

			//=========================================================================
			// typeahead directives may define/override these
			//=========================================================================

			$scope.optionsTemplateUrl = null;
			$scope.forceSelection = false;

			//=========================================================================
			// common initialization for $scope, for use on all typeahead directives
			//=========================================================================

			// the internal ng-model
			$scope.searchField = null;

			// ng-model-options
			$scope.typeaheadModelOptions = {
				debounce:
				{
					default: 250,
					blur: 250
				}
			};

			// the passed-in model that holds the selection
			if (!angular.isDefined($scope.model))
			{
				$scope.model = null;
			}

			$scope.autocompleteMinLength = 1;

			$scope.hasButtons = function hasButtons()
			{
				return $scope.hasSearchButton() || $scope.hasAddButton();
			};

			$scope.hasSearchButton = function hasSearchButton()
			{
				return angular.isFunction($scope.onSearchFn());
			};

			$scope.hasAddButton = function hasAddButton()
			{
				return angular.isFunction($scope.onAddFn());
			};

			$scope.hasTemplateUrl = function hasTemplateUrl()
			{
				return Juno.Common.Util.exists($scope.optionsTemplateUrl);
			};

			$scope.hasForceSelectionEnabled = function hasForceSelectionEnabled()
			{
				return Juno.Common.Util.exists($scope.forceSelection) && $scope.forceSelection;
			};

			$scope.formatMatch = function formatMatch($model)
			{
				console.log("- Formatting Match -------------");
				console.log($model);
				console.log("--------------------------------");
				if (!Juno.Common.Util.exists($model))
				{
					return null;
				}

				if ($scope.isDummySelection($model))
				{
					return $model.searchQuery;
				}

				return $scope.formatMatchSelection($model);
			};

			$scope.onSelect = function onSelect($item, $model, $label, $event)
			{
				console.log('typeaheadHelper::onSelect - setting model', $item);
				$scope.model = $item;
			};

			$scope.onBlur = function onBlur()
			{
				if ($scope.hasForceSelectionEnabled() && angular.isString($scope.searchField))
				{
					console.log('typeaheadHelper::onBlur - setting model to null (forceSelectionEnabled)');
					// the searchField is not a valid selection and force selection is enabled
					// if there is a select, onSelect will fire after
					$scope.model = null;
				}
			};

			$scope.onChange = function onChange()
			{
				if (!$scope.hasForceSelectionEnabled())
				{
					console.log('typeaheadHelper::onChange - setting model (isTypeaheadSearchQuery)');
					// as user types into the typeahead, select a 'dummy' selection;
					// consumers need to check the isTypeaheadSearchQuery property
					$scope.onSelect($scope.createDummySelection());
				}
			};

			$scope.onSearch = function onSearch()
			{
				// must be in a $timeout because model may not be populated yet
				// because of delay specified by ng-model-options
				$timeout(function()
				{
					if (angular.isFunction($scope.onSearchFn()))
					{
						$scope.onSearchFn()($scope.model);
					}
				});
			};

			$scope.onAdd = function onAdd()
			{
				// must be in a $timeout because model may not be populated yet
				// because of delay specified by ng-model-options
				$timeout(function()
				{
					if (angular.isFunction($scope.onAddFn()))
					{
						$scope.onAddFn()($scope.model);
					}
				});
			};

			$scope.createDummySelection = function createDummySelection()
			{
				return {
					isTypeaheadSearchQuery: true,
					searchQuery: $scope.searchField
				};
			};

			$scope.isDummySelection = function isDummySelection(match)
			{
				return Juno.Common.Util.exists(match) && match.isTypeaheadSearchQuery;
			};

			$scope.$watch('model', function()
			{
				// when the 'external' model is updated, update the 'internal' model
				$scope.searchField = $scope.model;
			});

		};

		return helper;
	}

]);

/***/ }),

/***/ "./src/common/displayMessages.js":
/*!***************************************!*\
  !*** ./src/common/displayMessages.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



window.Juno = window.Juno || {};
window.Juno.Common = window.Juno.Common || {};

window.Juno.Common.DisplayMessages = function DisplayMessages(messages_hash, options)
{
	var me = this;

	/*************************************************************/
	// Local Variables
	/*************************************************************/

	me.messages_hash = {};
	me.display_field_errors = true;
	me.field_errors_label_map = {};
	me.field_errors_label_map_key = null;
	me.extra_info = {};
	me.meta = {};

	me.saving_message = 'Saving...';

	/*************************************************************/
	// Initialize
	// @param {messages_hash} Error hash from Juno API
	// @param {options} Hash
	//		- {display_field_errors} Boolean : Sets flag
	//		- {field_errors_label_map} Hash : Can pass a hash in to get field
	// 		labels for displaying field errors. Assumed to be field => label
	//		- {field_errors_label_map_key} String : Allows for
	// 		field => Hash[key] lookup for label.
	/*************************************************************/

	me.init = function init()
	{
		if (Juno.Common.Util.exists(messages_hash))
		{
			me.messages_hash = messages_hash;
		}

		// Datamapper field errors are inconsistent and can return either a
		// hash -> array or hash -> string
		me.force_field_error_arrays();

		// Parse options
		if (Juno.Common.Util.exists(options))
		{
			if (Juno.Common.Util.exists(options.display_field_errors) && options.display_field_errors === false)
			{
				me.display_field_errors = false;
			}
			if (Juno.Common.Util.exists(options.field_errors_label_map))
			{
				me.field_errors_label_map = options.field_errors_label_map;
				if (Juno.Common.Util.exists(options.field_errors_label_map_key))
				{
					me.field_errors_label_map_key = options.field_errors_label_map_key;
				}
			}
		}
	};

	// merge another display messages object into this one
	me.merge = function merge(display_messages)
	{
		// does not merge extra_info or meta - just messages

		me.messages_hash = angular.merge(me.messages_hash, display_messages.messages_hash);
	};

	/*************************************************************/
	// Alert Warnings
	/*************************************************************/

	me.has_alert_warnings = function has_alert_warnings()
	{
		return me.alert_warnings().length > 0;
	};

	me.alert_warnings = function alert_warnings()
	{
		if (Juno.Common.Util.exists(me.messages_hash) &&
				Juno.Common.Util.exists(me.messages_hash.alert_warnings))
		{
			return me.messages_hash.alert_warnings;
		}
		return [];
	};

	me.add_alert_warning = function add_alert_warning(message)
	{
		if (!me.has_alert_warnings())
		{
			me.messages_hash.alert_warnings = [];
		}
		me.messages_hash.alert_warnings.push(message);
	};

	/*************************************************************/
	// Standard Errors
	// Generic errors not tied to any specific element.
	/*************************************************************/

	// Returns true if there are any field errors
	me.has_validation_warnings = function has_validation_warnings()
	{
		return me.validation_warnings().length > 0;
	};

	me.add_validation_warning = function add_validation_warning(message)
	{
		if (!me.has_validation_warnings())
		{
			me.messages_hash.validation_warnings = [];
		}
		me.messages_hash.validation_warnings.push(message);
	};

	me.validation_warnings = function validation_warnings()
	{
		if (Juno.Common.Util.exists(me.messages_hash) &&
				Juno.Common.Util.exists(me.messages_hash.validation_warnings))
		{
			return me.messages_hash.validation_warnings;
		}
		return [];
	};

	/*************************************************************/
	// Standard Errors
	// Generic errors not tied to any specific element.
	/*************************************************************/

	me.has_standard_errors = function has_standard_errors()
	{
		return me.standard_errors().length > 0;
	};

	me.standard_errors = function standard_errors()
	{
		if (Juno.Common.Util.exists(me.messages_hash) &&
				Juno.Common.Util.exists(me.messages_hash.standard_errors))
		{
			return me.messages_hash.standard_errors;
		}
		return [];
	};

	me.add_standard_error = function add_standard_error(message)
	{
		if (!me.has_standard_errors())
		{
			me.messages_hash.standard_errors = [];
		}
		me.messages_hash.standard_errors.push(message);
	};

	me.add_generic_fatal_error = function add_generic_fatal_error()
	{
		// TODO: change this
		me.add_standard_error("Fatal Error");
		//		Juno.Context.Settings.interface_preferences.generic_fatal_error_message);
	};

	/*************************************************************/
	// Standard Warnings
	// Generic warnings not tied to any specific element.
	/*************************************************************/

	me.has_standard_warnings = function has_standard_warnings()
	{
		return me.standard_warnings().length > 0;
	};

	me.standard_warnings = function standard_warnings()
	{
		if (Juno.Common.Util.exists(me.messages_hash) &&
				Juno.Common.Util.exists(me.messages_hash.standard_warnings))
		{
			return me.messages_hash.standard_warnings;
		}
		return [];
	};

	me.add_standard_warning = function add_standard_warning(message)
	{
		if (!me.has_standard_warnings())
		{
			me.messages_hash.standard_warnings = [];
		}
		me.messages_hash.standard_warnings.push(message);
	};

	/*************************************************************/
	// Standard Info Message
	// Generic info message not tied to any specific element.
	/*************************************************************/

	me.has_standard_info = function has_standard_info()
	{
		return me.standard_info().length > 0;
	};

	me.standard_info = function standard_info()
	{
		if (Juno.Common.Util.exists(me.messages_hash) &&
				Juno.Common.Util.exists(me.messages_hash.standard_info))
		{
			return me.messages_hash.standard_info;
		}
		return [];
	};

	me.add_standard_info = function add_standard_info(message)
	{
		if (!me.has_standard_info())
		{
			me.messages_hash.standard_info = [];
		}
		me.messages_hash.standard_info.push(message);
	};

	/*************************************************************/
	// Standard Success Message
	// Generic success message not tied to any specific element.
	/*************************************************************/

	me.has_standard_success = function has_standard_success()
	{
		return me.standard_success().length > 0;
	};

	me.standard_success = function standard_success()
	{
		if (Juno.Common.Util.exists(me.messages_hash) &&
				Juno.Common.Util.exists(me.messages_hash.standard_success))
		{
			return me.messages_hash.standard_success;
		}
		return [];
	};

	me.add_standard_success = function add_standard_success(message)
	{
		if (!me.has_standard_success())
		{
			me.messages_hash.standard_success = [];
		}
		me.messages_hash.standard_success.push(message);
	};

	/*************************************************************/
	// Field Errors
	// These errors are directly related to form fields.
	/*************************************************************/

	// Returns true if there are any field errors
	me.has_field_errors = function has_field_errors()
	{
		return me.field_errors() && !angular.equals(me.field_errors(), {});
	};

	// Returns a hash of field errors
	me.field_errors = function field_errors(prepend_label)
	{
		var field_errors = {}
		if (Juno.Common.Util.exists(me.messages_hash) &&
				Juno.Common.Util.exists(me.messages_hash.field_errors))
		{
			if (Juno.Common.Util.exists(prepend_label) && prepend_label === true)
			{
				for (var key in me.messages_hash.field_errors)
				{
					field_errors[key] = me.prepend_label(
							key, me.messages_hash.field_errors[key]);
				}
			}
			else
			{
				field_errors = me.messages_hash.field_errors;
			}
		}
		return field_errors;
	};

	// Returns true if there is a field error for any of the passed in keys
	me.has_one_of_field_error = function has_one_of_field_error(keys)
	{
		if (!angular.isArray(keys))
		{
			keys = [keys];
		}

		for (var i in keys)
		{
			if (me.has_field_error(keys[i]))
			{
				return true;
			}
		}
		return false;
	};

	// Returns true if this field error exists and this error object has the matching index.
	// Used for invoice multi post which posts multiple invoices line items, and returns an index
	// corresponding to the line item with the error
	me.has_indexed_field_error = function has_indexed_field_error(key, index)
	{
		if(Juno.Common.Util.exists(me.extra_info) &&
				Juno.Common.Util.exists(me.extra_info.index) &&
				me.extra_info.index == index)
		{
			return me.has_field_error(key);
		}
		return false;
	};

	// Returns true if this field error exists
	me.has_field_error = function has_field_error(key)
	{
		if (me.has_field_errors())
		{
			if (key in me.field_errors())
			{
				return true;
			}
		}
		return false;
	};

	// Converts all field errors to strings. Concatinates arrays. Useful for our ca-field
	// directives that use ca-error as it doesn't accept a boolean value.
	me.field_error_string = function field_error_string(key, concat_string)
	{
		if (me.has_field_error(key))
		{
			if (!Juno.Common.Util.exists(concat_string))
			{
				concat_string = ", ";
			}
			return me.field_errors()[key].join(concat_string);
		}
		return "";
	};

	// Adds a new field error with the given message
	me.add_field_error = function add_field_error(key, message)
	{
		if (!me.has_field_errors())
		{
			me.messages_hash.field_errors = {};
		}
		if (!me.has_field_error(key))
		{
			me.messages_hash.field_errors[key] = [];
		}
		me.messages_hash.field_errors[key].push(message)
	};

	// Removes a field error.
	me.remove_field_error = function remove_field_error(key)
	{
		if(me.has_field_error(key))
		{
			delete me.messages_hash.field_errors[key];
		}
	};

	/*************************************************************/
	// Error links
	// These are error messages that have an embeded link in them
	// Eg: This patient already exists. Press "here" to view patient.
	/*************************************************************/

	me.has_error_links = function has_error_links()
	{
		return me.error_links().length > 0;
	};

	me.add_error_link = function add_error_link(message)
	{
		if (!me.has_error_links())
		{
			me.messages_hash.error_links = [];
		}
		me.messages_hash.error_links.push(message);
	};

	me.error_links = function error_links()
	{
		if (Juno.Common.Util.exists(me.messages_hash) &&
				Juno.Common.Util.exists(me.messages_hash.error_links))
		{
			return me.messages_hash.error_links;
		}
		return [];
	};

	/*************************************************************/
	// Helpers
	/*************************************************************/

	me.has_errors = function has_errors()
	{
		if (me.has_field_errors() ||
				me.has_standard_errors() ||
				me.has_error_links())
		{
			return true;
		}
		return false;
	};

	me.clear = function clear()
	{
		me.messages_hash = {};
	};

	// Make sure each field error value is an array of messages even if there
	// is only one element.
	me.force_field_error_arrays = function force_field_error_arrays()
	{
		if (me.has_field_errors())
		{
			for (var i in me.messages_hash.field_errors)
			{
				if (!angular.isArray(me.messages_hash.field_errors[i]))
				{
					me.messages_hash.field_errors[i] = [
						angular.copy(me.messages_hash.field_errors[i])
					];
				}
			}
		}
	};

	// Prepend field label to all field error messages
	me.prepend_label = function prepend_label(field, field_errors)
	{
		var label = "";
		var out_field_errors = [];
		if (field in me.field_errors_label_map)
		{
			// Lookup label in basic key -> label map
			label = me.field_errors_label_map[field];

			// If label map is a hash of hashes, grab the label from the
			// provided label field
			if (Juno.Common.Util.exists(me.field_errors_label_map_key))
			{
				label = me.field_errors_label_map[field][
						me.field_errors_label_map_key];
			}

			// Append label
			for (var i in field_errors)
			{
				var error_message = [label, field_errors[i]].join(" ").trim();
				out_field_errors.push(error_message);
			}
		}
		else
		{
			out_field_errors = field_errors;
		}
		return out_field_errors;
	};

	me.merge_messages = function merge_messages(merge_display_messages)
	{
		var field_errors = merge_display_messages.field_errors();
		var error_links = merge_display_messages.error_links();
		var standard_infos = merge_display_messages.standard_info();
		var standard_warnings = merge_display_messages.standard_warnings();
		var standard_errors = merge_display_messages.standard_errors();
		var alert_warnings = merge_display_messages.alert_warnings();
		var validation_warnings = merge_display_messages.validation_warnings();
		var standard_success = merge_display_messages.standard_success();

		for(var i = 0; i < standard_success.length; i++)
		{
			me.add_standard_success(standard_success[i]);
		}

		for(i = 0; i < standard_infos.length; i++)
		{
			me.add_standard_info(standard_infos[i]);
		}

		for(i = 0; i < standard_warnings.length; i++)
		{
			me.add_standard_warning(standard_warnings[i]);
		}

		for(i = 0; i < standard_errors.length; i++)
		{
			me.add_standard_error(standard_errors[i]);
		}

		for(i = 0; i < alert_warnings.length; i++)
		{
			me.add_alert_warning(alert_warnings[i]);
		}

		for(i = 0; i < validation_warnings.length; i++)
		{
			me.add_validation_warning(validation_warnings[i]);
		}

		for(i = 0; i < error_links.length; i++)
		{
			me.add_error_link(error_links[i]);
		}

		for(var key in field_errors)
		{
			if(field_errors.hasOwnProperty(key))
			{
				for(i = 0; i < field_errors[key].length; i++)
				{
					me.add_field_error(key, field_errors[key][i]);
				}
			}
		}
	};

	me.init();
};



/***/ }),

/***/ "./src/common/filters/age.js":
/*!***********************************!*\
  !*** ./src/common/filters/age.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */

angular.module('Common.Filters').filter('age', [
	function()
	{
		return function(input)
		{
			if (input !== null && input.years !== null)
			{
				if (input.years < 1 && input.months < 1)
				{
					return input.days + "d";
				}

				if (input.years < 2)
				{
					return input.months + "m";
				}

				return input.years + " y";
			}

			return "";
		};
	}
]);

/***/ }),

/***/ "./src/common/filters/cut.js":
/*!***********************************!*\
  !*** ./src/common/filters/cut.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */

angular.module('Common.Filters').filter('cut', [
	function()
	{
		return function(value, wordwise, max, tail)
		{
			if (!value) return '';

			max = parseInt(max, 10);
			if (!max) return value;
			if (value.length <= max) return value;

			value = value.substr(0, max);
			if (wordwise)
			{
				var lastspace = value.lastIndexOf(' ');
				if (lastspace !== -1)
				{
					value = value.substr(0, lastspace);
				}
			}

			return value + (tail || ' …');
		};
	}
]);

/***/ }),

/***/ "./src/common/filters/module.js":
/*!**************************************!*\
  !*** ./src/common/filters/module.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */

angular.module('Common.Filters', []);



/***/ }),

/***/ "./src/common/filters/offset.js":
/*!**************************************!*\
  !*** ./src/common/filters/offset.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */

angular.module('Common.Filters').filter('offset', [
	function()
	{
		return function(input, start)
		{
			if (input === null)
			{
				return 0;
			}
			start = parseInt(start, 10);
			return input.slice(start);
		};
	}
]);

/***/ }),

/***/ "./src/common/filters/startFrom.js":
/*!*****************************************!*\
  !*** ./src/common/filters/startFrom.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */

angular.module('Common.Filters').filter('startFrom', [
	function()
	{
		return function(input, start)
		{
			start = +start; //parse to int
			// return input.slice(start);
			return input;
		};
	}
]);

/***/ }),

/***/ "./src/common/module.js":
/*!******************************!*\
  !*** ./src/common/module.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */

angular.module('Common', []);

/***/ }),

/***/ "./src/common/services/appService.js":
/*!*******************************************!*\
  !*** ./src/common/services/appService.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Services").service("appService", [
	'$http', '$q',
	function($http, $q)
	{
		var service = {};

		service.apiPath = '../ws/rs/app';

		service.getApps = function getApps()
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + '/getApps',
				method: "GET",
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("appServices::getApps error", errors);
					deferred.reject("An error occured while getting app content");
				});

			return deferred.promise;
		};

		return service;
	}

]);

/***/ }),

/***/ "./src/common/services/autoCompleteService.js":
/*!****************************************************!*\
  !*** ./src/common/services/autoCompleteService.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(moment) {

/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Services").service("autoCompleteService", [
	"$q",
	"demographicService",
	function(
		$q,
		demographicService
	)
	{
		var service = {};

		service.init_autocomplete_values = function init_autocomplete_values(patient, autocomplete_values){
			var deferred = $q.defer();

			demographicService.getDemographic(patient.patient).then(function(result){
				console.log(result);
				result.dob = moment([result.dobYear, result.dobMonth, result.dobDay]);

				deferred.resolve({
					data:{
						patient:{
							data: service.formatDemographic(result)
						}
					}
				});

			});

			return deferred.promise;
		};

		service.formatDemographic = function formatDemographic(result)
		{
			return {
				uuid: result.demographicNo,
				full_name: result.lastName + ',' + result.firstName,
				birth_date: Juno.Common.Util.formatMomentDate(result.dob),
				health_number: result.hin,
				phone_number_primary: result.phone
			};
		};

		return service;
	}
]);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! moment */ "./node_modules/moment/moment.js")))

/***/ }),

/***/ "./src/common/services/billingService.js":
/*!***********************************************!*\
  !*** ./src/common/services/billingService.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Services").service("billingService", [
	'$http', '$q',
	function($http, $q)
	{
		var service = {};

		service.apiPath = '../ws/rs/';

		service.getUniqueServiceTypes = function getUniqueServiceTypes()
		{
			var deferred = $q.defer();

			$http.get(service.apiPath + 'billing/uniqueServiceTypes',
				Juno.Common.ServiceHelper.configHeadersWithCache()).then(
				function success(results)
				{
					deferred.resolve(results.data.content);
				},
				function error(errors)
				{
					console.log("billingService::getUniqueServiceTypes error", errors);
					deferred.reject("An error occured while fetching billing service types");
				});

			return deferred.promise;
		};

		service.getBillingRegion = function getBillingRegion()
		{
			var deferred = $q.defer();

			$http.get(service.apiPath + 'billing/billingRegion',
				Juno.Common.ServiceHelper.configHeadersWithCache()).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("billingService::getBillingRegion error", errorsz);
					deferred.reject("An error occured while setting billingRegion");
				});

			return deferred.promise;
		};

		service.getDefaultView = function getDefaultView()
		{
			var deferred = $q.defer();

			$http.get(service.apiPath + 'billing/defaultView',
				Juno.Common.ServiceHelper.configHeadersWithCache()).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("billingService::getDefaultView error", errors);
					deferred.reject("An error occured while setting defaultView");
				});

			return deferred.promise;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/consultService.js":
/*!***********************************************!*\
  !*** ./src/common/services/consultService.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(moment) {

/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Services").service("consultService", [
	'$http',
	'$q',
	'junoHttp',
	function($http,
	         $q,
	         junoHttp)
	{
		var service = {};

		service.apiPath = '../ws/rs/consults/';

		service.searchRequests = function searchRequests(search)
		{
			var deferred = $q.defer();

			var config = Juno.Common.ServiceHelper.configHeaders();
			config.params = search;
			
			junoHttp.get(service.apiPath + 'searchRequests', config).then(
				function success(results)
				{
					deferred.resolve(results);
				},
				function error(errors)
				{
					console.log("consultService::searchRequests error", errors);
					deferred.reject("An error occurred while searching consult requests");
				});

			return deferred.promise;
		};

		service.getRequest = function getRequest(requestId)
		{
			var deferred = $q.defer();

			var config = Juno.Common.ServiceHelper.configHeaders();

			junoHttp.get(service.apiPath + 'getRequest/' + encodeURIComponent(requestId), config).then(
				function success(results)
				{
					if(results.data.referralDate) results.data.referralDate = moment(results.data.referralDate).toDate();
					if(results.data.appointmentDate) results.data.appointmentDate = moment(results.data.appointmentDate).toDate();
					if(results.data.followUpDate) results.data.followUpDate = moment(results.data.followUpDate).toDate();

					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("consultService::getRequest error", errors);
					deferred.reject(
						"An error occurred while getting consult request (requestId=" + requestId + ")");
				});

			return deferred.promise;
		};
		service.getNewRequest = function getRequest(demographicNo)
		{
			var deferred = $q.defer();

			var config = Juno.Common.ServiceHelper.configHeaders();
			config.params = {
				demographicNo: demographicNo
			};

			junoHttp.get(service.apiPath + 'getNewRequest', config).then(
				function success(results)
				{
					if(results.data.referralDate) results.data.referralDate = moment(results.data.referralDate).toDate();
					if(results.data.appointmentDate) results.data.appointmentDate = moment(results.data.appointmentDate).toDate();
					if(results.data.followUpDate) results.data.followUpDate = moment(results.data.followUpDate).toDate();

					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("consultService::getNewRequest error", errors);
					deferred.reject(
						"An error occurred while getting new consult request");
				});

			return deferred.promise;
		};

		service.getRequestAttachments = function getRequestAttachments(
			requestId, demographicId, attached)
		{
			var deferred = $q.defer();

			var config = Juno.Common.ServiceHelper.configHeaders();
			config.params = {
				'demographicId': encodeURIComponent(demographicId),
				'attached': encodeURIComponent(attached)
			};

			junoHttp.get(service.apiPath + 'getRequestAttachments/' + encodeURIComponent(requestId), config).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("consultService::getRequestAttachments error", errors);
					deferred.reject("An error occured while getting consult attachments (requestId=" + requestId + ")");
				});

			return deferred.promise;
		};

		service.saveRequest = function saveRequest(request)
		{
			var deferred = $q.defer();
			junoHttp.post(service.apiPath + 'saveRequest', request).then(

				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("consultService::saveRequest error", error);
					deferred.reject("An error occurred while fetching consult request after save");
				});

			return deferred.promise;
		};

		service.eSendRequest = function eSendRequest(requestId)
		{
			var deferred = $q.defer();

			junoHttp.get(service.apiPath + 'eSendRequest/' + encodeURIComponent(requestId),
				Juno.Common.ServiceHelper.configHeaders()).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("consultService::eSendRequest error", errors);
					deferred.reject(
						"An error occurred while e-sending consult request (requestId=" + requestId + ")");
				});

			return deferred.promise;
		};

		service.searchResponses = function searchRequests(search)
		{
			var deferred = $q.defer();

			var config = Juno.Common.ServiceHelper.configHeaders();
			config.params = search;
			junoHttp.get(service.apiPath + 'searchResponses', config).then(
				function success(results)
				{
					deferred.resolve(results);
				},
				function error(errors)
				{
					console.log("consultService::searchRequests error", errors);
					deferred.reject("An error occured while searching consult requests");
				});

			return deferred.promise;
		};

		service.getResponse = function getResponse(responseId, demographicNo)
		{
			var deferred = $q.defer();

			if (responseId === "new")
			{
				responseId = 0;
			}

			$http.get(service.apiPath + 'getResponse',
			{
				params:
				{
					responseId: responseId,
					demographicNo: demographicNo
				}
			}).then(
				function success(results)
				{

					if(results.data.responseDate) results.data.responseDate = moment(results.data.responseDate).toDate();
					if(results.data.referralDate) results.data.referralDate = moment(results.data.referralDate).toDate();
					if(results.data.appointmentDate) results.data.appointmentDate = moment(results.data.appointmentDate).toDate();
					if(results.data.followUpDate) results.data.followUpDate = moment(results.data.followUpDate).toDate();
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("consultService::getResponse error", errors);
					deferred.reject(
						"An error occurred while getting consult response (responseId=" + responseId + ")");
				});

			return deferred.promise;
		};

		service.getResponseAttachments = function getResponseAttachments(
			responseId, demographicNo, attached)
		{
			var deferred = $q.defer();
			$http.get(
				service.apiPath + 'getResponseAttachments?responseId=' + encodeURIComponent(responseId) +
				'&demographicNo=' + encodeURIComponent(demographicNo) +
				'&attached=' + encodeURIComponent(attached)).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("consultService::getResponseAttachments error", errors);
					deferred.reject(
						"An error occurred while getting consult response attachments (responseId=" +
						responseId + ")");
				});

			return deferred.promise;
		};

		service.saveResponse = function saveResponse(response)
		{
			var deferred = $q.defer();

			$http.post(service.apiPath + 'saveResponse', response).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("consultService::saveResponse error", errors);
					deferred.reject("An error occurred while fetching consult response after save");
				});

			return deferred.promise;
		};

		service.getReferralPathwaysByService = function getReferralPathwaysByService(serviceName)
		{
			var deferred = $q.defer();
			$http.get(service.apiPath + 'getReferralPathwaysByService?serviceName=' +
				encodeURIComponent(serviceName)).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("consultService::getReferralPathwaysByService error", errors);
					deferred.reject("An error occured while fetching referral pathways");
				});

			return deferred.promise;
		};

		service.getLetterheadList = function getLetterheadList()
		{
			var deferred = $q.defer();

			var config = Juno.Common.ServiceHelper.configHeaders();
			junoHttp.get(service.apiPath + 'getLetterheadList', config).then(
				function success(results)
				{
					deferred.resolve(results);
				},
				function error(errors)
				{
					console.log("consultService::getLetterheadList error", errors);
					deferred.reject("An error occurred while fetching letterheads");
				});

			return deferred.promise;
		};

		return service;
	}
]);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! moment */ "./node_modules/moment/moment.js")))

/***/ }),

/***/ "./src/common/services/demographicService.js":
/*!***************************************************!*\
  !*** ./src/common/services/demographicService.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(moment) {

/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Services").service("demographicService", [
    '$q',
    'junoHttp',
    function($q, junoHttp)
    {
        var service = {};

        service.apiPath = '../ws/rs/demographic';

        service.getDemographic = function getDemographic(demographicNo)
        {
            var deferred = $q.defer();

	        junoHttp.get(service.apiPath + '/' + encodeURIComponent(demographicNo),
                Juno.Common.ServiceHelper.configHeaders()).then(
                function success(results)
                {
                    if(results.data.effDate) results.data.effDate = moment(results.data.effDate).toDate();
	                if(results.data.hcRenewDate)results.data.hcRenewDate = moment(results.data.hcRenewDate).toDate();
	                if(results.data.endDate)results.data.endDate = moment(results.data.endDate).toDate();
	                if(results.data.patientStatusDate)results.data.patientStatusDate = moment(results.data.patientStatusDate).toDate();
	                if(results.data.onWaitingListSinceDate)results.data.onWaitingListSinceDate = moment(results.data.onWaitingListSinceDate).toDate();
	                if(results.data.scrPaperChartArchivedDate)results.data.scrPaperChartArchivedDate = moment(results.data.scrPaperChartArchivedDate).toDate();
	                if(results.data.dateJoined)results.data.dateJoined = moment(results.data.dateJoined).toDate();
	                if(results.data.rosterTerminationDate)results.data.rosterTerminationDate = moment(results.data.rosterTerminationDate).toDate();
	                if(results.data.rosterDate)results.data.rosterDate = moment(results.data.rosterDate).toDate();
                    console.log('converted RESULTS: ', results.data);
                    deferred.resolve(results.data);
                },
                function error(errors)
                {
                    console.log("demographicServices::getDemographic error", errors);
                    deferred.reject("An error occurred while fetching demographic");
                });

            return deferred.promise;
        };

	    service.getDemographicContacts = function getDemographicContacts(demographicNo,contactCategory)
	    {
		    var deferred = $q.defer();

		    var config = Juno.Common.ServiceHelper.configHeaders();
		    config.params = {
			    category: contactCategory
		    };

		    junoHttp.get(service.apiPath + '/' + encodeURIComponent(demographicNo) + "/contacts", config).then(
			    function success(results)
			    {
				    deferred.resolve(results.data);
			    },
			    function error(errors)
			    {
				    console.log("demographicServices::getDemographicContacts error", errors);
				    deferred.reject("An error occurred while fetching demographic contacts");
			    });

		    return deferred.promise;
	    };

        service.saveDemographic = function saveDemographic(demographic)
        {
            var deferred = $q.defer();

	        junoHttp.post(service.apiPath, demographic).then(
                function success(results)
                {
                    deferred.resolve(results.data);
                },
                function error(errors)
                {
                    console.log("demographicServices::updateDemographic error", errors);
                    deferred.reject("An error occurred while saving demographic");
                });

            return deferred.promise;
        };

        service.updateDemographic = function updateDemographic(demographic)
        {
            var deferred = $q.defer();

	        junoHttp.put(service.apiPath, demographic).then(
                function success(results)
                {
                    deferred.resolve(results.data);
                },
                function error(errors)
                {
                    console.log("demographicServices::updateDemographic error", errors);
                    deferred.reject("An error occurred while updating demographic");
                });

            return deferred.promise;
        };

        return service;
    }
]);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! moment */ "./node_modules/moment/moment.js")))

/***/ }),

/***/ "./src/common/services/demographicsService.js":
/*!****************************************************!*\
  !*** ./src/common/services/demographicsService.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Services").service("demographicsService", [
	'$q',
	'junoHttp',
	function($q, junoHttp)
	{
		var service = {};

		service.apiPath = '../ws/rs/demographics';

		service.quickSearch = function quickSearch(search)
		{
			var deferred = $q.defer();

			var config = Juno.Common.ServiceHelper.configHeaders();
			config.params = {
				query: search
			};

			junoHttp.get(service.apiPath + '/quickSearch', config).then(
				function success(results)
				{
					deferred.resolve(results);
				},
				function error(errors)
				{
					console.log("demographicsService::quickSearch error", errors);
					deferred.reject("An error occurred while searching");
				});

			return deferred.promise;
		};

		service.search = function search(search, startIndex, itemsToReturn)
		{
			var deferred = $q.defer();

			var config = Juno.Common.ServiceHelper.configHeaders();
			config.params = {
				jsonData: search,
				startIndex: startIndex,
				itemsToReturn: itemsToReturn
			};

			junoHttp.get(service.apiPath + '/search', config).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("demographicsService::search error", errors);
					deferred.reject("An error occurred while searching");
				});

			return deferred.promise;
		};

		service.searchIntegrator = function searchIntegrator(search, itemsToReturn)
		{
			var deferred = $q.defer();

			var config = Juno.Common.ServiceHelper.configHeaders();
			config.params = {
				jsonData: search,
				itemsToReturn: itemsToReturn
			};

			junoHttp.get(service.apiPath + '/searchIntegrator', config).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("demographicsService::searchIntegrator error", errors);
					deferred.reject("An error occurred while searching");
				});

			return deferred.promise;
		};

		service.getStatusList = function getStatusList(listType)
		{
			var deferred = $q.defer();

			var config = Juno.Common.ServiceHelper.configHeaders();
			config.params = {
				type: listType
			};

			junoHttp.get(service.apiPath + '/statusList', config).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("demographicsService::getStatusList error", errors);
					deferred.reject("An error occurred while getting status list");
				});

			return deferred.promise;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/diseaseRegistryService.js":
/*!*******************************************************!*\
  !*** ./src/common/services/diseaseRegistryService.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Services").service("diseaseRegistryService", [
	'$http',
	'$q',
	'junoHttp',

	function(
		$http,
		$q,
		junoHttp
        )
	{
		var service = {};

		service.apiPath = '../ws/rs/dxRegisty/';

		service.getQuickLists = function getQuickLists()
		{
			var deferred = $q.defer();
			junoHttp.get(service.apiPath + 'quickLists/',
				Juno.Common.ServiceHelper.configHeadersWithCache()).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("diseaseRegistryService::getQuickLists error", errors);
					deferred.reject("An error occurred while fetching quick lists");
				});

			return deferred.promise;
		};

        service.getIssueQuickLists = function getIssueQuickLists()
        {
            var deferred = $q.defer();
            junoHttp.get(service.apiPath + 'issueQuickLists/',
                Juno.Common.ServiceHelper.configHeadersWithCache()).then(
                function success(results)
                {
                    deferred.resolve(results.data);
                },
                function error(errors)
                {
                    console.log("diseaseRegistryService::getIssueQuickLists error", errors);
                    deferred.reject("An error occurred while fetching quick lists");
                });

            return deferred.promise;
        };

		service.addToDxRegistry = function addToDxRegistry(demographicNo, disease)
		{
			var deferred = $q.defer();

			var issueToSend = {};
			issueToSend.id = disease.id;
			issueToSend.type = disease.type;
			issueToSend.code = disease.code;
			issueToSend.description = disease.description;

			$http.post(service.apiPath + encodeURIComponent(demographicNo) + '/add', issueToSend).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("diseaseRegistryService::addToDxRegistry error", errors);
					deferred.reject("An error occurred while adding to dx registry");
				});

			return deferred.promise;
		};

		service.findDxIssue = function findDxIssue(code, codingSystem)
		{
			var deferred = $q.defer();

			var config = Juno.Common.ServiceHelper.configHeadersWithCache();
			config.params = {
				codingSystem: codingSystem,
				code: code
            };

            junoHttp.get(service.apiPath + 'findDxIssue', config).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("diseaseRegistryService::findDxIssue error", errors);
					deferred.reject("An error occurred while retrieving a dx issue");
				});

			return deferred.promise;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/errorsService.js":
/*!**********************************************!*\
  !*** ./src/common/services/errorsService.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



angular.module('Common.Services').factory(
	'errorsService',

	[

		function()
		{
			var messages = {};

			/*************************************************************/
			// Factory
			// @param {errorsHash} Error hash from Clinicaid API
			// @param {options} Hash
			//		- {displayFieldErrors} Boolean : Sets flag
			//		- {fieldErrorsLabelMap} Hash : Can pass a hash in to get field
			// 		labels for displaying field errors. Assumed to be field => label
			//		- {fieldErrorsLabelMapKey} String : Allows for
			// 		field => Hash[key] lookup for label.
			/*************************************************************/
			messages.factory = function factory(errorsHash, options)
			{
				return new Juno.Common.DisplayMessages(errorsHash, options);
			};

			return messages;
		}]
);

/***/ }),

/***/ "./src/common/services/faxAccountService.js":
/*!**************************************************!*\
  !*** ./src/common/services/faxAccountService.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

    Copyright (c) 2012-2018. CloudPractice Inc. All Rights Reserved.
    This software is published under the GPL GNU General Public License.
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    This software was written for
    CloudPractice Inc.
    Victoria, British Columbia
    Canada

 */

angular.module("Common.Services").service("faxAccountService", [
	'$q',
	'junoHttp',
	function($q, junoHttp)
	{
		var service = {};

		service.apiPath = '../ws/rs/faxAccount';

		service.listAccounts = function listAccounts(page, perPage)
		{
			var deferred = $q.defer();
			var config = Juno.Common.ServiceHelper.configHeaders();
			config.params = {
				page: page,
				perPage: perPage
			};

			junoHttp.get(service.apiPath + '/search', config).then(
				function success(response) {
					deferred.resolve(response.data);
				},
				function error(error) {
					console.log("faxService::listAccounts error", error);
					deferred.reject("An error occurred while getting fax account data");
				});
			return deferred.promise;
		};

		service.isEnabled = function isEnabled(id)
		{
			var deferred = $q.defer();
			var config = Juno.Common.ServiceHelper.configHeaders();

			junoHttp.get(service.apiPath + '/' + id + '/enabled', config).then(
				function success(response) {
					deferred.resolve(response.data);
				},
				function error(error) {
					console.log("faxService::isEnabled error", error);
					deferred.reject("An error occurred while getting fax account data");
				});
			return deferred.promise;
		};
		service.getAccountSettings = function getAccountSettings(id)
		{
			var deferred = $q.defer();
			var config = Juno.Common.ServiceHelper.configHeaders();

			junoHttp.get(service.apiPath + '/' + id, config).then(
				function success(response) {
					deferred.resolve(response.data);
				},
				function error(error) {
					console.log("faxService::getAccountSettings error", error);
					deferred.reject("An error occurred while getting fax account data");
				});
			return deferred.promise;
		};

		service.addAccountSettings = function addAccountSettings(transfer)
		{
			var deferred = $q.defer();

			junoHttp.post(service.apiPath, transfer).then(
				function success(response)
				{
					deferred.resolve(response.data);
				},
				function error(error)
				{
					console.log("faxService::setAccountSettings error", error);
					deferred.reject("An error occurred while setting fax account data");
				});
			return deferred.promise;
		};

		service.updateAccountSettings = function updateAccountSettings(id, transfer)
		{
			var deferred = $q.defer();

			junoHttp.put(service.apiPath + '/' + id, transfer).then(
				function success(response)
				{
					deferred.resolve(response.data);
				},
				function error(error)
				{
					console.log("faxService::setAccountSettings error", error);
					deferred.reject("An error occurred while updating fax account data");
				});
			return deferred.promise;
		};

		service.testConnection = function testConnection(transfer)
		{
			var deferred = $q.defer();

			let id = transfer.id;
			let url = service.apiPath + '/testConnection';

			if(id && id != null && id !== '')
			{
				url = service.apiPath + '/' + transfer.id + '/testConnection'
			}

			junoHttp.post(url, transfer).then(
				function success(response)
				{
					deferred.resolve(response.data);
				},
				function error(error)
				{
					console.log("faxService::validateLogin error", error);
					deferred.reject("An error occurred while testing connection");
				});

			return deferred.promise;
		};

		service.getInbox = function getInbox(accountId, searchListHelper)
		{
			var deferred = $q.defer();
			var config = Juno.Common.ServiceHelper.configHeaders();
			config.params = searchListHelper.getParams();

			junoHttp.get(service.apiPath + '/' + accountId + '/inbox', config).then(
				function success(response)
				{
					deferred.resolve(response);
				},
				function error(error)
				{
					console.log("faxService::getInbox error", error);
					deferred.reject("An error occurred while retrieving inbox data");
				});

			return deferred.promise;
		};

		service.getOutbox = function getOutbox(accountId, searchListHelper)
		{
			var deferred = $q.defer();
			var config = Juno.Common.ServiceHelper.configHeaders();
			config.params = searchListHelper.getParams();

			junoHttp.get(service.apiPath + '/' + accountId + '/outbox', config).then(
				function success(response)
				{
					deferred.resolve(response);
				},
				function error(error)
				{
					console.log("faxService::getOutbox error", error);
					deferred.reject("An error occurred while retrieving outbox data");
				});

			return deferred.promise;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/faxInboundService.js":
/*!**************************************************!*\
  !*** ./src/common/services/faxInboundService.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

    Copyright (c) 2012-2018. CloudPractice Inc. All Rights Reserved.
    This software is published under the GPL GNU General Public License.
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    This software was written for
    CloudPractice Inc.
    Victoria, British Columbia
    Canada

 */

angular.module("Common.Services").service("faxInboundService", [
	'$q',
	'junoHttp',
	function($q, junoHttp)
	{
		var service = {};

		service.apiPath = '../ws/rs/faxInbound';

		service.getNextPullTime = function getNextPullTime()
		{
			var deferred = $q.defer();
			var config = Juno.Common.ServiceHelper.configHeaders();

			junoHttp.get(service.apiPath + '/getNextPullTime', config).then(
				function success(response)
				{
					deferred.resolve(response.data);
				},
				function error(error)
				{
					console.log("faxService::getNextPullTime error", error);
					deferred.reject("An error occurred while getting scheduled pull time");
				});
			return deferred.promise;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/faxOutboundService.js":
/*!***************************************************!*\
  !*** ./src/common/services/faxOutboundService.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

    Copyright (c) 2012-2018. CloudPractice Inc. All Rights Reserved.
    This software is published under the GPL GNU General Public License.
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    This software was written for
    CloudPractice Inc.
    Victoria, British Columbia
    Canada

 */

angular.module("Common.Services").service("faxOutboundService", [
	'$q',
	'junoHttp',
	function($q, junoHttp)
	{
		var service = {};

		service.apiPath = '../ws/rs/faxOutbound';

		service.resendOutboundFax = function resendFax(id)
		{
			var deferred = $q.defer();

			junoHttp.put(service.apiPath + '/' + id + '/resend').then(
				function success(response)
				{
					deferred.resolve(response.data);
				},
				function error(error)
				{
					console.log("faxService::resendFax error", error);
					deferred.reject("An error occurred while resending a fax");
				});
			return deferred.promise;
		};


		service.getNextPushTime = function getNextPushTime()
		{
			var deferred = $q.defer();
			var config = Juno.Common.ServiceHelper.configHeaders();

			junoHttp.get(service.apiPath + '/getNextPushTime', config).then(
				function success(response)
				{
					deferred.resolve(response.data);
				},
				function error(error)
				{
					console.log("faxService::getNextPushTime error", error);
					deferred.reject("An error occurred while getting scheduled push time");
				});
			return deferred.promise;
		};

		/* provide the endpoint url for downloading the faxed pdf document */
		service.getDownloadUrl = function(id)
		{
			return service.apiPath + '/' + id + '/download';
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/fieldHelperService.js":
/*!***************************************************!*\
  !*** ./src/common/services/fieldHelperService.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

angular.module('Common.Services').factory(
	'fieldHelperService',
	[
		'$timeout',

		function(
			$timeout
		)
		{
			var helper = {};

			helper.default_scope = {

				form_group_class: '@caFormGroupClass',
				label_size: '@caLabelSize',
				input_size: '@caInputSize',
				text_length: '@caTextLength',
				hide_label_colon: '@caTitleNoColon',
				template: '@caTemplate',

				name: '@caName',

				title: '@caTitle',
				hint: '@caHint',

				tab_index: '@caTabindex',

				error_message: '@caError',
				warning_message: '@caWarning',

				depends_on_field: '@caDependsOnField',
				depends_on_value: '@caDependsOnValue',

				model: '=caModel',
				disabled: '=caDisabled',
				hide: '=caHide',
				focus_field: '=caFocusField',

				on_focus_fn: '&caFocus',
				change_fn: '&caChange',
				blur_fn: '&caBlur'
			};

			helper.resolve_template = function(attributes, base_default_template)
			{
				// if tag has a ca-template on it, add it to the template path
				if(Juno.Common.Util.exists(attributes['caTemplate']))
				{
					return base_default_template + '_' + attributes['caTemplate'] + '.jsp';
				}
				return base_default_template + '.jsp';
			};

			helper.merge_title_messages = function merge_title_messages($scope)
			{
				// Merge error and warning records so they both can be displayed in the hover over
				$scope.title_array = [];
				if(Juno.Common.Util.exists($scope.error_message))
				{
					$scope.title_array.push($scope.error_message);
				}
				if(Juno.Common.Util.exists($scope.warning_message))
				{
					$scope.title_array.push($scope.warning_message);
				}

				if($scope.title_array.length == 0 && Juno.Common.Util.exists($scope.hint))
				{
					$scope.title_array.push($scope.hint);
				}
				$scope.title_string = $scope.title_array.join('|');
			};

			helper.default_link_function = function default_link_function(
				$scope, element, attribute, controller)
			{
				helper.merge_title_messages($scope);
				$scope.focus_fn = function on_focus()
				{
					if(angular.isFunction($scope.on_focus_fn))
					{
						// only call the focus function if the field still has focus after a timeout
						$timeout(function() {
							if(($(element).is("input:enabled, select:enabled, textarea:enabled") &&
								$(element).is(':focus')) ||
								$(element).find(" input:enabled, select:enabled, textarea:enabled ").is(':focus'))
							{
								$scope.on_focus_fn();
							}
							else
							{
								console.log('ignoring on focus function - element is no longer in focus', $scope.name)
							}
						});
					}
				};

				// watch the focus field: when it matches the name, focus the element
				$scope.$watch('focus_field', function()
				{
					if(Juno.Common.Util.exists($scope.name) &&
						$scope.focus_field == $scope.name)
					{
						// Focus and select the input element
						$timeout(function()
						{
							if($(element).is("input:enabled, select:enabled, textarea:enabled"))
							{
								$(element).focus().select();
							}
							else
							{
								$(element).find(
									"input:enabled, select:enabled, textarea:enabled").first().focus().select();
							}
						});
					}
				});

				// listen for focusCaFocusField event: when it matches, focus the element
				$scope.$on('focusCaFocusField', function(e, focus)
				{
					if(Juno.Common.Util.exists($scope.name) && $scope.name == focus)
					{
						if($(element).is("input:enabled, select:enabled, textarea:enabled"))
						{
							$(element).focus().select();
						}
						else
						{
							$(element).find(
								"input:enabled, select:enabled, textarea:enabled").first().focus().select();
						}
					}
				});
			};

			helper.default_controller = ['$scope', '$element', '$attrs', function default_controller($scope, $element, $attrs)
			{
				// These field directives have a built-in handling of the focus field,
				// so this tells the caFocusField directive to ignore them.
				this.ignore_focus_field = function ignore_focus_field()
				{
					return true;
				}
			}];

			return helper;
		}]);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/common/services/focusService.js":
/*!*********************************************!*\
  !*** ./src/common/services/focusService.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

angular.module('Common.Services').factory(
	'focusService',

	[
		'$timeout',
		'$window',

		function (
			$timeout, $window
		)
		{
			var focus = {};

			// focuses element
			focus.element = function element(selector)
			{
				$timeout(function()
				{
					$(selector).focus();
				});
			};

			// focuses first visible and enabled form input
			// if selector is provided, only looks within that selector
			focus.first_form_input = function first_form_element(selector)
			{
				if(!selector)
				{
					selector = "form:visible:first";
				}

				$timeout(function()
				{
					$(selector + " input:enabled, " +
						selector + " select:enabled, " +
						selector + " textarea:enabled ").first().focus();
				});
			};

			// focuses first 'has-error' form input and scrolls to alert
			// if opts['selector'] is provided, only looks within that selector
			// if opts['scroll_offset'] is provided, used in first_alert
			focus.first_error_input = function first_error_input(opts)
			{
				if(!angular.isObject(opts))
				{
					opts = {};
				}
				var selector = opts['selector'] || '';
				$timeout(function()
				{
					$(selector + " .has-error:first input:enabled, " +
						selector + " .has-error:first select:enabled, " +
						selector + " .has-error:first textarea:enabled ").first().focus();
					focus.first_alert(opts);
				});
			};

			// scrolls to the first visible alert (not actually a focus)
			// if modal is open, will just scroll to top of modal
			// if opts['selector'] is provided, only looks within that selector
			// if opts['scroll_offset'] is provided, scrolls to that offset above alert
			focus.first_alert = function first_alert(opts)
			{
				if(!angular.isObject(opts))
				{
					opts = {};
				}
				var selector = opts['selector'] || '';
				var scroll_offset = opts['scroll_offset'];

				if(!scroll_offset || scroll_offset < 0)
				{
					scroll_offset = 10;
				}

				$timeout(function()
				{
					if($('body').hasClass('modal-open'))
					{
						// there's a modal open - scroll to the top
						$('.modal').animate({ scrollTop: 0 });
					}
					else
					{
						// no modal open - scroll to just above the first alert
						$('html, body').animate({
							scrollTop: $(selector + " .alert:visible:first").offset().top - scroll_offset
						}, 500);
					}
				});
			};

			return focus;

		}]);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/common/services/formService.js":
/*!********************************************!*\
  !*** ./src/common/services/formService.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Services").service("formService", [
	'$http', '$q', 'junoHttp',
	function($http, $q, junoHttp)
	{
		var service = {};

		service.apiPath = '../ws/rs/forms';

		service.getAllFormsByHeading = function getAllFormsByHeading(demographicNo, heading)
		{
			var deferred = $q.defer();
			$http.get(service.apiPath + '/' + encodeURIComponent(demographicNo) +
				'/all?heading=' + encodeURIComponent(heading),
				Juno.Common.ServiceHelper.configHeaders()).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("formService::getAllFormsByHeading error", errors);
					deferred.reject("An error occurred while fetching forms");
				});

			return deferred.promise;
		};

		service.getAllEncounterForms = function getAllEncounterForms()
		{
			var deferred = $q.defer();
			$http.get(service.apiPath + '/allEncounterForms',
				Juno.Common.ServiceHelper.configHeaders()).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("formService::getAllEncounterForms error", errors);
					deferred.reject("An error occurred while fetching encounter forms");
				});

			return deferred.promise;
		};

		service.getSelectedEncounterForms = function getSelectedEncounterForms()
		{
			var deferred = $q.defer();
			$http.get(service.apiPath + '/selectedEncounterForms',
				Juno.Common.ServiceHelper.configHeaders()).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("formService::getSelectedEncounterForms error", errors);
					deferred.reject("An error occurred while fetching selected encounter forms");
				});

			return deferred.promise;
		};

		service.getCompletedEncounterForms = function getCompletedEncounterForms(demographicNo)
		{
			var deferred = $q.defer();
			junoHttp.get(service.apiPath + '/' + demographicNo + '/completedEncounterForms',
				Juno.Common.ServiceHelper.configHeaders()).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("formService::getCompletedEncounterForms error", errors);
					deferred.reject("An error occurred while fetching completed encounter forms");
				});

			return deferred.promise;
		};

		service.getAllEForms = function getAllEForms()
		{
			var deferred = $q.defer();
			$http.get(service.apiPath + '/allEForms',
				Juno.Common.ServiceHelper.configHeaders()).then(
				function success(results)
				{
					deferred.resolve(results.data.content);
				},
				function error(errors)
				{
					console.log("formService::getAllEForms error", errors);
					deferred.reject("An error occurred while fetching eforms");
				});

			return deferred.promise;
		};

		service.getGroupNames = function getGroupNames()
		{
			var deferred = $q.defer();
			$http.get(service.apiPath + '/groupNames',
				Juno.Common.ServiceHelper.configHeaders()).then(
				function success(results)
				{
					deferred.resolve(results.data.content);
				},
				function error(errors)
				{
					console.log("formService::getGroupNames error", errors);
					deferred.reject("An error occurred while fetching group names");
				});

			return deferred.promise;
		};

		service.getFormGroups = function getFormGroups()
		{
			var deferred = $q.defer();
			$http.get(service.apiPath + '/getFormGroups',
				Juno.Common.ServiceHelper.configHeaders()).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("formService::getFormGroups error", errors);
					deferred.reject("An error occurred while fetching form groups");
				});

			return deferred.promise;
		};

		service.getFavouriteFormGroup = function getFavouriteFormGroup()
		{
			var deferred = $q.defer();
			$http.get(service.apiPath + '/getFavouriteFormGroup',
				Juno.Common.ServiceHelper.configHeaders()).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("formService::getFavouriteFormGroup error", errors);
					deferred.reject("An error occurred while fetching favourite form groups");
				});

			return deferred.promise;
		};

		service.getFormOptions = function getFormOptions(demographicNo)
		{
			var deferred = $q.defer();
			$http.get(service.apiPath + '/' + encodeURIComponent(demographicNo) + '/formOptions',
				Juno.Common.ServiceHelper.configHeaders()).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("formService::getFormOptions error", errors);
					deferred.reject("An error occurred while fetching form options");
				});

			return deferred.promise;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/globalStateService.js":
/*!***************************************************!*\
  !*** ./src/common/services/globalStateService.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

	Copyright (c) 2012-2018. CloudPractice Inc. All Rights Reserved.
    This software is published under the GPL GNU General Public License.
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

	This software was written for
	CloudPractice Inc.
	Victoria, British Columbia
	Canada

 */
angular.module("Common.Services").service("globalStateService", [
	function()
	{
		var service = {
				global_settings: {
					interface_preferences: {
						scheduler_license_key: ""
					}
				}
		};

		return service;
	}
]);


/***/ }),

/***/ "./src/common/services/inboxService.js":
/*!*********************************************!*\
  !*** ./src/common/services/inboxService.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */

angular.module("Common.Services").service("inboxService", [
	'$http', '$q',
	function($http, $q)
	{
		var service = {};

		service.apiPath = '../ws/rs/inbox';

		service.getDashboardItems = function getDashboardItems(limit)
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + '/mine?limit=' + encodeURIComponent(limit),
				method: "GET",
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("inboxService::getDashboardItems error", errors);
					deferred.reject("An error occured while getting inbox content");
				});

			return deferred.promise;
		};

		service.getUnAckLabDocCount = function getUnAckLabDocCount()
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + '/mine/count',
				method: "GET",
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("inboxService::getUnAckLabDocCount error", errors);
					deferred.reject("An error occured while getting inbox content");
				});
			return deferred.promise;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/k2aService.js":
/*!*******************************************!*\
  !*** ./src/common/services/k2aService.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */

angular.module("Common.Services").service("k2aService", [
	'$q',
	'junoHttp',
	function($q, junoHttp)
	{
		var service = {};

		service.apiPath = '../ws/rs';

		service.getK2aFeed = function getK2aFeed(startPoint, numberOfRows)
		{
			var deferred = $q.defer();
			var config = Juno.Common.ServiceHelper.configHeaders();
			config.params = {
				key:'k2a',
				startPoint:encodeURIComponent(startPoint),
				numberOfRows:encodeURIComponent(numberOfRows)
			};

			junoHttp.get(service.apiPath + '/rssproxy/rss', config).then(
				function success(response) {
					deferred.resolve(response.data);
				},
				function error(error) {
					console.log("k2aService::getK2aFeed error", error);
					deferred.reject("An error occured while getting k2a content");
				});
			return deferred.promise;
		};

		service.isK2AInit = function isK2AInit()
		{
			var deferred = $q.defer();
			var config = Juno.Common.ServiceHelper.configHeaders();

			junoHttp.get(service.apiPath + '/app/K2AActive', config).then(
				function success(response)
				{
					deferred.resolve(response.data);
				},
				function error(error)
				{
					console.log("k2aService::isK2AInit error", error);
					deferred.reject("An error occured while getting k2a content");
				});

			return deferred.promise;
		};

		service.initK2A = function initK2A(clinicName)
		{
			var deferred = $q.defer();
			var transferObj = {
				name: clinicName
			};

			junoHttp.post(service.apiPath + '/app/K2AInit', transferObj).then(
				function success(response)
				{
					deferred.resolve(response.data);
				},
				function error(error)
				{
					console.log("k2aService::initK2A error", error);
					deferred.reject("An error occured while trying to initialize k2a");
				});

			return deferred.promise;
		};

		service.postK2AComment = function postK2AComment(post)
		{
			var deferred = $q.defer();

			var commentItem = {
				post:post
			};
			junoHttp.post(service.apiPath + '/app/comment', commentItem).then(
				function success(response)
				{
					deferred.resolve(response.data);
				},
				function error(error)
				{
					console.log("k2aService::postK2AComment error", error);
					deferred.reject("An error occured while trying to post a comment to k2a");
				});

			return deferred.promise;
		};

		service.removeK2AComment = function removeK2AComment(commentId)
		{
			var deferred = $q.defer();

			junoHttp.del(service.apiPath + '/app/comment/' + encodeURIComponent(commentId)).then(
				function success(response)
				{
					deferred.resolve(response.data);
				},
				function error(error)
				{
					console.log("k2aService::removeK2AComment error", error);
					deferred.reject("An error occured while trying to remove a comment from k2a");
				});

			return deferred.promise;
		};

		service.preventionRulesList = function preventionRulesList()
		{
			var deferred = $q.defer();

			junoHttp.get(service.apiPath + '/resources/preventionRulesList',
				Juno.Common.ServiceHelper.configHeaders()).then(
				function success(response)
				{
					deferred.resolve(response.data);
				},
				function error(error)
				{
					console.log("k2aService::preventionRulesList error", error);
					deferred.reject("An error occured while trying to remove a comment from k2a");
				});

			return deferred.promise;
		};

		service.loadPreventionRuleById = function loadPreventionRuleById(id)
		{
			var deferred = $q.defer();

			junoHttp.post(service.apiPath + '/resources/loadPreventionRulesById/' +
				encodeURIComponent(id.id), id).then(
				function success(response)
				{
					deferred.resolve(response.data);
				},
				function error(error)
				{
					console.log("k2aService::loadPreventionRuleById error", error);
					deferred.reject("An error occured while trying to loadPreventionRulesById");
				});

			return deferred.promise;
		};

		service.getCurrentPreventionRulesVersion = function getCurrentPreventionRulesVersion()
		{
			var deferred = $q.defer();
			junoHttp.get(service.apiPath + '/resources/currentPreventionRulesVersion',
				Juno.Common.ServiceHelper.configHeaders()).then(
				function success(response)
				{
					deferred.resolve(response.data);
				},
				function error(error)
				{
					console.log("k2aService::getCurrentPreventionRulesVersion error", error);
					deferred.reject("An error occured while trying to getCurrentPreventionRulesVersion");
				});

			return deferred.promise;
		};

		service.getNotifications = function getNotifications()
		{
			var deferred = $q.defer();
			junoHttp.get(service.apiPath + '/resources/notifications',
				Juno.Common.ServiceHelper.configHeaders()).then(
				function success(response)
				{
					deferred.resolve(response.data);
				},
				function error(error)
				{
					console.log("k2aService::getNotifications error", error);
					deferred.reject("An error occured while trying to getNotifications");
				});

			return deferred.promise;
		};

		service.getMoreNotification = function getMoreNotification(id)
		{
			var deferred = $q.defer();

			junoHttp.post(service.apiPath + '/resources/notifications/readmore',
				id, Juno.Common.ServiceHelper.configHeaders()).then(
				function success(response)
				{
					deferred.resolve(response.data);
				},
				function error(error)
				{
					console.log("k2aService::getMoreNotification error", error);
					deferred.reject("An error occured while trying to /resources/notifications/readmore");
				});

			return deferred.promise;
		};

		service.ackNotification = function ackNotification(id)
		{
			var deferred = $q.defer();
			junoHttp.post(service.apiPath + '/resources/notifications/' + id + '/ack',
				Juno.Common.ServiceHelper.configHeaders()).then(
				function success(response)
				{
					deferred.resolve(response.data);
				},
				function error(error)
				{
					console.log("k2aService::ackNotification error", error);
					deferred.reject("An error occured while trying to /resources/notifications/ack");
				});

			return deferred.promise;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/messageService.js":
/*!***********************************************!*\
  !*** ./src/common/services/messageService.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */

angular.module("Common.Services").service("messageService", [
	'$http', '$q',
	function($http, $q)
	{
		var service = {};

		service.apiPath = '../ws/rs/messaging';

		service.getUnread = function getUnread(limit)
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + '/unread?startIndex=0&limit=' + encodeURIComponent(limit),
				method: "GET",
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("messageService::getUnread error", errors);
					deferred.reject("An error occurred while getting messages");
				});

			return deferred.promise;
		};

		service.getUnreadCount = function getUnreadCount()
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + '/count',
				method: "GET",
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("messageService::getUnreadCount error", errors);
					deferred.reject("An error occurred while getting messages");
				});

			return deferred.promise;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/module.js":
/*!***************************************!*\
  !*** ./src/common/services/module.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */

angular.module('Common.Services', ['Common.Util']);

/***/ }),

/***/ "./src/common/services/noteService.js":
/*!********************************************!*\
  !*** ./src/common/services/noteService.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Services").service("noteService", [
	'$http',
	'$q',
	'junoHttp',
	function(
		$http,
		$q,
		junoHttp)
	{
		var service = {};

		service.apiPath = '../ws/rs/notes';

		service.getNotesFrom = function getNotesFrom(demographicNo, offset, numberToReturn, noteConfig)
		{
			var deferred = $q.defer();

			var config = Juno.Common.ServiceHelper.configHeaders();
			config.params = {
				offset: encodeURIComponent(offset),
				numToReturn: encodeURIComponent(numberToReturn),
				noteConfig: noteConfig
			};

			junoHttp.post(service.apiPath + '/' + encodeURIComponent(demographicNo) + '/all', config).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("noteService::getNotesFrom error", errors);
					deferred.reject("An error occurred while fetching notes");
				});

			return deferred.promise;
		};

		service.saveNote = function saveNote(demographicNo, note)
		{
			var deferred = $q.defer();

			junoHttp.post(service.apiPath + '/' + encodeURIComponent(demographicNo) +
				'/save', note).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("noteService::saveNote error", errors);
					deferred.reject("An error occurred while saving note");
				});

			return deferred.promise;
		};

		service.saveIssueNote = function saveIssueNote(demographicNo, note)
		{
			var deferred = $q.defer();

			$http.post(service.apiPath + '/' + encodeURIComponent(demographicNo) +
				'/saveIssueNote', note).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("noteService::saveIssueNote error", errors);
					deferred.reject("An error occurred while saving issue note");
				});

			return deferred.promise;
		};

		service.getCurrentNote = function getCurrentNote(demographicNo, config)
		{
			var deferred = $q.defer();

			$http.post(service.apiPath + '/' + encodeURIComponent(demographicNo) +
				'/getCurrentNote', config).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("noteService::getCurrentNote error", errors);
					deferred.reject("An error occurred while fetching current note");
				});

			return deferred.promise;
		};

		service.tmpSave = function tmpSave(demographicNo, note)
		{
			var deferred = $q.defer();

			$http.post(service.apiPath + '/' +
				encodeURIComponent(demographicNo) + '/tmpSave', note).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("noteService::tmpSave error", errors);
					deferred.reject("An error occurred while posting tmp save");
				});

			return deferred.promise;
		};

		service.getNoteExt = function getNoteExt(noteId)
		{
			var deferred = $q.defer();

			$http.get(service.apiPath + '/getGroupNoteExt/' + encodeURIComponent(noteId)).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("noteService::getNoteExt error", errors);
					deferred.reject("An error occurred while fetching note ext");
				});

			return deferred.promise;
		};

		service.getIssueNote = function getIssueNote(noteId)
		{
			var deferred = $q.defer();

			junoHttp.get(service.apiPath + '/getIssueNote/' + encodeURIComponent(noteId),
				Juno.Common.ServiceHelper.configHeaders()).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("noteService::getIssueNote error", errors);
					deferred.reject("An error occurred while fetching issue note");
				});

			return deferred.promise;
		};

		service.getIssueId = function getIssueId(issueCode)
		{
			var deferred = $q.defer();

			$http.get(service.apiPath + '/getIssueId/' + encodeURIComponent(issueCode)).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("noteService::getIssueId error", errors);
					deferred.reject("An error occurred while fetching issue id");
				});

			return deferred.promise;
		};

		service.getTicklerNote = function getTicklerNote(ticklerId)
		{
			var deferred = $q.defer();

			$http.get(service.apiPath + '/ticklerGetNote/' + encodeURIComponent(ticklerId),
			{
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("noteService::getTicklerNote error", errors);
					deferred.reject("An error occurred while fetching tickler note");
				});

			return deferred.promise;
		};

		service.saveTicklerNote = function saveTicklerNote(ticklerNote)
		{
			var deferred = $q.defer();
			$http(
			{
				url: service.apiPath + '/ticklerSaveNote',
				method: "POST",
				data: JSON.stringify(ticklerNote),
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("noteService::saveTicklerNote error", errors);
					deferred.reject("An error occurred while saving tickler note");
				});

			return deferred.promise;
		};

		service.searchIssues = function searchIssues(search, startIndex, itemsToReturn)
		{
			var deferred = $q.defer();

			$http.post(service.apiPath + '/searchIssues?startIndex=' +
				encodeURIComponent(startIndex) + "&itemsToReturn=" +
				encodeURIComponent(itemsToReturn), search).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("noteService::searchIssues error", errors);
					deferred.reject("An error occurred while searching issues");
				});

			return deferred.promise;
		};

		service.getIssue = function getIssue(issueId)
		{
			var deferred = $q.defer();

			$http.post(service.apiPath + '/getIssueById/' + encodeURIComponent(issueId)).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("noteService::getIssue error", errors);
					deferred.reject("An error occurred while fetching issue");
				});

			return deferred.promise;
		};

		service.setEditingNoteFlag = function setEditingNoteFlag(noteUUID, userId)
		{
			var deferred = $q.defer();

			$http.post(service.apiPath + '/setEditingNoteFlag?noteUUID=' +
				encodeURIComponent(noteUUID) + "&userId=" +
				encodeURIComponent(userId)).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("noteService::setEditingNoteFlag error", errors);
					deferred.reject("An error occurred while setting editing note flag");
				});

			return deferred.promise;
		};

		service.checkEditNoteNew = function checkEditNoteNew(noteUUID, userId)
		{
			var deferred = $q.defer();

			$http.post(service.apiPath + '/checkEditNoteNew?noteUUID=' +
				encodeURIComponent(noteUUID) + "&userId=" +
				encodeURIComponent(userId)).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("noteService::checkEditNoteNew error", errors);
					deferred.reject("An error occurred while checking edit note new");
				});

			return deferred.promise;
		};

		service.removeEditingNoteFlag = function removeEditingNoteFlag(noteUUID, userId)
		{
			var deferred = $q.defer();

			$http.post(service.apiPath + '/removeEditingNoteFlag?noteUUID=' +
				encodeURIComponent(noteUUID) + "&userId=" +
				encodeURIComponent(userId)).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("noteService::removeEditingNoteFlag error", errors);
					deferred.reject("An error occurred while removing editing note flag");
				});

			return deferred.promise;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/patientDetailStatusService.js":
/*!***********************************************************!*\
  !*** ./src/common/services/patientDetailStatusService.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Services").service("patientDetailStatusService", [
	'$http', '$q',
	function($http, $q)
	{

		var service = {};

		service.apiPath = '../ws/rs/patientDetailStatusService';

		service.getStatus = function getStatus(demographicNo)
		{
			var deferred = $q.defer();
			$http.get(service.apiPath + "/getStatus?demographicNo=" + encodeURIComponent(demographicNo),
				Juno.Common.ServiceHelper.configHeaders()).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("patientDetailStatusService::getStatus error", errors);
					deferred.reject("An error occurred while fetching status");
				});

			return deferred.promise;
		};

		service.validateHC = function validateHC(healthCardNo, versionCode)
		{
			var deferred = $q.defer();
			$http.get(service.apiPath + "/validateHC?hin=" + encodeURIComponent(healthCardNo) +
				"&ver=" + encodeURIComponent(versionCode),
				Juno.Common.ServiceHelper.configHeaders()).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("patientDetailStatusService::validateHC error", errors);
					deferred.reject("An error occurred while fetching health card validation info");
				});

			return deferred.promise;
		};

		service.isUniqueHC = function isUniqueHC(healthCardNo, demographicNo)
		{
			var deferred = $q.defer();
			$http.get(service.apiPath + "/isUniqueHC?hin=" +
				encodeURIComponent(healthCardNo) + "&demographicNo=" +
				encodeURIComponent(demographicNo),
				Juno.Common.ServiceHelper.configHeaders()).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("patientDetailStatusService::isUniqueHC error", errors);
					deferred.reject("An error occurred while checking health card uniqueness");
				});

			return deferred.promise;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/personaService.js":
/*!***********************************************!*\
  !*** ./src/common/services/personaService.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Services").service("personaService", [
	'$http', '$q',
	function($http, $q)
	{
		var service = {};

		service.apiPath = '../ws/rs/persona';

		service.getDashboardMenu = function getDashboardMenu()
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + '/dashboardMenu',
				method: "GET",
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("personaService::getDashboardMenu error", errors);
					deferred.reject("An error occured while getting the dashboard menu from persona");
				});

			return deferred.promise;
		};

		service.getNavBar = function getNavBar()
		{
			var deferred = $q.defer();
			$http(
			{
				url: service.apiPath + '/navbar',
				method: "GET",
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("personaService::getNavBar error", errors);
					deferred.reject("An error occured while getting navbar from persona");
				});

			return deferred.promise;
		};

		service.getPatientListConfig = function getPatientListConfig()
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + '/patientList/config',
				method: "GET",
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("personaService::getPatientListConfig error", errors);
					deferred.reject("An error occured while getting getPatientListConfig from persona");
				});

			return deferred.promise;
		};

		service.setPatientListConfig = function setPatientListConfig(patientListConfig)
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + '/patientList/config',
				method: "POST",
				data: patientListConfig,
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(result)
				{
					deferred.resolve(result.data);
				},
				function error(errors)
				{
					console.log("personaService::setPatientListConfig error", errors);
					deferred.reject("An error occured while setting setPatientListConfig from persona");
				});

			return deferred.promise;
		};

		service.setCurrentProgram = function setCurrentProgram(programId)
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath +
					'/setDefaultProgramInDomain?programId=' +
					encodeURIComponent(programId),
				method: "GET",
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(result)
				{
					deferred.resolve(result.data);
				},
				function error(errors)
				{
					console.log("personaService::setCurrentProgram error", errors);
					deferred.reject("An error occured while setting current");
				});

			return deferred.promise;
		};

		service.getDashboardPreferences = function getDashboardPreferences()
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + '/preferences',
				method: "POST",
				data:
				{
					type: 'dashboard'
				},
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(result)
				{
					deferred.resolve(result.data);
				},
				function error(errors)
				{
					console.log("personaService::getDashboardPreferences error", errors);
					deferred.reject("An error occured while getting preferences from persona");
				});

			return deferred.promise;
		};

		service.updateDashboardPreferences = function updateDashboardPreferences(prefs)
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + '/updatePreferences',
				method: "POST",
				data: JSON.stringify(prefs),
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(result)
				{
					deferred.resolve(result.data);
				},
				function error(errors)
				{
					console.log("personaService::updateDashboardPreferences error", errors);
					deferred.reject("An error occured while updating preferences");
				});
			return deferred.promise;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/programService.js":
/*!***********************************************!*\
  !*** ./src/common/services/programService.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Services").service("programService", [
	'$http', '$q',
	function($http, $q)
	{
		var service = {};

		service.apiPath = '../ws/rs/';

		service.getPrograms = function getPrograms()
		{
			var deferred = $q.defer();

			$http.get(service.apiPath + 'program/programList',
				Juno.Common.ServiceHelper.configHeadersWithCache()).then(
				function success(results)
				{
					console.log(results.data);
					deferred.resolve(results.data.content);
				},
				function error(errors)
				{
					console.log("error fetching program list:", errors);
					deferred.reject("An error occured while fetching program list");
				});

			return deferred.promise;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/providerService.js":
/*!************************************************!*\
  !*** ./src/common/services/providerService.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */

angular.module("Common.Services").service("providerService", [
	'$http',
	'$q',
	'junoHttp',
	function($http, $q, junoHttp)
	{

		var service = {};

		service.apiPath = '../ws/rs/providerService';

		service.getMe = function getMe()
		{
			var deferred = $q.defer();

			$http.get(service.apiPath + '/provider/me', service.configHeaders).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("providerService::getMe error", errors);
					deferred.reject("An error occured while getting user data");
				});

			return deferred.promise;
		};

		service.getProvider = function getProvider(id)
		{
			var deferred = $q.defer();

			$http.get(service.apiPath + '/provider/' + encodeURIComponent(id),
				service.configHeaders).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("providerService::getProvider error", errors);
					deferred.reject("An error occured while getting user data");
				});

			return deferred.promise;
		};

		service.searchProviders = function searchProviders(filter)
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + '/providers/search',
				method: "POST",
				data: JSON.stringify(filter),
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data.content);
				},
				function error(errors)
				{
					console.log("providerService::searchProviders error", errors);
					deferred.reject("An error occured while fetching provider list");
				});

			return deferred.promise;
		};

		service.getSettings = function getSettings()
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + '/settings/get',
				method: "GET"
			}).then(
				function success(results)
				{
					deferred.resolve(results.data.content[0]);
				},
				function error(errors)
				{
					console.log("providerService::getSettings error", errors);
					deferred.reject("An error occured while fetching provider settings");
				});

			return deferred.promise;
		};

		service.saveSettings = function saveSettings(providerNo, settings)
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + '/settings/' + providerNo + '/save',
				method: "POST",
				data: JSON.stringify(settings),
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("providerService::saveSettings error", errors);
					deferred.reject("An error occured while saving settings");
				});

			return deferred.promise;
		};

		service.getActiveTeams = function getActiveTeams()
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + '/getActiveTeams',
				method: "GET"
			}).then(
				function success(results)
				{
					deferred.resolve(results.data.content);
				},
				function error(errors)
				{
					console.log("providerService::getActiveTeams error", errors);
					deferred.reject("An error occured while fetching provider teams");
				});

			return deferred.promise;
		};

		service.getRecentPatientList = function getRecentPatientList()
		{
			var deferred = $q.defer();
			var config = Juno.Common.ServiceHelper.configHeaders();

			junoHttp.get(service.apiPath + '/getRecentDemographicsViewed', config).then(
				function success(response) {
					deferred.resolve(response.data);
				},
				function error(error) {
					console.log("providerService::getRecentDemographicsViewed error", error);
					deferred.reject("An error occurred while getting RecentDemographicsViewed");
				});
			return deferred.promise;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/providersService.js":
/*!*************************************************!*\
  !*** ./src/common/services/providersService.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */

angular.module("Common.Services").service("providersService", [
	'$q',
	'junoHttp',
	function($q, junoHttp)
	{
		var service = {};

		service.apiPath = '../ws/rs/providers';

		service.search = function search(searchText, searchMode, page, perPage)
		{
			var deferred = $q.defer();

			var config = Juno.Common.ServiceHelper.configHeaders();
			config.params = {
				searchText: searchText,
				searchMode: searchMode,
				page: page,
				perPage: perPage
			};

			junoHttp.get(service.apiPath, config).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("providersService::search error", errors);
					deferred.reject("An error occurred while getting providers data");
				});

			return deferred.promise;
		};

		service.getBySecurityRole = function getBySecurityRole(role)
		{
			var deferred = $q.defer();

			var config = Juno.Common.ServiceHelper.configHeaders();
			config.params = {
				role: role
			};

			junoHttp.get(service.apiPath + '/bySecurityRole', config).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("providersService::getBySecurityRole error", errors);
					deferred.reject("An error occurred while getting providers data");
				});

			return deferred.promise;
		};

		service.getByType = function getByProviderType(type)
		{
			var deferred = $q.defer();

			var config = Juno.Common.ServiceHelper.configHeaders();
			config.params = {
				type: type
			};

			junoHttp.get(service.apiPath + '/byType', config).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("providersService::getByType error", errors);
					deferred.reject("An error occurred while getting providers data");
				});

			return deferred.promise;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/referralDoctorsService.js":
/*!*******************************************************!*\
  !*** ./src/common/services/referralDoctorsService.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Services").service("referralDoctorsService", [
	'$q',
	'junoHttp',
	function($q,junoHttp)
	{
		var service = {};

		service.apiPath = '../ws/rs/referralDoctors/';

		service.searchReferralDoctors = function searchReferralDoctors(searchName, searchRefNo, page, perPage)
		{
			var deferred = $q.defer();
			var config = Juno.Common.ServiceHelper.configHeaders();
			config.params = {
				searchName: searchName,
				searchRefNo:searchRefNo,
				page:page,
				perPage:perPage
			};
			junoHttp.get(service.apiPath, config).then(
				function success(response) {
					deferred.resolve(response.data);
				},
				function error(error) {
					console.log("ReferralDoctorsService::searchReferralDoctors error", error);
					deferred.reject("An error occurred while searching ReferralDoctors");
				});
			return deferred.promise;
		};
		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/reportByTemplateService.js":
/*!********************************************************!*\
  !*** ./src/common/services/reportByTemplateService.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Services").service("reportByTemplateService", [
	'$http',
	'$q',
	'junoHttp',
	function($http,
	         $q,
	         junoHttp)
	{
		var service = {};

		service.apiPath = '../ws/rs';

		service.isK2AInit = function isK2AInit()
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + '/reportByTemplate/K2AActive',
				method: "GET",
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("reportByTemplateService::isK2AInit error", errors);
					deferred.reject("An error occurred while fetching k2a content");
				});

			return deferred.promise;
		};

		service.getAllK2AReports = function getAllK2AReports()
		{
			var deferred = $q.defer();

			var config = Juno.Common.ServiceHelper.configHeaders();
			junoHttp.get(service.apiPath + '/reportByTemplate/allReports', config).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("reportByTemplateService::getAllK2AReports error", errors);
					deferred.reject("An error occurred while fetching k2a reports");
				});

			return deferred.promise;
		};

		service.getK2AReportById = function getK2AReportById(id)
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + '/reportByTemplate/getReportById/' + encodeURIComponent(id),
				method: "POST",
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("reportByTemplateService::getK2AReportById error", errors);
					deferred.reject("An error occurred while fetching k2a report");
				});

			return deferred.promise;
		};

		service.getK2AUrl = function getK2AUrl()
		{
			var deferred = $q.defer();

			var config = Juno.Common.ServiceHelper.configHeaders();
			junoHttp.get(service.apiPath + '/reportByTemplate/K2AUrl/', config).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("reportByTemplateService::getK2AUrl error", errors);
					deferred.reject("An error occurred while fetching k2a url");
				});

			return deferred.promise;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/reportingService.js":
/*!*************************************************!*\
  !*** ./src/common/services/reportingService.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

    Copyright (c) 2012-2018. CloudPractice Inc. All Rights Reserved.
    This software is published under the GPL GNU General Public License.
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    This software was written for
    CloudPractice Inc.
    Victoria, British Columbia
    Canada

 */
angular.module("Common.Services").service("reportingService", [
	'$q',
	'junoHttp',
	function($q, junoHttp)
	{
		var service = {};

		service.apiPath = '../ws/rs/reporting/';

		service.getDemographicSetList = function getDemographicSetList()
		{
			var deferred = $q.defer();
			var config = Juno.Common.ServiceHelper.configHeaders();

			junoHttp.get(service.apiPath + 'demographicSets/list', config).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("reportingService::demographicSets error", errors);
					deferred.reject("An error occurred while fetching demographicSets");
				});

			return deferred.promise;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/resultsService.js":
/*!***********************************************!*\
  !*** ./src/common/services/resultsService.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Services").service("resultsService", [
	function()
	{
		var service = {};

		/*************************************************************/
		// Factory
		// @param {results_hash} Result hash from Clinicaid API
		// @param {meta_hash} Meta info hash from Clinicaid API
		/*************************************************************/
		service.factory = function factory(results_hash, meta_hash)
		{

			/*************************************************************/
			// Initialize
			/*************************************************************/
			var results_object = {
				data: {},
				meta: {},
				has_results: false,
				error_type: null
			};

			if(util.exists(results_hash) && !angular.equals(results_hash, {}))
			{
				results_object.data = results_hash;
				if(!angular.equals(results_hash, {}) && !angular.equals(results_hash, []))
				{
					results_object.has_results = true;
				}
			}
			if(util.exists(meta_hash))
			{
				results_object.meta = meta_hash;
			}
			else
			{
				results_object.meta = {};
				results_object.meta.pagination = {
					page: 1,
					per_page: 10,
					total: 0,
					total_pages: 0
				};
			}

			return results_object;
		};

		return service;
	}
]);


/***/ }),

/***/ "./src/common/services/scheduleService.js":
/*!************************************************!*\
  !*** ./src/common/services/scheduleService.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Services").service("scheduleService", [
	'$http',
	'$q',
	'junoHttp',

	function(
		$http,
		$q,
		junoHttp
	)
	{
		var service = {};

		service.apiPath = '../ws/rs/';

		service.selectedDate = null;

		service.getStatuses = function getStatuses()
		{
			var deferred = $q.defer();

			$http.get(service.apiPath + 'schedule/statuses',
				service.configHeadersWithCache).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("scheduleService::getStatuses error", errors);
					deferred.reject("An error occurred while fetching statuses");
				});

			return deferred.promise;
		};

		service.getTypes = function getTypes()
		{
			var deferred = $q.defer();

			$http.get(service.apiPath + 'schedule/types',
				Juno.Common.ServiceHelper.configHeadersWithCache()).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("scheduleService::getStatuses error", errors);
					deferred.reject("An error occurred while fetching types");
				});

			return deferred.promise;
		};

		service.getAppointments = function getAppointments(day)
		{
			var deferred = $q.defer();

			var config = Juno.Common.ServiceHelper.configHeaders();
			junoHttp.get(service.apiPath + 'schedule/day/' + encodeURIComponent(day), config).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("scheduleService::getAppointments error", errors);
					deferred.reject("An error occurred while getting appointments");
				});

			return deferred.promise;
		};

		service.addAppointment = function addAppointment(appointment)
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + 'schedule/add',
				method: "POST",
				data: JSON.stringify(appointment),
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("scheduleService::addAppointment error", errors);
					deferred.reject("An error occurred while saving appointment");
				});

			return deferred.promise;
		};

		service.getAppointment = function getAppointment(apptNo)
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + 'schedule/getAppointment',
				method: "POST",
				data:
				{
					'id': apptNo
				},
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data.appointment);
				},
				function error(errors)
				{
					console.log("scheduleService::getAppointment error", errors);
					deferred.reject("An error occurred while getting appointment");
				});

			return deferred.promise;
		};

		service.deleteAppointment = function deleteAppointment(apptNo)
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + 'schedule/deleteAppointment',
				method: "POST",
				data:
				{
					'id': apptNo
				},
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("scheduleService::deleteAppointment error", errors);
					deferred.reject("An error occurred while deleting appointment");
				});

			return deferred.promise;
		};

		service.appointmentHistory = function appointmentHistory(demoNo)
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + 'schedule/' +
					encodeURIComponent(demoNo) + "/appointmentHistory",
				method: "POST",
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("scheduleService::appointmentHistory error", errors);
					deferred.reject("An error occurred while getting appointment history");
				});

			return deferred.promise;
		};

		service.cancelAppointment = function cancelAppointment(apptNo)
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + 'schedule/appointment/' +
					encodeURIComponent(apptNo) + "/updateStatus",
				method: "POST",
				data:
				{
					status: 'C'
				},
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("scheduleService::cancelAppointment error", errors);
					deferred.reject("An error occurred while cancelling appointment");
				});

			return deferred.promise;
		};

		service.noShowAppointment = function noShowAppointment(apptNo)
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + 'schedule/appointment/' +
					encodeURIComponent(apptNo) + "/updateStatus",
				method: "POST",
				data:
				{
					status: 'N'
				},
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("scheduleService::noShowAppointment error", errors);
					deferred.reject("An error occurred while setting no show appointment");
				});

			return deferred.promise;
		};

		service.getScheduleGroups = function getScheduleGroups()
		{
			var deferred = $q.defer();

			junoHttp.get(
				service.apiPath + 'schedule/groups',
				{headers: Juno.Common.ServiceHelper.configHeaders()}
			).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("scheduleService::getScheduleGroups error", errors);
					deferred.reject();
				}
			);

			return deferred.promise;
		};

		service.getSchedulesForCalendar = function getSchedulesForCalendar(
			providerId,
			startDate,
			endDate,
			siteName
		)
		{
			var deferred = $q.defer();

			var url = service.apiPath + 'schedule/calendar/';
			url += encodeURIComponent(providerId) + '/';
			url += '?startDate=' + encodeURIComponent(startDate);
			url += '&endDate=' + encodeURIComponent(endDate);

			if(siteName != null)
			{
				url += '&site=' + encodeURIComponent(siteName);
			}

			junoHttp.get(
				url,
				{headers: Juno.Common.ServiceHelper.configHeaders()}
			).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("scheduleService::getSchedulesForCalendar error", errors);
					deferred.reject();
				}
			);

			return deferred.promise;
		};

		service.getScheduleTemplateCodes = function getAvailabilityCodes()
		{
			var deferred = $q.defer();

			junoHttp.get(
				service.apiPath + 'schedule/templateCodes',
				{headers: Juno.Common.ServiceHelper.configHeaders()}
			).then(
				function success(results)
				{

					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("scheduleService::getAvailabilityTypes error", errors);
					deferred.reject();
				}
			);

			return deferred.promise;
		};

		service.getAppointmentStatuses = function getAppointmentStatuses()
		{
			var deferred = $q.defer();

			junoHttp.get(
				service.apiPath + 'schedule/calendar/statuses',
				{headers: Juno.Common.ServiceHelper.configHeaders()}
			).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("scheduleService::getAppointmentStatuses error", errors);
					deferred.reject();
				}
			);

			return deferred.promise;
		};

		service.getSites = function getSites()
		{
			var deferred = $q.defer();

			junoHttp.get(
				service.apiPath + 'sites',
				{headers: Juno.Common.ServiceHelper.configHeaders()}
			).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("scheduleService::getSites error", errors);
					deferred.reject();
				}
			);

			return deferred.promise;
		};

		return service;
	}
]);


/***/ }),

/***/ "./src/common/services/securityService.js":
/*!************************************************!*\
  !*** ./src/common/services/securityService.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Services").service("securityService", [
	'$http', '$q',
	function($http, $q)
	{
		var service = {};

		service.apiPath = '../ws/rs/';

		service.user = null;

		service.getUser = function getUser()
		{
			return service.user;
		};

		service.setUser = function setUser(u)
		{
			service.user = u;
		};

		service.hasRight = function hasRight(objectName, privilege, demographicNo)
		{
			var deferred = $q.defer();

			var url = service.apiPath + 'persona/hasRight?objectName=' +
				encodeURIComponent(objectName) +
				'&privilege=' +
				encodeURIComponent(privilege) +
				'&demographicNo=' +
				encodeURIComponent(demographicNo);

			$http.get(url, service.configHeadersWithCache).then(
				function success(results)
				{
					deferred.resolve(results.data.success);
				},
				function error(errors)
				{
					console.log("securityService::hasRight error", errors);
					deferred.reject("An error occured while fetching access right");
				});

			return deferred.promise;
		};

		service.hasRights = function hasRights(listOfItems)
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + 'persona/hasRights',
				method: "POST",
				data: JSON.stringify(listOfItems),
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("securityService::hasRights error", errors);
					deferred.reject("An error occured while fetching access rights");
				});

			return deferred.promise;
		};

		service.isAllowedAccessToPatientRecord = function isAllowedAccessToPatientRecord(demographicNo)
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + 'persona/isAllowedAccessToPatientRecord',
				method: "POST",
				data: JSON.stringify(
				{
					"demographicNo": demographicNo
				}),
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("securityService::isAllowedAccessToPatientRecord error", errors);
					deferred.reject("An error occured while fetching access rights");
				});

			return deferred.promise;
		};

		service.hasOneOfPermissions = function hasOneOfPermissions(permission_array)
		{
			return true;
		};

		service.hasPermission = function hasPermission(permission)
		{
			return true;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/specialistsService.js":
/*!***************************************************!*\
  !*** ./src/common/services/specialistsService.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Services").service("specialistsService", [
	'$q',
	'junoHttp',
	function($q,junoHttp)
	{
		var service = {};

		service.apiPath = '../ws/rs/specialists/';

		service.searchSpecialists = function searchSpecialists(searchName, searchRefNo, page, perPage)
		{
			var deferred = $q.defer();
			var config = Juno.Common.ServiceHelper.configHeaders();
			config.params = {
				searchName: searchName,
				searchRefNo:searchRefNo,
				page:page,
				perPage:perPage
			};
			console.log("params", config.params);

			junoHttp.get(service.apiPath, config).then(
				function success(response) {
					deferred.resolve(response.data);
				},
				function error(error) {
					console.log("SpecialistsService::searchSpecialists error", error);
					deferred.reject("An error occurred while searching Specialists");
				});
			return deferred.promise;
		};
		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/staticDataService.js":
/*!**************************************************!*\
  !*** ./src/common/services/staticDataService.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Services").service("staticDataService", [
	function()
	{
		var service = {};

		service.getGenders = function getGenders()
		{
			var genders = [];
			genders.push(
			{
				"value": "M",
				"label": "Male"
			});
			genders.push(
			{
				"value": "F",
				"label": "Female"
			});
			genders.push(
			{
				"value": "T",
				"label": "Transgender"
			});
			genders.push(
			{
				"value": "O",
				"label": "Other"
			});
			genders.push(
			{
				"value": "U",
				"label": "Undefined"
			});
			return genders;
		};

		service.getTitles = function getTitles()
		{
			var titles = [];
			titles.push(
			{
				"value": "MISS",
				"label": "MISS"
			});
			titles.push(
			{
				"value": "MRS",
				"label": "MRS"
			});
			titles.push(
			{
				"value": "MS",
				"label": "MS"
			});
			titles.push(
			{
				"value": "MR",
				"label": "MR"
			});
			titles.push(
			{
				"value": "MSSR",
				"label": "MSSR"
			});
			titles.push(
			{
				"value": "DR",
				"label": "DR"
			});
			titles.push(
			{
				"value": "PROF",
				"label": "PROF"
			});
			titles.push(
			{
				"value": "REEVE",
				"label": "REEVE"
			});
			titles.push(
			{
				"value": "REV",
				"label": "REV"
			});
			titles.push(
			{
				"value": "RT_HON",
				"label": "RT_HON"
			});
			titles.push(
			{
				"value": "SEN",
				"label": "SEN"
			});
			titles.push(
			{
				"value": "SGT",
				"label": "SGT"
			});
			titles.push(
			{
				"value": "SR",
				"label": "SR"
			});
			return titles;
		};

		service.getProvinces = function getProvinces()
		{
			var provinces = [];
			provinces.push(
			{
				"value": "AB",
				"label": "AB-Alberta"
			});
			provinces.push(
			{
				"value": "BC",
				"label": "BC-British Columbia"
			});
			provinces.push(
			{
				"value": "MB",
				"label": "MB-Manitoba"
			});
			provinces.push(
			{
				"value": "NB",
				"label": "NB-New Brunswick"
			});
			provinces.push(
			{
				"value": "NL",
				"label": "NL-Newfoundland Labrador"
			});
			provinces.push(
			{
				"value": "NT",
				"label": "NT-Northwest Territory"
			});
			provinces.push(
			{
				"value": "NS",
				"label": "NS-Nova Scotia"
			});
			provinces.push(
			{
				"value": "NU",
				"label": "NU-Nunavut"
			});
			provinces.push(
			{
				"value": "ON",
				"label": "ON-Ontario"
			});
			provinces.push(
			{
				"value": "PE",
				"label": "PE-Prince Edward Island"
			});
			provinces.push(
			{
				"value": "QC",
				"label": "QC-Quebec"
			});
			provinces.push(
			{
				"value": "SK",
				"label": "SK-Saskatchewan"
			});
			provinces.push(
			{
				"value": "YT",
				"label": "YT-Yukon"
			});
			provinces.push(
			{
				"value": "US",
				"label": "US resident"
			});
			provinces.push(
			{
				"value": "US-AK",
				"label": "US-AK-Alaska"
			});
			provinces.push(
			{
				"value": "US-AL",
				"label": "US-AL-Alabama"
			});
			provinces.push(
			{
				"value": "US-AR",
				"label": "US-AR-Arkansas"
			});
			provinces.push(
			{
				"value": "US-AZ",
				"label": "US-AZ-Arizona"
			});
			provinces.push(
			{
				"value": "US-CA",
				"label": "US-CA-California"
			});
			provinces.push(
			{
				"value": "US-CO",
				"label": "US-CO-Colorado"
			});
			provinces.push(
			{
				"value": "US-CT",
				"label": "US-CT-Connecticut"
			});
			provinces.push(
			{
				"value": "US-CZ",
				"label": "US-CZ-Canal Zone"
			});
			provinces.push(
			{
				"value": "US-DC",
				"label": "US-DC-District Of Columbia"
			});
			provinces.push(
			{
				"value": "US-DE",
				"label": "US-DE-Delaware"
			});
			provinces.push(
			{
				"value": "US-FL",
				"label": "US-FL-Florida"
			});
			provinces.push(
			{
				"value": "US-GA",
				"label": "US-GA-Georgia"
			});
			provinces.push(
			{
				"value": "US-GU",
				"label": "US-GU-Guam"
			});
			provinces.push(
			{
				"value": "US-HI",
				"label": "US-HI-Hawaii"
			});
			provinces.push(
			{
				"value": "US-IA",
				"label": "US-IA-Iowa"
			});
			provinces.push(
			{
				"value": "US-ID",
				"label": "US-ID-Idaho"
			});
			provinces.push(
			{
				"value": "US-IL",
				"label": "US-IL-Illinois"
			});
			provinces.push(
			{
				"value": "US-IN",
				"label": "US-IN-Indiana"
			});
			provinces.push(
			{
				"value": "US-KS",
				"label": "US-KS-Kansas"
			});
			provinces.push(
			{
				"value": "US-KY",
				"label": "US-KY-Kentucky"
			});
			provinces.push(
			{
				"value": "US-LA",
				"label": "US-LA-Louisiana"
			});
			provinces.push(
			{
				"value": "US-MA",
				"label": "US-MA-Massachusetts"
			});
			provinces.push(
			{
				"value": "US-MD",
				"label": "US-MD-Maryland"
			});
			provinces.push(
			{
				"value": "US-ME",
				"label": "US-ME-Maine"
			});
			provinces.push(
			{
				"value": "US-MI",
				"label": "US-MI-Michigan"
			});
			provinces.push(
			{
				"value": "US-MN",
				"label": "US-MN-Minnesota"
			});
			provinces.push(
			{
				"value": "US-MO",
				"label": "US-MO-Missouri"
			});
			provinces.push(
			{
				"value": "US-MS",
				"label": "US-MS-Mississippi"
			});
			provinces.push(
			{
				"value": "US-MT",
				"label": "US-MT-Montana"
			});
			provinces.push(
			{
				"value": "US-NC",
				"label": "US-NC-North Carolina"
			});
			provinces.push(
			{
				"value": "US-ND",
				"label": "US-ND-North Dakota"
			});
			provinces.push(
			{
				"value": "US-NE",
				"label": "US-NE-Nebraska"
			});
			provinces.push(
			{
				"value": "US-NH",
				"label": "US-NH-New Hampshire"
			});
			provinces.push(
			{
				"value": "US-NJ",
				"label": "US-NJ-New Jersey"
			});
			provinces.push(
			{
				"value": "US-NM",
				"label": "US-NM-New Mexico"
			});
			provinces.push(
			{
				"value": "US-NU",
				"label": "US-NU-Nunavut"
			});
			provinces.push(
			{
				"value": "US-NV",
				"label": "US-NV-Nevada"
			});
			provinces.push(
			{
				"value": "US-NY",
				"label": "US-NY-New York"
			});
			provinces.push(
			{
				"value": "US-OH",
				"label": "US-OH-Ohio"
			});
			provinces.push(
			{
				"value": "US-OK",
				"label": "US-OK-Oklahoma"
			});
			provinces.push(
			{
				"value": "US-OR",
				"label": "US-OR-Oregon"
			});
			provinces.push(
			{
				"value": "US-PA",
				"label": "US-PA-Pennsylvania"
			});
			provinces.push(
			{
				"value": "US-PR",
				"label": "US-PR-Puerto Rico"
			});
			provinces.push(
			{
				"value": "US-RI",
				"label": "US-RI-Rhode Island"
			});
			provinces.push(
			{
				"value": "US-SC",
				"label": "US-SC-South Carolina"
			});
			provinces.push(
			{
				"value": "US-SD",
				"label": "US-SD-South Dakota"
			});
			provinces.push(
			{
				"value": "US-TN",
				"label": "US-TN-Tennessee"
			});
			provinces.push(
			{
				"value": "US-TX",
				"label": "US-TX-Texas"
			});
			provinces.push(
			{
				"value": "US-UT",
				"label": "US-UT-Utah"
			});
			provinces.push(
			{
				"value": "US-VA",
				"label": "US-VA-Virginia"
			});
			provinces.push(
			{
				"value": "US-VI",
				"label": "US-VI-Virgin Islands"
			});
			provinces.push(
			{
				"value": "US-VT",
				"label": "US-VT-Vermont"
			});
			provinces.push(
			{
				"value": "US-WA",
				"label": "US-WA-Washington"
			});
			provinces.push(
			{
				"value": "US-WI",
				"label": "US-WI-Wisconsin"
			});
			provinces.push(
			{
				"value": "US-WV",
				"label": "US-WV-West Virginia"
			});
			provinces.push(
			{
				"value": "US-WY",
				"label": "US-WY-Wyoming"
			});
			provinces.push(
			{
				"value": "OT",
				"label": "Other"
			});
			return provinces;
		};

		service.getCountries = function getCountries()
		{
			var countries = [];
			countries.push(
			{
				"value": "AF",
				"label": "AFGHANISTAN"
			});
			countries.push(
			{
				"value": "AX",
				"label": "ALAND ISLANDS"
			});
			countries.push(
			{
				"value": "AL",
				"label": "ALBANIA"
			});
			countries.push(
			{
				"value": "DZ",
				"label": "ALGERIA"
			});
			countries.push(
			{
				"value": "AS",
				"label": "AMERICAN SAMOA"
			});
			countries.push(
			{
				"value": "AD",
				"label": "ANDORRA"
			});
			countries.push(
			{
				"value": "AO",
				"label": "ANGOLA"
			});
			countries.push(
			{
				"value": "AI",
				"label": "ANGUILLA"
			});
			countries.push(
			{
				"value": "AQ",
				"label": "ANTARCTICA"
			});
			countries.push(
			{
				"value": "AG",
				"label": "ANTIGUA AND BARBUDA"
			});
			countries.push(
			{
				"value": "AR",
				"label": "ARGENTINA"
			});
			countries.push(
			{
				"value": "AM",
				"label": "ARMENIA"
			});
			countries.push(
			{
				"value": "AW",
				"label": "ARUBA"
			});
			countries.push(
			{
				"value": "AU",
				"label": "AUSTRALIA"
			});
			countries.push(
			{
				"value": "AT",
				"label": "AUSTRIA"
			});
			countries.push(
			{
				"value": "AZ",
				"label": "AZERBAIJAN"
			});
			countries.push(
			{
				"value": "BS",
				"label": "BAHAMAS"
			});
			countries.push(
			{
				"value": "BH",
				"label": "BAHRAIN"
			});
			countries.push(
			{
				"value": "BD",
				"label": "BANGLADESH"
			});
			countries.push(
			{
				"value": "BB",
				"label": "BARBADOS"
			});
			countries.push(
			{
				"value": "BY",
				"label": "BELARUS"
			});
			countries.push(
			{
				"value": "BE",
				"label": "BELGIUM"
			});
			countries.push(
			{
				"value": "BZ",
				"label": "BELIZE"
			});
			countries.push(
			{
				"value": "BJ",
				"label": "BENIN"
			});
			countries.push(
			{
				"value": "BM",
				"label": "BERMUDA"
			});
			countries.push(
			{
				"value": "BT",
				"label": "BHUTAN"
			});
			countries.push(
			{
				"value": "BO",
				"label": "BOLIVIA"
			});
			countries.push(
			{
				"value": "BA",
				"label": "BOSNIA AND HERZEGOVINA"
			});
			countries.push(
			{
				"value": "BW",
				"label": "BOTSWANA"
			});
			countries.push(
			{
				"value": "BV",
				"label": "BOUVET ISLAND"
			});
			countries.push(
			{
				"value": "BR",
				"label": "BRAZIL"
			});
			countries.push(
			{
				"value": "IO",
				"label": "BRITISH INDIAN OCEAN TERRITORY"
			});
			countries.push(
			{
				"value": "BN",
				"label": "BRUNEI DARUSSALAM"
			});
			countries.push(
			{
				"value": "BG",
				"label": "BULGARIA"
			});
			countries.push(
			{
				"value": "BF",
				"label": "BURKINA FASO"
			});
			countries.push(
			{
				"value": "BI",
				"label": "BURUNDI"
			});
			countries.push(
			{
				"value": "KH",
				"label": "CAMBODIA"
			});
			countries.push(
			{
				"value": "CM",
				"label": "CAMEROON"
			});
			countries.push(
			{
				"value": "CA",
				"label": "CANADA"
			});
			countries.push(
			{
				"value": "CV",
				"label": "CAPE VERDE"
			});
			countries.push(
			{
				"value": "KY",
				"label": "CAYMAN ISLANDS"
			});
			countries.push(
			{
				"value": "CF",
				"label": "CENTRAL AFRICAN REPUBLIC"
			});
			countries.push(
			{
				"value": "TD",
				"label": "CHAD"
			});
			countries.push(
			{
				"value": "CL",
				"label": "CHILE"
			});
			countries.push(
			{
				"value": "CN",
				"label": "CHINA"
			});
			countries.push(
			{
				"value": "CX",
				"label": "CHRISTMAS ISLAND"
			});
			countries.push(
			{
				"value": "CC",
				"label": "COCOS (KEELING) ISLANDS"
			});
			countries.push(
			{
				"value": "CO",
				"label": "COLOMBIA"
			});
			countries.push(
			{
				"value": "KM",
				"label": "COMOROS"
			});
			countries.push(
			{
				"value": "CG",
				"label": "CONGO"
			});
			countries.push(
			{
				"value": "CD",
				"label": "CONGO, THE DEMOCRATIC REPUBLIC OF THE"
			});
			countries.push(
			{
				"value": "CK",
				"label": "COOK ISLANDS"
			});
			countries.push(
			{
				"value": "CR",
				"label": "COSTA RICA"
			});
			countries.push(
			{
				"value": "CI",
				"label": "CÃ¯TE D IVOIRE"
			});
			countries.push(
			{
				"value": "HR",
				"label": "CROATIA"
			});
			countries.push(
			{
				"value": "CU",
				"label": "CUBA"
			});
			countries.push(
			{
				"value": "CY",
				"label": "CYPRUS"
			});
			countries.push(
			{
				"value": "CZ",
				"label": "CZECH REPUBLIC"
			});
			countries.push(
			{
				"value": "DK",
				"label": "DENMARK"
			});
			countries.push(
			{
				"value": "DJ",
				"label": "DJIBOUTI"
			});
			countries.push(
			{
				"value": "DM",
				"label": "DOMINICA"
			});
			countries.push(
			{
				"value": "DO",
				"label": "DOMINICAN REPUBLIC"
			});
			countries.push(
			{
				"value": "EC",
				"label": "ECUADOR"
			});
			countries.push(
			{
				"value": "EG",
				"label": "EGYPT"
			});
			countries.push(
			{
				"value": "SV",
				"label": "EL SALVADOR"
			});
			countries.push(
			{
				"value": "GQ",
				"label": "EQUATORIAL GUINEA"
			});
			countries.push(
			{
				"value": "ER",
				"label": "ERITREA"
			});
			countries.push(
			{
				"value": "EE",
				"label": "ESTONIA"
			});
			countries.push(
			{
				"value": "ET",
				"label": "ETHIOPIA"
			});
			countries.push(
			{
				"value": "FK",
				"label": "FALKLAND ISLANDS (MALVINAS)"
			});
			countries.push(
			{
				"value": "FO",
				"label": "FAROE ISLANDS"
			});
			countries.push(
			{
				"value": "FJ",
				"label": "FIJI"
			});
			countries.push(
			{
				"value": "FI",
				"label": "FINLAND"
			});
			countries.push(
			{
				"value": "FR",
				"label": "FRANCE"
			});
			countries.push(
			{
				"value": "GF",
				"label": "FRENCH GUIANA"
			});
			countries.push(
			{
				"value": "PF",
				"label": "FRENCH POLYNESIA"
			});
			countries.push(
			{
				"value": "TF",
				"label": "FRENCH SOUTHERN TERRITORIES"
			});
			countries.push(
			{
				"value": "GA",
				"label": "GABON"
			});
			countries.push(
			{
				"value": "GM",
				"label": "GAMBIA"
			});
			countries.push(
			{
				"value": "GE",
				"label": "GEORGIA"
			});
			countries.push(
			{
				"value": "DE",
				"label": "GERMANY"
			});
			countries.push(
			{
				"value": "GH",
				"label": "GHANA"
			});
			countries.push(
			{
				"value": "GI",
				"label": "GIBRALTAR"
			});
			countries.push(
			{
				"value": "GR",
				"label": "GREECE"
			});
			countries.push(
			{
				"value": "GL",
				"label": "GREENLAND"
			});
			countries.push(
			{
				"value": "GD",
				"label": "GRENADA"
			});
			countries.push(
			{
				"value": "GP",
				"label": "GUADELOUPE"
			});
			countries.push(
			{
				"value": "GU",
				"label": "GUAM"
			});
			countries.push(
			{
				"value": "GT",
				"label": "GUATEMALA"
			});
			countries.push(
			{
				"value": "GG",
				"label": "GUERNSEY"
			});
			countries.push(
			{
				"value": "GN",
				"label": "GUINEA"
			});
			countries.push(
			{
				"value": "GW",
				"label": "GUINEA-BISSAU"
			});
			countries.push(
			{
				"value": "GY",
				"label": "GUYANA"
			});
			countries.push(
			{
				"value": "HT",
				"label": "HAITI"
			});
			countries.push(
			{
				"value": "HM",
				"label": "HEARD ISLAND AND MCDONALD ISLANDS"
			});
			countries.push(
			{
				"value": "VA",
				"label": "HOLY SEE (VATICAN CITY STATE)"
			});
			countries.push(
			{
				"value": "HN",
				"label": "HONDURAS"
			});
			countries.push(
			{
				"value": "HK",
				"label": "HONG KONG"
			});
			countries.push(
			{
				"value": "HU",
				"label": "HUNGARY"
			});
			countries.push(
			{
				"value": "IS",
				"label": "ICELAND"
			});
			countries.push(
			{
				"value": "IN",
				"label": "INDIA"
			});
			countries.push(
			{
				"value": "ID",
				"label": "INDONESIA"
			});
			countries.push(
			{
				"value": "IR",
				"label": "IRAN, ISLAMIC REPUBLIC OF"
			});
			countries.push(
			{
				"value": "IQ",
				"label": "IRAQ"
			});
			countries.push(
			{
				"value": "IE",
				"label": "IRELAND"
			});
			countries.push(
			{
				"value": "IM",
				"label": "ISLE OF MAN"
			});
			countries.push(
			{
				"value": "IL",
				"label": "ISRAEL"
			});
			countries.push(
			{
				"value": "IT",
				"label": "ITALY"
			});
			countries.push(
			{
				"value": "JM",
				"label": "JAMAICA"
			});
			countries.push(
			{
				"value": "JP",
				"label": "JAPAN"
			});
			countries.push(
			{
				"value": "JE",
				"label": "JERSEY"
			});
			countries.push(
			{
				"value": "JO",
				"label": "JORDAN"
			});
			countries.push(
			{
				"value": "KZ",
				"label": "KAZAKHSTAN"
			});
			countries.push(
			{
				"value": "KE",
				"label": "KENYA"
			});
			countries.push(
			{
				"value": "KI",
				"label": "KIRIBATI"
			});
			countries.push(
			{
				"value": "KP",
				"label": "KOREA, DEMOCRATIC PEOPLES REPUBLIC OF"
			});
			countries.push(
			{
				"value": "KR",
				"label": "KOREA, REPUBLIC OF"
			});
			countries.push(
			{
				"value": "KW",
				"label": "KUWAIT"
			});
			countries.push(
			{
				"value": "KG",
				"label": "KYRGYZSTAN"
			});
			countries.push(
			{
				"value": "LA",
				"label": "LAO PEOPLES DEMOCRATIC REPUBLIC"
			});
			countries.push(
			{
				"value": "LV",
				"label": "LATVIA"
			});
			countries.push(
			{
				"value": "LB",
				"label": "LEBANON"
			});
			countries.push(
			{
				"value": "LS",
				"label": "LESOTHO"
			});
			countries.push(
			{
				"value": "LR",
				"label": "LIBERIA"
			});
			countries.push(
			{
				"value": "LY",
				"label": "LIBYAN ARAB JAMAHIRIYA"
			});
			countries.push(
			{
				"value": "LI",
				"label": "LIECHTENSTEIN"
			});
			countries.push(
			{
				"value": "LT",
				"label": "LITHUANIA"
			});
			countries.push(
			{
				"value": "LU",
				"label": "LUXEMBOURG"
			});
			countries.push(
			{
				"value": "MO",
				"label": "MACAO"
			});
			countries.push(
			{
				"value": "MK",
				"label": "MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF"
			});
			countries.push(
			{
				"value": "MG",
				"label": "MADAGASCAR"
			});
			countries.push(
			{
				"value": "MW",
				"label": "MALAWI"
			});
			countries.push(
			{
				"value": "MY",
				"label": "MALAYSIA"
			});
			countries.push(
			{
				"value": "MV",
				"label": "MALDIVES"
			});
			countries.push(
			{
				"value": "ML",
				"label": "MALI"
			});
			countries.push(
			{
				"value": "MT",
				"label": "MALTA"
			});
			countries.push(
			{
				"value": "MH",
				"label": "MARSHALL ISLANDS"
			});
			countries.push(
			{
				"value": "MQ",
				"label": "MARTINIQUE"
			});
			countries.push(
			{
				"value": "MR",
				"label": "MAURITANIA"
			});
			countries.push(
			{
				"value": "MU",
				"label": "MAURITIUS"
			});
			countries.push(
			{
				"value": "YT",
				"label": "MAYOTTE"
			});
			countries.push(
			{
				"value": "MX",
				"label": "MEXICO"
			});
			countries.push(
			{
				"value": "FM",
				"label": "MICRONESIA, FEDERATED STATES OF"
			});
			countries.push(
			{
				"value": "MD",
				"label": "MOLDOVA"
			});
			countries.push(
			{
				"value": "MC",
				"label": "MONACO"
			});
			countries.push(
			{
				"value": "MN",
				"label": "MONGOLIA"
			});
			countries.push(
			{
				"value": "ME",
				"label": "MONTENEGRO"
			});
			countries.push(
			{
				"value": "MS",
				"label": "MONTSERRAT"
			});
			countries.push(
			{
				"value": "MA",
				"label": "MOROCCO"
			});
			countries.push(
			{
				"value": "MZ",
				"label": "MOZAMBIQUE"
			});
			countries.push(
			{
				"value": "MM",
				"label": "MYANMAR"
			});
			countries.push(
			{
				"value": "NA",
				"label": "NAMIBIA"
			});
			countries.push(
			{
				"value": "NR",
				"label": "NAURU"
			});
			countries.push(
			{
				"value": "NP",
				"label": "NEPAL"
			});
			countries.push(
			{
				"value": "NL",
				"label": "NETHERLANDS"
			});
			countries.push(
			{
				"value": "AN",
				"label": "NETHERLANDS ANTILLES"
			});
			countries.push(
			{
				"value": "NC",
				"label": "NEW CALEDONIA"
			});
			countries.push(
			{
				"value": "NZ",
				"label": "NEW ZEALAND"
			});
			countries.push(
			{
				"value": "NI",
				"label": "NICARAGUA"
			});
			countries.push(
			{
				"value": "NE",
				"label": "NIGER"
			});
			countries.push(
			{
				"value": "NG",
				"label": "NIGERIA"
			});
			countries.push(
			{
				"value": "NU",
				"label": "NIUE"
			});
			countries.push(
			{
				"value": "NF",
				"label": "NORFOLK ISLAND"
			});
			countries.push(
			{
				"value": "MP",
				"label": "NORTHERN MARIANA ISLANDS"
			});
			countries.push(
			{
				"value": "NO",
				"label": "NORWAY"
			});
			countries.push(
			{
				"value": "OM",
				"label": "OMAN"
			});
			countries.push(
			{
				"value": "PK",
				"label": "PAKISTAN"
			});
			countries.push(
			{
				"value": "PW",
				"label": "PALAU"
			});
			countries.push(
			{
				"value": "PS",
				"label": "PALESTINIAN TERRITORY, OCCUPIED"
			});
			countries.push(
			{
				"value": "PA",
				"label": "PANAMA"
			});
			countries.push(
			{
				"value": "PG",
				"label": "PAPUA NEW GUINEA"
			});
			countries.push(
			{
				"value": "PY",
				"label": "PARAGUAY"
			});
			countries.push(
			{
				"value": "PE",
				"label": "PERU"
			});
			countries.push(
			{
				"value": "PH",
				"label": "PHILIPPINES"
			});
			countries.push(
			{
				"value": "PN",
				"label": "PITCAIRN"
			});
			countries.push(
			{
				"value": "PL",
				"label": "POLAND"
			});
			countries.push(
			{
				"value": "PT",
				"label": "PORTUGAL"
			});
			countries.push(
			{
				"value": "PR",
				"label": "PUERTO RICO"
			});
			countries.push(
			{
				"value": "QA",
				"label": "QATAR"
			});
			countries.push(
			{
				"value": "RE",
				"label": "RÆUNION"
			});
			countries.push(
			{
				"value": "RO",
				"label": "ROMANIA"
			});
			countries.push(
			{
				"value": "RU",
				"label": "RUSSIAN FEDERATION"
			});
			countries.push(
			{
				"value": "RW",
				"label": "RWANDA"
			});
			countries.push(
			{
				"value": "BL",
				"label": "SAINT BARTHÆLEMY"
			});
			countries.push(
			{
				"value": "SH",
				"label": "SAINT HELENA"
			});
			countries.push(
			{
				"value": "KN",
				"label": "SAINT KITTS AND NEVIS"
			});
			countries.push(
			{
				"value": "LC",
				"label": "SAINT LUCIA"
			});
			countries.push(
			{
				"value": "MF",
				"label": "SAINT MARTIN"
			});
			countries.push(
			{
				"value": "PM",
				"label": "SAINT PIERRE AND MIQUELON"
			});
			countries.push(
			{
				"value": "VC",
				"label": "SAINT VINCENT AND THE GRENADINES"
			});
			countries.push(
			{
				"value": "WS",
				"label": "SAMOA"
			});
			countries.push(
			{
				"value": "SM",
				"label": "SAN MARINO"
			});
			countries.push(
			{
				"value": "ST",
				"label": "SAO TOME AND PRINCIPE"
			});
			countries.push(
			{
				"value": "SA",
				"label": "SAUDI ARABIA"
			});
			countries.push(
			{
				"value": "SN",
				"label": "SENEGAL"
			});
			countries.push(
			{
				"value": "RS",
				"label": "SERBIA"
			});
			countries.push(
			{
				"value": "SC",
				"label": "SEYCHELLES"
			});
			countries.push(
			{
				"value": "SL",
				"label": "SIERRA LEONE"
			});
			countries.push(
			{
				"value": "SG",
				"label": "SINGAPORE"
			});
			countries.push(
			{
				"value": "SK",
				"label": "SLOVAKIA"
			});
			countries.push(
			{
				"value": "SI",
				"label": "SLOVENIA"
			});
			countries.push(
			{
				"value": "SB",
				"label": "SOLOMON ISLANDS"
			});
			countries.push(
			{
				"value": "SO",
				"label": "SOMALIA"
			});
			countries.push(
			{
				"value": "ZA",
				"label": "SOUTH AFRICA"
			});
			countries.push(
			{
				"value": "GS",
				"label": "SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS"
			});
			countries.push(
			{
				"value": "ES",
				"label": "SPAIN"
			});
			countries.push(
			{
				"value": "LK",
				"label": "SRI LANKA"
			});
			countries.push(
			{
				"value": "SD",
				"label": "SUDAN"
			});
			countries.push(
			{
				"value": "SR",
				"label": "SURINAME"
			});
			countries.push(
			{
				"value": "SJ",
				"label": "SVALBARD AND JAN MAYEN"
			});
			countries.push(
			{
				"value": "SZ",
				"label": "SWAZILAND"
			});
			countries.push(
			{
				"value": "SE",
				"label": "SWEDEN"
			});
			countries.push(
			{
				"value": "CH",
				"label": "SWITZERLAND"
			});
			countries.push(
			{
				"value": "SY",
				"label": "SYRIAN ARAB REPUBLIC"
			});
			countries.push(
			{
				"value": "TW",
				"label": "TAIWAN, PROVINCE OF CHINA"
			});
			countries.push(
			{
				"value": "TJ",
				"label": "TAJIKISTAN"
			});
			countries.push(
			{
				"value": "TZ",
				"label": "TANZANIA, UNITED REPUBLIC OF"
			});
			countries.push(
			{
				"value": "TH",
				"label": "THAILAND"
			});
			countries.push(
			{
				"value": "TL",
				"label": "TIMOR-LESTE"
			});
			countries.push(
			{
				"value": "TG",
				"label": "TOGO"
			});
			countries.push(
			{
				"value": "TK",
				"label": "TOKELAU"
			});
			countries.push(
			{
				"value": "TO",
				"label": "TONGA"
			});
			countries.push(
			{
				"value": "TT",
				"label": "TRINIDAD AND TOBAGO"
			});
			countries.push(
			{
				"value": "TN",
				"label": "TUNISIA"
			});
			countries.push(
			{
				"value": "TR",
				"label": "TURKEY"
			});
			countries.push(
			{
				"value": "TM",
				"label": "TURKMENISTAN"
			});
			countries.push(
			{
				"value": "TC",
				"label": "TURKS AND CAICOS ISLANDS"
			});
			countries.push(
			{
				"value": "TV",
				"label": "TUVALU"
			});
			countries.push(
			{
				"value": "UG",
				"label": "UGANDA"
			});
			countries.push(
			{
				"value": "UA",
				"label": "UKRAINE"
			});
			countries.push(
			{
				"value": "AE",
				"label": "UNITED ARAB EMIRATES"
			});
			countries.push(
			{
				"value": "GB",
				"label": "UNITED KINGDOM"
			});
			countries.push(
			{
				"value": "US",
				"label": "UNITED STATES"
			});
			countries.push(
			{
				"value": "UM",
				"label": "UNITED STATES MINOR OUTLYING ISLANDS"
			});
			countries.push(
			{
				"value": "UY",
				"label": "URUGUAY"
			});
			countries.push(
			{
				"value": "UZ",
				"label": "UZBEKISTAN"
			});
			countries.push(
			{
				"value": "VU",
				"label": "VANUATU"
			});
			countries.push(
			{
				"value": "VA",
				"label": "VATICAN CITY STATE"
			});
			countries.push(
			{
				"value": "VE",
				"label": "VENEZUELA"
			});
			countries.push(
			{
				"value": "VN",
				"label": "VIET NAM"
			});
			countries.push(
			{
				"value": "VG",
				"label": "VIRGIN ISLANDS, BRITISH"
			});
			countries.push(
			{
				"value": "VI",
				"label": "VIRGIN ISLANDS, U.S."
			});
			countries.push(
			{
				"value": "WF",
				"label": "WALLIS AND FUTUNA"
			});
			countries.push(
			{
				"value": "EH",
				"label": "WESTERN SAHARA"
			});
			countries.push(
			{
				"value": "YE",
				"label": "YEMEN"
			});
			countries.push(
			{
				"value": "ZM",
				"label": "ZAMBIA"
			});
			countries.push(
			{
				"value": "ZW",
				"label": "ZIMBABWE"
			});
			return countries;
		};

		service.getEngFre = function getEngFre()
		{
			var langs = [];
			langs.push(
			{
				"value": "English",
				"label": "English"
			});
			langs.push(
			{
				"value": "French",
				"label": "French"
			});
			langs.push(
			{
				"value": "Other",
				"label": "Other"
			});
			return langs;
		};

		service.getSpokenLanguages = function getSpokenLanguages()
		{
			var langs = [];
			langs.push(
			{
				"value": "English",
				"label": "English"
			});
			langs.push(
			{
				"value": "French",
				"label": "French"
			});
			langs.push(
			{
				"value": "Abkhazian",
				"label": "Abkhazian"
			});
			langs.push(
			{
				"value": "Achinese",
				"label": "Achinese"
			});
			langs.push(
			{
				"value": "Acoli",
				"label": "Acoli"
			});
			langs.push(
			{
				"value": "Adangme",
				"label": "Adangme"
			});
			langs.push(
			{
				"value": "Adyghe",
				"label": "Adyghe"
			});
			langs.push(
			{
				"value": "Afar",
				"label": "Afar"
			});
			langs.push(
			{
				"value": "Afrihili",
				"label": "Afrihili"
			});
			langs.push(
			{
				"value": "Afrikaans",
				"label": "Afrikaans"
			});
			langs.push(
			{
				"value": "Afro-Asiatic (Other)",
				"label": "Afro-Asiatic"
			});
			langs.push(
			{
				"value": "Ainu",
				"label": "Ainu"
			});
			langs.push(
			{
				"value": "Akan",
				"label": "Akan"
			});
			langs.push(
			{
				"value": "Akkadian",
				"label": "Akkadian"
			});
			langs.push(
			{
				"value": "Albanian",
				"label": "Albanian"
			});
			langs.push(
			{
				"value": "Aleut",
				"label": "Aleut"
			});
			langs.push(
			{
				"value": "Algonquian Languages",
				"label": "Algonquian Languages"
			});
			langs.push(
			{
				"value": "Altaic (Other)",
				"label": "Altaic"
			});
			langs.push(
			{
				"value": "Amharic",
				"label": "Amharic"
			});
			langs.push(
			{
				"value": "Angika",
				"label": "Angika"
			});
			langs.push(
			{
				"value": "Apache Languages",
				"label": "Apache Languages"
			});
			langs.push(
			{
				"value": "Arabic",
				"label": "Arabic"
			});
			langs.push(
			{
				"value": "Aramaic",
				"label": "Aramaic"
			});
			langs.push(
			{
				"value": "Arapaho",
				"label": "Arapaho"
			});
			langs.push(
			{
				"value": "Araucanian",
				"label": "Araucanian"
			});
			langs.push(
			{
				"value": "Arawak",
				"label": "Arawak"
			});
			langs.push(
			{
				"value": "Argonese",
				"label": "Argonese"
			});
			langs.push(
			{
				"value": "Armenian",
				"label": "Armenian"
			});
			langs.push(
			{
				"value": "Aromanian",
				"label": "Aromanian"
			});
			langs.push(
			{
				"value": "Artificial (Other)",
				"label": "Artificial"
			});
			langs.push(
			{
				"value": "Assamese",
				"label": "Assamese"
			});
			langs.push(
			{
				"value": "Asturian",
				"label": "Asturian"
			});
			langs.push(
			{
				"value": "Athapascan Languages",
				"label": "Athapascan Languages"
			});
			langs.push(
			{
				"value": "Australian Languages",
				"label": "Australian Languages"
			});
			langs.push(
			{
				"value": "Austronesian (Other)",
				"label": "Austronesian"
			});
			langs.push(
			{
				"value": "Avaric",
				"label": "Avaric"
			});
			langs.push(
			{
				"value": "Avestan",
				"label": "Avestan"
			});
			langs.push(
			{
				"value": "Awadhi",
				"label": "Awadhi"
			});
			langs.push(
			{
				"value": "Aymara",
				"label": "Aymara"
			});
			langs.push(
			{
				"value": "Azerbaijani",
				"label": "Azerbaijani"
			});
			langs.push(
			{
				"value": "Balinese",
				"label": "Balinese"
			});
			langs.push(
			{
				"value": "Baltic (Other)",
				"label": "Baltic"
			});
			langs.push(
			{
				"value": "Baluchi",
				"label": "Baluchi"
			});
			langs.push(
			{
				"value": "Bambara",
				"label": "Bambara"
			});
			langs.push(
			{
				"value": "Bamileke Languages",
				"label": "Bamileke Languages"
			});
			langs.push(
			{
				"value": "Banda",
				"label": "Banda"
			});
			langs.push(
			{
				"value": "Bantu (Other)",
				"label": "Bantu"
			});
			langs.push(
			{
				"value": "Basa",
				"label": "Basa"
			});
			langs.push(
			{
				"value": "Bashkir",
				"label": "Bashkir"
			});
			langs.push(
			{
				"value": "Basque",
				"label": "Basque"
			});
			langs.push(
			{
				"value": "Batak (Indonesia)",
				"label": "Batak (Indonesia)"
			});
			langs.push(
			{
				"value": "Beja",
				"label": "Beja"
			});
			langs.push(
			{
				"value": "Belarusian",
				"label": "Belarusian"
			});
			langs.push(
			{
				"value": "Bemba",
				"label": "Bemba"
			});
			langs.push(
			{
				"value": "Bengali",
				"label": "Bengali"
			});
			langs.push(
			{
				"value": "Berber (Other)",
				"label": "Berber"
			});
			langs.push(
			{
				"value": "Bhojpuri",
				"label": "Bhojpuri"
			});
			langs.push(
			{
				"value": "Bihari",
				"label": "Bihari"
			});
			langs.push(
			{
				"value": "Bikol",
				"label": "Bikol"
			});
			langs.push(
			{
				"value": "Bini",
				"label": "Bini"
			});
			langs.push(
			{
				"value": "Bislama",
				"label": "Bislama"
			});
			langs.push(
			{
				"value": "Blin",
				"label": "Blin"
			});
			langs.push(
			{
				"value": "Bokmal, Norwegian",
				"label": "Bokmal, Norwegian"
			});
			langs.push(
			{
				"value": "Bosnian",
				"label": "Bosnian"
			});
			langs.push(
			{
				"value": "Braj",
				"label": "Braj"
			});
			langs.push(
			{
				"value": "Breton",
				"label": "Breton"
			});
			langs.push(
			{
				"value": "Buginese",
				"label": "Buginese"
			});
			langs.push(
			{
				"value": "Bulgarian",
				"label": "Bulgarian"
			});
			langs.push(
			{
				"value": "Buriat",
				"label": "Buriat"
			});
			langs.push(
			{
				"value": "Burmese",
				"label": "Burmese"
			});
			langs.push(
			{
				"value": "Caddo",
				"label": "Caddo"
			});
			langs.push(
			{
				"value": "Cantonese",
				"label": "Cantonese"
			});
			langs.push(
			{
				"value": "Carib",
				"label": "Carib"
			});
			langs.push(
			{
				"value": "Catalan",
				"label": "Catalan"
			});
			langs.push(
			{
				"value": "Caucasian (Other)",
				"label": "Caucasian"
			});
			langs.push(
			{
				"value": "Cebuano",
				"label": "Cebuano"
			});
			langs.push(
			{
				"value": "Celtic (Other)",
				"label": "Celtic"
			});
			langs.push(
			{
				"value": "Central American Indian (Other)",
				"label": "Central American Indian"
			});
			langs.push(
			{
				"value": "Chagatai",
				"label": "Chagatai"
			});
			langs.push(
			{
				"value": "Chamic Languages",
				"label": "Chamic Languages"
			});
			langs.push(
			{
				"value": "Chamorro",
				"label": "Chamorro"
			});
			langs.push(
			{
				"value": "Chechen",
				"label": "Chechen"
			});
			langs.push(
			{
				"value": "Cherokee",
				"label": "Cherokee"
			});
			langs.push(
			{
				"value": "Cheyenne",
				"label": "Cheyenne"
			});
			langs.push(
			{
				"value": "Chibcha",
				"label": "Chibcha"
			});
			langs.push(
			{
				"value": "Chichewa",
				"label": "Chichewa"
			});
			langs.push(
			{
				"value": "Chinese",
				"label": "Chinese"
			});
			langs.push(
			{
				"value": "Chinook Jargon",
				"label": "Chinook Jargon"
			});
			langs.push(
			{
				"value": "Chipewyan",
				"label": "Chipewyan"
			});
			langs.push(
			{
				"value": "Choctaw",
				"label": "Choctaw"
			});
			langs.push(
			{
				"value": "Chuukese",
				"label": "Chuukese"
			});
			langs.push(
			{
				"value": "Chuvash",
				"label": "Chuvash"
			});
			langs.push(
			{
				"value": "Classical Nepal Bhasa",
				"label": "Classical Nepal Bhasa"
			});
			langs.push(
			{
				"value": "Coptic",
				"label": "Coptic"
			});
			langs.push(
			{
				"value": "Cornish",
				"label": "Cornish"
			});
			langs.push(
			{
				"value": "Corsican",
				"label": "Corsican"
			});
			langs.push(
			{
				"value": "Cree",
				"label": "Cree"
			});
			langs.push(
			{
				"value": "Creek",
				"label": "Creek"
			});
			langs.push(
			{
				"value": "Creoles And Pidgins (Other)",
				"label": "Creoles & Pidgins"
			});
			langs.push(
			{
				"value": "Creoles And Pidgins, English-Based (Other)",
				"label": "Creoles & Pidgins, ENG-Based"
			});
			langs.push(
			{
				"value": "Creoles And Pidgins, French-Based (Other)",
				"label": "Creoles & Pidgins, FRE-Based"
			});
			langs.push(
			{
				"value": "Creoles And Pidgins, Portuguese-Based (Other)",
				"label": "Creoles & Pidgins, POR-Based"
			});
			langs.push(
			{
				"value": "Crimean Tatar",
				"label": "Crimean Tatar"
			});
			langs.push(
			{
				"value": "Croatian",
				"label": "Croatian"
			});
			langs.push(
			{
				"value": "Cushitic (Other)",
				"label": "Cushitic"
			});
			langs.push(
			{
				"value": "Czech",
				"label": "Czech"
			});
			langs.push(
			{
				"value": "Dakota",
				"label": "Dakota"
			});
			langs.push(
			{
				"value": "Danish",
				"label": "Danish"
			});
			langs.push(
			{
				"value": "Dargwa",
				"label": "Dargwa"
			});
			langs.push(
			{
				"value": "Dayak",
				"label": "Dayak"
			});
			langs.push(
			{
				"value": "Delaware",
				"label": "Delaware"
			});
			langs.push(
			{
				"value": "Dhivehi",
				"label": "Dhivehi"
			});
			langs.push(
			{
				"value": "Dinka",
				"label": "Dinka"
			});
			langs.push(
			{
				"value": "Dogri",
				"label": "Dogri"
			});
			langs.push(
			{
				"value": "Dogrib",
				"label": "Dogrib"
			});
			langs.push(
			{
				"value": "Dravidian (Other)",
				"label": "Dravidian"
			});
			langs.push(
			{
				"value": "Duala",
				"label": "Duala"
			});
			langs.push(
			{
				"value": "Dutch",
				"label": "Dutch"
			});
			langs.push(
			{
				"value": "Dyula",
				"label": "Dyula"
			});
			langs.push(
			{
				"value": "Dzongkha",
				"label": "Dzongkha"
			});
			langs.push(
			{
				"value": "Eastern Frisian",
				"label": "Eastern Frisian"
			});
			langs.push(
			{
				"value": "Efik",
				"label": "Efik"
			});
			langs.push(
			{
				"value": "Egyptian (Ancient)",
				"label": "Egyptian (Ancient)"
			});
			langs.push(
			{
				"value": "Ekajuk",
				"label": "Ekajuk"
			});
			langs.push(
			{
				"value": "Elamite",
				"label": "Elamite"
			});
			langs.push(
			{
				"value": "Erzya",
				"label": "Erzya"
			});
			langs.push(
			{
				"value": "Esperanto",
				"label": "Esperanto"
			});
			langs.push(
			{
				"value": "Estonian",
				"label": "Estonian"
			});
			langs.push(
			{
				"value": "Ewe",
				"label": "Ewe"
			});
			langs.push(
			{
				"value": "Ewondo",
				"label": "Ewondo"
			});
			langs.push(
			{
				"value": "Fang",
				"label": "Fang"
			});
			langs.push(
			{
				"value": "Fanti",
				"label": "Fanti"
			});
			langs.push(
			{
				"value": "Faroese",
				"label": "Faroese"
			});
			langs.push(
			{
				"value": "Fijian",
				"label": "Fijian"
			});
			langs.push(
			{
				"value": "Filipino; Pilipino",
				"label": "Filipino; Pilipino"
			});
			langs.push(
			{
				"value": "Finnish",
				"label": "Finnish"
			});
			langs.push(
			{
				"value": "Finno-Ugrian (Other)",
				"label": "Finno-Ugrian"
			});
			langs.push(
			{
				"value": "Fon",
				"label": "Fon"
			});
			langs.push(
			{
				"value": "Friulian",
				"label": "Friulian"
			});
			langs.push(
			{
				"value": "Fulah",
				"label": "Fulah"
			});
			langs.push(
			{
				"value": "Ga",
				"label": "Ga"
			});
			langs.push(
			{
				"value": "Gaelic",
				"label": "Gaelic"
			});
			langs.push(
			{
				"value": "Gallegan",
				"label": "Gallegan"
			});
			langs.push(
			{
				"value": "Ganda",
				"label": "Ganda"
			});
			langs.push(
			{
				"value": "Gayo",
				"label": "Gayo"
			});
			langs.push(
			{
				"value": "Gbaya",
				"label": "Gbaya"
			});
			langs.push(
			{
				"value": "Geez",
				"label": "Geez"
			});
			langs.push(
			{
				"value": "Georgian",
				"label": "Georgian"
			});
			langs.push(
			{
				"value": "German",
				"label": "German"
			});
			langs.push(
			{
				"value": "Germanic (Other)",
				"label": "Germanic"
			});
			langs.push(
			{
				"value": "Gikuyu",
				"label": "Gikuyu"
			});
			langs.push(
			{
				"value": "Gilbertese",
				"label": "Gilbertese"
			});
			langs.push(
			{
				"value": "Gondi",
				"label": "Gondi"
			});
			langs.push(
			{
				"value": "Gorontalo",
				"label": "Gorontalo"
			});
			langs.push(
			{
				"value": "Gothic",
				"label": "Gothic"
			});
			langs.push(
			{
				"value": "Grebo",
				"label": "Grebo"
			});
			langs.push(
			{
				"value": "Greek, Modern (1453-)",
				"label": "Greek, Modern (1453-)"
			});
			langs.push(
			{
				"value": "Guarani",
				"label": "Guarani"
			});
			langs.push(
			{
				"value": "Gujarati",
				"label": "Gujarati"
			});
			langs.push(
			{
				"value": "Gwich'in",
				"label": "Gwich'in"
			});
			langs.push(
			{
				"value": "Haida",
				"label": "Haida"
			});
			langs.push(
			{
				"value": "Haitian Creole",
				"label": "Haitian Creole"
			});
			langs.push(
			{
				"value": "Hausa",
				"label": "Hausa"
			});
			langs.push(
			{
				"value": "Hawaiian",
				"label": "Hawaiian"
			});
			langs.push(
			{
				"value": "Hebrew",
				"label": "Hebrew"
			});
			langs.push(
			{
				"value": "Herero",
				"label": "Herero"
			});
			langs.push(
			{
				"value": "Hiligaynon",
				"label": "Hiligaynon"
			});
			langs.push(
			{
				"value": "Himachali",
				"label": "Himachali"
			});
			langs.push(
			{
				"value": "Hindi",
				"label": "Hindi"
			});
			langs.push(
			{
				"value": "Hiri Motu",
				"label": "Hiri Motu"
			});
			langs.push(
			{
				"value": "Hittite",
				"label": "Hittite"
			});
			langs.push(
			{
				"value": "Hmong",
				"label": "Hmong"
			});
			langs.push(
			{
				"value": "Hungarian",
				"label": "Hungarian"
			});
			langs.push(
			{
				"value": "Hupa",
				"label": "Hupa"
			});
			langs.push(
			{
				"value": "Iban",
				"label": "Iban"
			});
			langs.push(
			{
				"value": "Icelandic",
				"label": "Icelandic"
			});
			langs.push(
			{
				"value": "Ido",
				"label": "Ido"
			});
			langs.push(
			{
				"value": "Igbo",
				"label": "Igbo"
			});
			langs.push(
			{
				"value": "Ijo",
				"label": "Ijo"
			});
			langs.push(
			{
				"value": "Iloko",
				"label": "Iloko"
			});
			langs.push(
			{
				"value": "Inari Sami",
				"label": "Inari Sami"
			});
			langs.push(
			{
				"value": "Indic (Other)",
				"label": "Indic"
			});
			langs.push(
			{
				"value": "Indo-European (Other)",
				"label": "Indo-European"
			});
			langs.push(
			{
				"value": "Indonesian",
				"label": "Indonesian"
			});
			langs.push(
			{
				"value": "Ingush",
				"label": "Ingush"
			});
			langs.push(
			{
				"value": "Interlingua (International Auxiliary Lang. Assoc.)",
				"label": "Interlingua (IALA)"
			});
			langs.push(
			{
				"value": "Interlingue",
				"label": "Interlingue"
			});
			langs.push(
			{
				"value": "Inuktitut",
				"label": "Inuktitut"
			});
			langs.push(
			{
				"value": "Inupiaq",
				"label": "Inupiaq"
			});
			langs.push(
			{
				"value": "Iranian (Other)",
				"label": "Iranian"
			});
			langs.push(
			{
				"value": "Irish",
				"label": "Irish"
			});
			langs.push(
			{
				"value": "Iroquoian Languages",
				"label": "Iroquoian Languages"
			});
			langs.push(
			{
				"value": "Italian",
				"label": "Italian"
			});
			langs.push(
			{
				"value": "Japanese",
				"label": "Japanese"
			});
			langs.push(
			{
				"value": "Javanese",
				"label": "Javanese"
			});
			langs.push(
			{
				"value": "Judeo-Arabic",
				"label": "Judeo-Arabic"
			});
			langs.push(
			{
				"value": "Judeo-Persian",
				"label": "Judeo-Persian"
			});
			langs.push(
			{
				"value": "Kabardian",
				"label": "Kabardian"
			});
			langs.push(
			{
				"value": "Kabyle",
				"label": "Kabyle"
			});
			langs.push(
			{
				"value": "Kachin",
				"label": "Kachin"
			});
			langs.push(
			{
				"value": "Kalaallisut",
				"label": "Kalaallisut"
			});
			langs.push(
			{
				"value": "Kalmyk",
				"label": "Kalmyk"
			});
			langs.push(
			{
				"value": "Kamba",
				"label": "Kamba"
			});
			langs.push(
			{
				"value": "Kannada",
				"label": "Kannada"
			});
			langs.push(
			{
				"value": "Kanuri",
				"label": "Kanuri"
			});
			langs.push(
			{
				"value": "Kara-Kalpak",
				"label": "Kara-Kalpak"
			});
			langs.push(
			{
				"value": "Karachay-Balkar",
				"label": "Karachay-Balkar"
			});
			langs.push(
			{
				"value": "Karelian",
				"label": "Karelian"
			});
			langs.push(
			{
				"value": "Karen",
				"label": "Karen"
			});
			langs.push(
			{
				"value": "Kashmiri",
				"label": "Kashmiri"
			});
			langs.push(
			{
				"value": "Kashubian",
				"label": "Kashubian"
			});
			langs.push(
			{
				"value": "Kawi",
				"label": "Kawi"
			});
			langs.push(
			{
				"value": "Kazakh",
				"label": "Kazakh"
			});
			langs.push(
			{
				"value": "Khasi",
				"label": "Khasi"
			});
			langs.push(
			{
				"value": "Khmer",
				"label": "Khmer"
			});
			langs.push(
			{
				"value": "Khoisan (Other)",
				"label": "Khoisan"
			});
			langs.push(
			{
				"value": "Khotanese",
				"label": "Khotanese"
			});
			langs.push(
			{
				"value": "Kimbundu",
				"label": "Kimbundu"
			});
			langs.push(
			{
				"value": "Kinyarwanda",
				"label": "Kinyarwanda"
			});
			langs.push(
			{
				"value": "Kirghiz",
				"label": "Kirghiz"
			});
			langs.push(
			{
				"value": "Klingon",
				"label": "Klingon"
			});
			langs.push(
			{
				"value": "Komi",
				"label": "Komi"
			});
			langs.push(
			{
				"value": "Kongo",
				"label": "Kongo"
			});
			langs.push(
			{
				"value": "Konkani",
				"label": "Konkani"
			});
			langs.push(
			{
				"value": "Korean",
				"label": "Korean"
			});
			langs.push(
			{
				"value": "Kosraean",
				"label": "Kosraean"
			});
			langs.push(
			{
				"value": "Kpelle",
				"label": "Kpelle"
			});
			langs.push(
			{
				"value": "Kru",
				"label": "Kru"
			});
			langs.push(
			{
				"value": "Kumyk",
				"label": "Kumyk"
			});
			langs.push(
			{
				"value": "Kurdish",
				"label": "Kurdish"
			});
			langs.push(
			{
				"value": "Kurukh",
				"label": "Kurukh"
			});
			langs.push(
			{
				"value": "Kutenai",
				"label": "Kutenai"
			});
			langs.push(
			{
				"value": "Kwanyama",
				"label": "Kwanyama"
			});
			langs.push(
			{
				"value": "Ladino",
				"label": "Ladino"
			});
			langs.push(
			{
				"value": "Lahnda",
				"label": "Lahnda"
			});
			langs.push(
			{
				"value": "Lamba",
				"label": "Lamba"
			});
			langs.push(
			{
				"value": "Lao",
				"label": "Lao"
			});
			langs.push(
			{
				"value": "Latin",
				"label": "Latin"
			});
			langs.push(
			{
				"value": "Latvian",
				"label": "Latvian"
			});
			langs.push(
			{
				"value": "Lezghian",
				"label": "Lezghian"
			});
			langs.push(
			{
				"value": "Limburgish",
				"label": "Limburgish"
			});
			langs.push(
			{
				"value": "Lingala",
				"label": "Lingala"
			});
			langs.push(
			{
				"value": "Lithuanian",
				"label": "Lithuanian"
			});
			langs.push(
			{
				"value": "Lojban",
				"label": "Lojban"
			});
			langs.push(
			{
				"value": "Low German",
				"label": "Low German"
			});
			langs.push(
			{
				"value": "Lower Sorbian",
				"label": "Lower Sorbian"
			});
			langs.push(
			{
				"value": "Lozi",
				"label": "Lozi"
			});
			langs.push(
			{
				"value": "Luba-Katanga",
				"label": "Luba-Katanga"
			});
			langs.push(
			{
				"value": "Luba-Lulua",
				"label": "Luba-Lulua"
			});
			langs.push(
			{
				"value": "Luiseno",
				"label": "Luiseno"
			});
			langs.push(
			{
				"value": "Lule Sami",
				"label": "Lule Sami"
			});
			langs.push(
			{
				"value": "Lunda",
				"label": "Lunda"
			});
			langs.push(
			{
				"value": "Luo (Kenya And Tanzania)",
				"label": "Luo (Kenya & Tanzania)"
			});
			langs.push(
			{
				"value": "Lushai",
				"label": "Lushai"
			});
			langs.push(
			{
				"value": "Luxembourgish",
				"label": "Luxembourgish"
			});
			langs.push(
			{
				"value": "Macedonian",
				"label": "Macedonian"
			});
			langs.push(
			{
				"value": "Madurese",
				"label": "Madurese"
			});
			langs.push(
			{
				"value": "Magahi",
				"label": "Magahi"
			});
			langs.push(
			{
				"value": "Maithili",
				"label": "Maithili"
			});
			langs.push(
			{
				"value": "Makasar",
				"label": "Makasar"
			});
			langs.push(
			{
				"value": "Malagasy",
				"label": "Malagasy"
			});
			langs.push(
			{
				"value": "Malay",
				"label": "Malay"
			});
			langs.push(
			{
				"value": "Malayalam",
				"label": "Malayalam"
			});
			langs.push(
			{
				"value": "Maltese",
				"label": "Maltese"
			});
			langs.push(
			{
				"value": "Manchu",
				"label": "Manchu"
			});
			langs.push(
			{
				"value": "Mandar",
				"label": "Mandar"
			});
			langs.push(
			{
				"value": "Mandarin",
				"label": "Mandarin"
			});
			langs.push(
			{
				"value": "Mandingo",
				"label": "Mandingo"
			});
			langs.push(
			{
				"value": "Manipuri",
				"label": "Manipuri"
			});
			langs.push(
			{
				"value": "Manobo Languages",
				"label": "Manobo Languages"
			});
			langs.push(
			{
				"value": "Manx",
				"label": "Manx"
			});
			langs.push(
			{
				"value": "Maori",
				"label": "Maori"
			});
			langs.push(
			{
				"value": "Marathi",
				"label": "Marathi"
			});
			langs.push(
			{
				"value": "Mari",
				"label": "Mari"
			});
			langs.push(
			{
				"value": "Marshall",
				"label": "Marshall"
			});
			langs.push(
			{
				"value": "Marwari",
				"label": "Marwari"
			});
			langs.push(
			{
				"value": "Masai",
				"label": "Masai"
			});
			langs.push(
			{
				"value": "Mayan Languages",
				"label": "Mayan Languages"
			});
			langs.push(
			{
				"value": "Mende",
				"label": "Mende"
			});
			langs.push(
			{
				"value": "Micmac",
				"label": "Micmac"
			});
			langs.push(
			{
				"value": "Minangkabau",
				"label": "Minangkabau"
			});
			langs.push(
			{
				"value": "Mirandese",
				"label": "Mirandese"
			});
			langs.push(
			{
				"value": "Miscellaneous Languages",
				"label": "Miscellaneous Languages"
			});
			langs.push(
			{
				"value": "Mohawk",
				"label": "Mohawk"
			});
			langs.push(
			{
				"value": "Moksha",
				"label": "Moksha"
			});
			langs.push(
			{
				"value": "Moldavian",
				"label": "Moldavian"
			});
			langs.push(
			{
				"value": "Mon-Khmer (Other)",
				"label": "Mon-Khmer"
			});
			langs.push(
			{
				"value": "Mongo",
				"label": "Mongo"
			});
			langs.push(
			{
				"value": "Mongolian",
				"label": "Mongolian"
			});
			langs.push(
			{
				"value": "Mossi",
				"label": "Mossi"
			});
			langs.push(
			{
				"value": "Multiple Languages",
				"label": "Multiple Languages"
			});
			langs.push(
			{
				"value": "Munda Languages",
				"label": "Munda Languages"
			});
			langs.push(
			{
				"value": "N'Ko",
				"label": "N'Ko"
			});
			langs.push(
			{
				"value": "Nahuatl",
				"label": "Nahuatl"
			});
			langs.push(
			{
				"value": "Nauru",
				"label": "Nauru"
			});
			langs.push(
			{
				"value": "Navajo",
				"label": "Navajo"
			});
			langs.push(
			{
				"value": "Ndonga",
				"label": "Ndonga"
			});
			langs.push(
			{
				"value": "Neapolitan",
				"label": "Neapolitan"
			});
			langs.push(
			{
				"value": "Nepal Bhasa",
				"label": "Nepal Bhasa"
			});
			langs.push(
			{
				"value": "Nepali",
				"label": "Nepali"
			});
			langs.push(
			{
				"value": "Nias",
				"label": "Nias"
			});
			langs.push(
			{
				"value": "Niger-Kordofanian (Other)",
				"label": "Niger-Kordofanian"
			});
			langs.push(
			{
				"value": "Nilo-Saharan (Other)",
				"label": "Nilo-Saharan"
			});
			langs.push(
			{
				"value": "Niuean",
				"label": "Niuean"
			});
			langs.push(
			{
				"value": "Nogai",
				"label": "Nogai"
			});
			langs.push(
			{
				"value": "Norse, Old",
				"label": "Norse, Old"
			});
			langs.push(
			{
				"value": "North American Indian (Other)",
				"label": "North American Indian"
			});
			langs.push(
			{
				"value": "North Ndebele",
				"label": "North Ndebele"
			});
			langs.push(
			{
				"value": "Northern Frisian",
				"label": "Northern Frisian"
			});
			langs.push(
			{
				"value": "Northern Sami",
				"label": "Northern Sami"
			});
			langs.push(
			{
				"value": "Northern Sotho",
				"label": "Northern Sotho"
			});
			langs.push(
			{
				"value": "Norwegian",
				"label": "Norwegian"
			});
			langs.push(
			{
				"value": "Norwegian Nynorsk",
				"label": "Norwegian Nynorsk"
			});
			langs.push(
			{
				"value": "Nubian Languages",
				"label": "Nubian Languages"
			});
			langs.push(
			{
				"value": "Nyamwezi",
				"label": "Nyamwezi"
			});
			langs.push(
			{
				"value": "Nyankole",
				"label": "Nyankole"
			});
			langs.push(
			{
				"value": "Nyoro",
				"label": "Nyoro"
			});
			langs.push(
			{
				"value": "Nzima",
				"label": "Nzima"
			});
			langs.push(
			{
				"value": "Occitan (Post 1500)",
				"label": "Occitan (Post 1500)"
			});
			langs.push(
			{
				"value": "Ojibwa",
				"label": "Ojibwa"
			});
			langs.push(
			{
				"value": "Old Church Slavonic",
				"label": "Old Church Slavonic"
			});
			langs.push(
			{
				"value": "Oriya",
				"label": "Oriya"
			});
			langs.push(
			{
				"value": "Oromo",
				"label": "Oromo"
			});
			langs.push(
			{
				"value": "Osage",
				"label": "Osage"
			});
			langs.push(
			{
				"value": "Ossetic",
				"label": "Ossetic"
			});
			langs.push(
			{
				"value": "Otomian Languages",
				"label": "Otomian Languages"
			});
			langs.push(
			{
				"value": "Pahlavi",
				"label": "Pahlavi"
			});
			langs.push(
			{
				"value": "Palauan",
				"label": "Palauan"
			});
			langs.push(
			{
				"value": "Pali",
				"label": "Pali"
			});
			langs.push(
			{
				"value": "Pampanga",
				"label": "Pampanga"
			});
			langs.push(
			{
				"value": "Pangasinan",
				"label": "Pangasinan"
			});
			langs.push(
			{
				"value": "Papiamento",
				"label": "Papiamento"
			});
			langs.push(
			{
				"value": "Papuan (Other)",
				"label": "Papuan"
			});
			langs.push(
			{
				"value": "Persian",
				"label": "Persian"
			});
			langs.push(
			{
				"value": "Philippine (Other)",
				"label": "Philippine"
			});
			langs.push(
			{
				"value": "Phoenician",
				"label": "Phoenician"
			});
			langs.push(
			{
				"value": "Pohnpeian",
				"label": "Pohnpeian"
			});
			langs.push(
			{
				"value": "Polish",
				"label": "Polish"
			});
			langs.push(
			{
				"value": "Portuguese",
				"label": "Portuguese"
			});
			langs.push(
			{
				"value": "Prakrit Languages",
				"label": "Prakrit Languages"
			});
			langs.push(
			{
				"value": "Punjabi",
				"label": "Punjabi"
			});
			langs.push(
			{
				"value": "Pushto",
				"label": "Pushto"
			});
			langs.push(
			{
				"value": "Quechua",
				"label": "Quechua"
			});
			langs.push(
			{
				"value": "Raeto-Romance",
				"label": "Raeto-Romance"
			});
			langs.push(
			{
				"value": "Rajasthani",
				"label": "Rajasthani"
			});
			langs.push(
			{
				"value": "Rapanui",
				"label": "Rapanui"
			});
			langs.push(
			{
				"value": "Rarotongan",
				"label": "Rarotongan"
			});
			langs.push(
			{
				"value": "Romance (Other)",
				"label": "Romance"
			});
			langs.push(
			{
				"value": "Romanian",
				"label": "Romanian"
			});
			langs.push(
			{
				"value": "Romany",
				"label": "Romany"
			});
			langs.push(
			{
				"value": "Rundi",
				"label": "Rundi"
			});
			langs.push(
			{
				"value": "Russian",
				"label": "Russian"
			});
			langs.push(
			{
				"value": "Salishan Languages",
				"label": "Salishan Languages"
			});
			langs.push(
			{
				"value": "Samaritan Aramaic",
				"label": "Samaritan Aramaic"
			});
			langs.push(
			{
				"value": "Sami Languages",
				"label": "Sami Languages"
			});
			langs.push(
			{
				"value": "Samoan",
				"label": "Samoan"
			});
			langs.push(
			{
				"value": "Sandawe",
				"label": "Sandawe"
			});
			langs.push(
			{
				"value": "Sango",
				"label": "Sango"
			});
			langs.push(
			{
				"value": "Sanskrit",
				"label": "Sanskrit"
			});
			langs.push(
			{
				"value": "Santali",
				"label": "Santali"
			});
			langs.push(
			{
				"value": "Sardinian",
				"label": "Sardinian"
			});
			langs.push(
			{
				"value": "Sasak",
				"label": "Sasak"
			});
			langs.push(
			{
				"value": "Scots",
				"label": "Scots"
			});
			langs.push(
			{
				"value": "Selkup",
				"label": "Selkup"
			});
			langs.push(
			{
				"value": "Semitic (Other)",
				"label": "Semitic"
			});
			langs.push(
			{
				"value": "Serbian",
				"label": "Serbian"
			});
			langs.push(
			{
				"value": "Serer",
				"label": "Serer"
			});
			langs.push(
			{
				"value": "Shan",
				"label": "Shan"
			});
			langs.push(
			{
				"value": "Shona",
				"label": "Shona"
			});
			langs.push(
			{
				"value": "Sichuan Yi",
				"label": "Sichuan Yi"
			});
			langs.push(
			{
				"value": "Sicilian",
				"label": "Sicilian"
			});
			langs.push(
			{
				"value": "Sidamo",
				"label": "Sidamo"
			});
			langs.push(
			{
				"value": "Sign Languages",
				"label": "Sign Languages"
			});
			langs.push(
			{
				"value": "Siksika",
				"label": "Siksika"
			});
			langs.push(
			{
				"value": "Sindhi",
				"label": "Sindhi"
			});
			langs.push(
			{
				"value": "Sinhalese",
				"label": "Sinhalese"
			});
			langs.push(
			{
				"value": "Sino-Tibetan (Other)",
				"label": "Sino-Tibetan"
			});
			langs.push(
			{
				"value": "Siouan Languages",
				"label": "Siouan Languages"
			});
			langs.push(
			{
				"value": "Skolt Sami",
				"label": "Skolt Sami"
			});
			langs.push(
			{
				"value": "Slave (Athapascan)",
				"label": "Slave (Athapascan)"
			});
			langs.push(
			{
				"value": "Slavic (Other)",
				"label": "Slavic"
			});
			langs.push(
			{
				"value": "Slovak",
				"label": "Slovak"
			});
			langs.push(
			{
				"value": "Slovenian",
				"label": "Slovenian"
			});
			langs.push(
			{
				"value": "Sogdian",
				"label": "Sogdian"
			});
			langs.push(
			{
				"value": "Somali",
				"label": "Somali"
			});
			langs.push(
			{
				"value": "Songhai",
				"label": "Songhai"
			});
			langs.push(
			{
				"value": "Soninke",
				"label": "Soninke"
			});
			langs.push(
			{
				"value": "Sorbian Languages",
				"label": "Sorbian Languages"
			});
			langs.push(
			{
				"value": "Sotho, Southern",
				"label": "Sotho, Southern"
			});
			langs.push(
			{
				"value": "South American Indian (Other)",
				"label": "South American Indian"
			});
			langs.push(
			{
				"value": "South Ndebele",
				"label": "South Ndebele"
			});
			langs.push(
			{
				"value": "Southern Altai",
				"label": "Southern Altai"
			});
			langs.push(
			{
				"value": "Southern Sami",
				"label": "Southern Sami"
			});
			langs.push(
			{
				"value": "Spanish; Castilian",
				"label": "Spanish; Castilian"
			});
			langs.push(
			{
				"value": "Sranan Togo",
				"label": "Sranan Togo"
			});
			langs.push(
			{
				"value": "Sukuma",
				"label": "Sukuma"
			});
			langs.push(
			{
				"value": "Sumerian",
				"label": "Sumerian"
			});
			langs.push(
			{
				"value": "Sundanese",
				"label": "Sundanese"
			});
			langs.push(
			{
				"value": "Susu",
				"label": "Susu"
			});
			langs.push(
			{
				"value": "Swahili",
				"label": "Swahili"
			});
			langs.push(
			{
				"value": "Swati",
				"label": "Swati"
			});
			langs.push(
			{
				"value": "Swedish",
				"label": "Swedish"
			});
			langs.push(
			{
				"value": "Swiss German",
				"label": "Swiss German"
			});
			langs.push(
			{
				"value": "Syriac",
				"label": "Syriac"
			});
			langs.push(
			{
				"value": "Tagalog",
				"label": "Tagalog"
			});
			langs.push(
			{
				"value": "Tahitian",
				"label": "Tahitian"
			});
			langs.push(
			{
				"value": "Tai (Other)",
				"label": "Tai"
			});
			langs.push(
			{
				"value": "Tajik",
				"label": "Tajik"
			});
			langs.push(
			{
				"value": "Tamashek",
				"label": "Tamashek"
			});
			langs.push(
			{
				"value": "Tamil",
				"label": "Tamil"
			});
			langs.push(
			{
				"value": "Tatar",
				"label": "Tatar"
			});
			langs.push(
			{
				"value": "Telugu",
				"label": "Telugu"
			});
			langs.push(
			{
				"value": "Tereno",
				"label": "Tereno"
			});
			langs.push(
			{
				"value": "Tetum",
				"label": "Tetum"
			});
			langs.push(
			{
				"value": "Thai",
				"label": "Thai"
			});
			langs.push(
			{
				"value": "Tibetan",
				"label": "Tibetan"
			});
			langs.push(
			{
				"value": "Tigre",
				"label": "Tigre"
			});
			langs.push(
			{
				"value": "Tigrinya",
				"label": "Tigrinya"
			});
			langs.push(
			{
				"value": "Timne",
				"label": "Timne"
			});
			langs.push(
			{
				"value": "Tiv",
				"label": "Tiv"
			});
			langs.push(
			{
				"value": "Tlingit",
				"label": "Tlingit"
			});
			langs.push(
			{
				"value": "Tok Pisin",
				"label": "Tok Pisin"
			});
			langs.push(
			{
				"value": "Tokelau",
				"label": "Tokelau"
			});
			langs.push(
			{
				"value": "Tonga (Nyasa)",
				"label": "Tonga (Nyasa)"
			});
			langs.push(
			{
				"value": "Tonga (Tonga Islands)",
				"label": "Tonga (Tonga Islands)"
			});
			langs.push(
			{
				"value": "Tsimshian",
				"label": "Tsimshian"
			});
			langs.push(
			{
				"value": "Tsonga",
				"label": "Tsonga"
			});
			langs.push(
			{
				"value": "Tswana",
				"label": "Tswana"
			});
			langs.push(
			{
				"value": "Tumbuka",
				"label": "Tumbuka"
			});
			langs.push(
			{
				"value": "Tupi Languages",
				"label": "Tupi Languages"
			});
			langs.push(
			{
				"value": "Turkish",
				"label": "Turkish"
			});
			langs.push(
			{
				"value": "Turkmen",
				"label": "Turkmen"
			});
			langs.push(
			{
				"value": "Tuvalu",
				"label": "Tuvalu"
			});
			langs.push(
			{
				"value": "Tuvinian",
				"label": "Tuvinian"
			});
			langs.push(
			{
				"value": "Twi",
				"label": "Twi"
			});
			langs.push(
			{
				"value": "Udmurt",
				"label": "Udmurt"
			});
			langs.push(
			{
				"value": "Ugaritic",
				"label": "Ugaritic"
			});
			langs.push(
			{
				"value": "Ukrainian",
				"label": "Ukrainian"
			});
			langs.push(
			{
				"value": "Umbundu",
				"label": "Umbundu"
			});
			langs.push(
			{
				"value": "Undetermined",
				"label": "Undetermined"
			});
			langs.push(
			{
				"value": "Upper Sorbian",
				"label": "Upper Sorbian"
			});
			langs.push(
			{
				"value": "Urdu",
				"label": "Urdu"
			});
			langs.push(
			{
				"value": "Uyghur",
				"label": "Uyghur"
			});
			langs.push(
			{
				"value": "Uzbek",
				"label": "Uzbek"
			});
			langs.push(
			{
				"value": "Vai",
				"label": "Vai"
			});
			langs.push(
			{
				"value": "Venda",
				"label": "Venda"
			});
			langs.push(
			{
				"value": "Vietnamese",
				"label": "Vietnamese"
			});
			langs.push(
			{
				"value": "Volapuk",
				"label": "Volapuk"
			});
			langs.push(
			{
				"value": "Votic",
				"label": "Votic"
			});
			langs.push(
			{
				"value": "Wakashan Languages",
				"label": "Wakashan Languages"
			});
			langs.push(
			{
				"value": "Walamo",
				"label": "Walamo"
			});
			langs.push(
			{
				"value": "Walloon",
				"label": "Walloon"
			});
			langs.push(
			{
				"value": "Waray",
				"label": "Waray"
			});
			langs.push(
			{
				"value": "Washo",
				"label": "Washo"
			});
			langs.push(
			{
				"value": "Welsh",
				"label": "Welsh"
			});
			langs.push(
			{
				"value": "Western Frisian",
				"label": "Western Frisian"
			});
			langs.push(
			{
				"value": "Wolof",
				"label": "Wolof"
			});
			langs.push(
			{
				"value": "Xhosa",
				"label": "Xhosa"
			});
			langs.push(
			{
				"value": "Yakut",
				"label": "Yakut"
			});
			langs.push(
			{
				"value": "Yao",
				"label": "Yao"
			});
			langs.push(
			{
				"value": "Yapese",
				"label": "Yapese"
			});
			langs.push(
			{
				"value": "Yiddish",
				"label": "Yiddish"
			});
			langs.push(
			{
				"value": "Yoruba",
				"label": "Yoruba"
			});
			langs.push(
			{
				"value": "Yupik Languages",
				"label": "Yupik Languages"
			});
			langs.push(
			{
				"value": "Zande",
				"label": "Zande"
			});
			langs.push(
			{
				"value": "Zapotec",
				"label": "Zapotec"
			});
			langs.push(
			{
				"value": "Zazaki",
				"label": "Zazaki"
			});
			langs.push(
			{
				"value": "Zenaga",
				"label": "Zenaga"
			});
			langs.push(
			{
				"value": "Zhuang",
				"label": "Zhuang"
			});
			langs.push(
			{
				"value": "Zulu",
				"label": "Zulu"
			});
			langs.push(
			{
				"value": "Zuni",
				"label": "Zuni"
			});
			return langs;
		};

		service.getRosterTerminationReasons = function getRosterTerminationReasons()
		{
			var reasons = [];
			reasons.push(
			{
				"value": "39",
				"label": "Assigned member status ended; roster transferred per physician request"
			});
			reasons.push(
			{
				"value": "59",
				"label": "Enrolment ended; patient out of geographic area"
			});
			reasons.push(
			{
				"value": "57",
				"label": "Enrolment terminated by patient"
			});
			reasons.push(
			{
				"value": "12",
				"label": "Health Number error"
			});
			reasons.push(
			{
				"value": "38",
				"label": "Long Term Care enrolment ended; patient has left Long Term Care"
			});
			reasons.push(
			{
				"value": "82",
				"label": "Ministry has not received enrolment/ Consent form"
			});
			reasons.push(
			{
				"value": "60",
				"label": "No current eligibility"
			});
			reasons.push(
			{
				"value": "73",
				"label": "No current eligibility"
			});
			reasons.push(
			{
				"value": "74",
				"label": "No current eligibility"
			});
			reasons.push(
			{
				"value": "37",
				"label": "Original enrolment ended; patient now enrolled as Long Term Care"
			});
			reasons.push(
			{
				"value": "36",
				"label": "Original enrolment ended; patient now re-enroled"
			});
			reasons.push(
			{
				"value": "24",
				"label": "Patient added to roster in error"
			});
			reasons.push(
			{
				"value": "14",
				"label": "Patient identified as deceased on ministry database"
			});
			reasons.push(
			{
				"value": "51",
				"label": "Patient no longer meets selection criteria for your roster"
			});
			reasons.push(
			{
				"value": "41",
				"label": "Patient no longer meets selection criteria for your roster - assigned to another physician"
			});
			reasons.push(
			{
				"value": "61",
				"label": "Patient out of geographic area; address over-ride applied"
			});
			reasons.push(
			{
				"value": "62",
				"label": "Patient out of geographic area; address over-ride removed"
			});
			reasons.push(
			{
				"value": "35",
				"label": "Patient transferred from roster per physician request"
			});
			reasons.push(
			{
				"value": "42",
				"label": "Physician ended enrolment; patient entered Long Term Care facility"
			});
			reasons.push(
			{
				"value": "54",
				"label": "Physician ended enrolment; patient left province"
			});
			reasons.push(
			{
				"value": "53",
				"label": "Physician ended enrolment; patient moved out of geographic area"
			});
			reasons.push(
			{
				"value": "56",
				"label": "Physician ended enrolment; per patient request"
			});
			reasons.push(
			{
				"value": "44",
				"label": "Physician ended patient enrolment"
			});
			reasons.push(
			{
				"value": "40",
				"label": "Physician reported member as deceased"
			});
			reasons.push(
			{
				"value": "32",
				"label": "Pre-member/ Assigned member ended; now enrolled or registered with photo health card"
			});
			reasons.push(
			{
				"value": "30",
				"label": "Pre-member/ Assigned member ended; now enrolled or registered with red and white health card"
			});
			reasons.push(
			{
				"value": "33",
				"label": "Termination reason cannot be released (due to patient confidentiality)"
			});
			reasons.push(
			{
				"value": "84",
				"label": "Termination reason cannot be released (due to patient confidentiality)"
			});
			reasons.push(
			{
				"value": "90",
				"label": "Termination reason cannot be released (due to patient confidentiality)"
			});
			reasons.push(
			{
				"value": "91",
				"label": "Termination reason cannot be released (due to patient confidentiality)"
			});
			return reasons;
		};

		service.getSecurityQuestions = function getSecurityQuestions()
		{
			var questions = [];
			questions.push(
			{
				"value": "What was the name of your high school?",
				"label": "What was the name of your high school?"
			});
			questions.push(
			{
				"value": "What is your spouse's maiden name?",
				"label": "What is your spouse's maiden name?"
			});
			questions.push(
			{
				"value": "What is the name of the street you grew up on?",
				"label": "What is the name of the street you grew up on?"
			});
			questions.push(
			{
				"value": "In what city were you born?",
				"label": "In what city were you born?"
			});
			questions.push(
			{
				"value": "What is the middle name of your oldest child?",
				"label": "What is the middle name of your oldest child?"
			});
			questions.push(
			{
				"value": "What is your oldest cousin's first name?",
				"label": "What is your oldest cousin's first name?"
			});
			questions.push(
			{
				"value": "What is your mother's middle name?",
				"label": "What is your mother's middle name?"
			});
			questions.push(
			{
				"value": "What is your grandmother's first name?",
				"label": "What is your grandmother's first name?"
			});
			questions.push(
			{
				"value": "What year did you graduate from high school?",
				"label": "What year did you graduate from high school?"
			});
			return questions;
		};

		service.getConsultUrgencies = function getConsultUrgencies()
		{
			var urgencies = [];
			urgencies.push(
			{
				value: "2",
				name: "Non-Urgent"
			});
			urgencies.push(
			{
				value: "1",
				name: "Urgent"
			});
			urgencies.push(
			{
				value: "3",
				name: "Return"
			});
			return urgencies;
		};

		service.getConsultRequestStatuses = function getConsultRequestStatuses()
		{
			var statuses = [];
			statuses.push(
			{
				value: "1",
				name: "Not Complete"
			});
			statuses.push(
			{
				value: "2",
				name: "Preliminary Pending Specialist"
			});
			statuses.push(
			{
				value: "3",
				name: "Pending Callback"
			});
			statuses.push(
			{
				value: "4",
				name: "Completed"
			});
			statuses.push(
			{
				value: "5",
				name: "Cancelled"
			});
			statuses.push(
			{
				value: "6",
				name: "Appointment Booked"
			});
			statuses.push(
			{
				value: "7",
				name: "Deleted"
			});
			return statuses;
		};

		service.getConsultResponseStatuses = function getConsultResponseStatuses()
		{
			var statuses = [];
			statuses.push(
			{
				value: 1,
				name: "Not Complete"
			});
			statuses.push(
			{
				value: 2,
				name: "Pending Referring Doctor Callback"
			});
			statuses.push(
			{
				value: 3,
				name: "Pending Patient Callback"
			});
			statuses.push(
			{
				value: 4,
				name: "Completed"
			});
			statuses.push(
			{
				value: 5,
				name: "Cancelled"
			});
			return statuses;
		};

		service.getHours = function getHours()
		{
			return ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12",
				"13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"
			];
		};

		service.getMinutes = function getMinutes()
		{
			return ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10",
				"11", "12", "13", "14", "15", "16", "17", "18", "19", "20",
				"21", "22", "23", "24", "25", "26", "27", "28", "29", "30",
				"31", "32", "33", "34", "35", "36", "37", "38", "39", "40",
				"41", "42", "43", "44", "45", "46", "47", "48", "49", "50",
				"51", "52", "53", "54", "55", "56", "57", "58", "59"
			];
		};

		service.getRxInteractionLevels = function getRxInteractionLevels()
		{
			var levels = [];
			levels.push(
			{
				value: 0,
				name: "Not Specified"
			});
			levels.push(
			{
				value: 1,
				name: "Low"
			});
			levels.push(
			{
				value: 2,
				name: "Medium"
			});
			levels.push(
			{
				value: 3,
				name: "High"
			});
			levels.push(
			{
				value: 4,
				name: "None"
			});
			return levels;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/summaryService.js":
/*!***********************************************!*\
  !*** ./src/common/services/summaryService.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Services").service("summaryService", [
	'$http', '$q',
	function($http, $q)
	{
		var service = {};

		service.apiPath = '../ws/rs/recordUX';

		service.getSummaryHeaders = function(demographicNo, key)
		{
			var deferred = $q.defer();

			$http.get(service.apiPath + '/' + encodeURIComponent(demographicNo) +
				'/summary/' + key).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("summaryService::getSummaryHeaders error", errors);
					deferred.reject("An error occurred while fetching summary headers");
				});

			return deferred.promise;
		};

		service.getFullSummary = function(demographicNo, summaryCode)
		{
			var deferred = $q.defer();

			$http.get(service.apiPath + '/' + encodeURIComponent(demographicNo) +
				'/fullSummary/' + summaryCode).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("summaryService::getFullSummary error", errors);
					deferred.reject("An error occurred while fetching full summary");
				});

			return deferred.promise;
		};

		service.getFamilyHistory = function(demographicNo)
		{
			var deferred = $q.defer();

			$http.get(service.apiPath + '/' + encodeURIComponent(demographicNo) +
				'/getFamilyHistory').then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("summaryService::getFamilyHistory error", errors);
					deferred.reject("An error occurred while fetching family history");
				});

			return deferred.promise;
		};

		service.getMedicalHistory = function(demographicNo)
		{
			var deferred = $q.defer();

			$http.get(service.apiPath + '/' + encodeURIComponent(demographicNo) +
				'/getMedicalHistory').then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("summaryService::getMedicalHistory error", errors);
					deferred.reject("An error occurred while fetching medical history");
				});

			return deferred.promise;
		};

		service.getSocialHistory = function getSocialHistory(demographicNo)
		{
			var deferred = $q.defer();

			$http.get(service.apiPath + '/' + encodeURIComponent(demographicNo) +
				'/getSocialHistory').then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("summaryService::getSocialHistory error", errors);
					deferred.reject("An error occurred while fetching social history");
				});

			return deferred.promise;
		};

		service.getOngoingConcerns = function(demographicNo)
		{
			var deferred = $q.defer();

			$http.get(service.apiPath + '/' + encodeURIComponent(demographicNo) +
				'/getOngoingConcerns').then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("summaryService::getOngoingConcerns error", errors);
					deferred.reject("An error occurred while fetching ongoing concerns");
				});

			return deferred.promise;
		};

		service.getOtherMeds = function getOtherMeds(demographicNo)
		{
			var deferred = $q.defer();

			$http.get(service.apiPath + '/' + encodeURIComponent(demographicNo) +
				'/getOtherMeds').then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("summaryService::getOtherMeds error", errors);
					deferred.reject("An error occurred while fetching other meds");
				});

			return deferred.promise;
		};

		service.getReminders = function getReminders(demographicNo)
		{
			var deferred = $q.defer();

			$http.get(service.apiPath + '/' + encodeURIComponent(demographicNo) +
				'/getReminders').then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("summaryService::getReminders error", errors);
					deferred.reject("An error occurred while fetching reminders");
				});

			return deferred.promise;
		};

		service.getRiskFactors = function getRiskFactors(demographicNo)
		{
			var deferred = $q.defer();

			$http.get(service.apiPath + '/' + encodeURIComponent(demographicNo) +
				'/getRiskFactors').then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("summaryService::getRiskFactors error", errors);
					deferred.reject("An error occurred while fetching risk factors");
				});

			return deferred.promise;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/systemPreferenceService.js":
/*!********************************************************!*\
  !*** ./src/common/services/systemPreferenceService.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

    Copyright (c) 2012-2018. CloudPractice Inc. All Rights Reserved.
    This software is published under the GPL GNU General Public License.
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    This software was written for
    CloudPractice Inc.
    Victoria, British Columbia
    Canada

 */

angular.module("Common.Services").service("systemPreferenceService", [
	'$q',
	'junoHttp',
	function($q, junoHttp)
	{
		var service = {};

		service.apiPath = '../ws/rs/systemPreference';

		service.getPreference = function getPreference(key, defaultValue)
		{
			var deferred = $q.defer();
			var config = Juno.Common.ServiceHelper.configHeaders();
			config.params = {
				default: defaultValue
			};

			junoHttp.get(service.apiPath + '/' + key, config).then(
				function success(response) {
					deferred.resolve(response.data);
				},
				function error(error) {
					console.log("systemPreferenceService::getPreference error", error);
					deferred.reject("An error occurred while getting system preference data");
				});
			return deferred.promise;
		};

		service.setPreference = function setPreference(key, value)
		{
			var deferred = $q.defer();

			junoHttp.put(service.apiPath + '/' + key, value).then(
				function success(response) {
					deferred.resolve(response.data);
				},
				function error(error) {
					console.log("systemPreferenceService::setPreference error", error);
					deferred.reject("An error occurred while setting system preference data");
				});
			return deferred.promise;
		};

		service.isPreferenceEnabled = function isPreferenceEnabled(key, defaultValue)
		{
			var deferred = $q.defer();
			var config = Juno.Common.ServiceHelper.configHeaders();
			config.params = {
				default: defaultValue
			};

			junoHttp.get(service.apiPath + '/' + key + '/enabled', config).then(
				function success(response) {
					deferred.resolve(response.data);
				},
				function error(error) {
					console.log("systemPreferenceService::isPreferenceEnabled error", error);
					deferred.reject("An error occurred while getting system preference enabled status");
				});
			return deferred.promise;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/ticklerService.js":
/*!***********************************************!*\
  !*** ./src/common/services/ticklerService.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Services").service("ticklerService", [
	'$http', '$q',
	function($http, $q)
	{
		var service = {};

		service.apiPath = '../ws/rs/tickler';

		service.setCompleted = function setCompleted(ticklerIds)
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + '/complete',
				method: "POST",
				data: JSON.stringify(
				{
					"ticklers": ticklerIds
				}),
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("ticklerService::setCompleted error", errors);
					deferred.reject("An error occurred while setting ticklers to completed status");
				});

			return deferred.promise;
		};

		service.setDeleted = function setDeleted(ticklerIds)
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + '/delete',
				method: "POST",
				data: JSON.stringify(
				{
					"ticklers": ticklerIds
				}),
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("ticklerService::setDeleted error", errors);
					deferred.reject("An error occurred while setting ticklers to deleted status");
				});

			return deferred.promise;
		};

		service.search = function search(filter, startIndex, limit)
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + '/search?startIndex=' +
					encodeURIComponent(startIndex) +
					'&limit=' +
					encodeURIComponent(limit),
				method: "POST",
				data: JSON.stringify(filter),
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("ticklerService::search error", errors);
					deferred.reject("An error occurred while searching ticklers");
				});

			return deferred.promise;
		};

		service.update = function update(tickler)
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + '/update',
				method: "POST",
				data: JSON.stringify(tickler),
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("ticklerService::update error", errors);
					deferred.reject("An error occurred while updating tickler");
				});

			return deferred.promise;
		};

		service.getTextSuggestions = function getTextSuggestions()
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + '/textSuggestions',
				method: "GET"
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("ticklerService::getTextSuggestions error", errors);
					deferred.reject("An error occurred while getting tickler text suggestions");
				});

			return deferred.promise;
		};

		service.add = function add(tickler)
		{
			var deferred = $q.defer();

			$http(
			{
				url: service.apiPath + '/add',
				method: "POST",
				data: JSON.stringify(tickler),
				headers: Juno.Common.ServiceHelper.configHeaders()
			}).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("ticklerService::add error", errors);
					deferred.reject("An error occurred while saving tickler");
				});

			return deferred.promise;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/services/uxService.js":
/*!******************************************!*\
  !*** ./src/common/services/uxService.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Services").service("uxService", [
	'$http', '$q',
	function($http, $q)
	{
		var service = {};

		service.apiPath = '../ws/rs/recordUX';

		service.menu = function menu(demographicNo)
		{
			var deferred = $q.defer();

			$http.get(service.apiPath + '/' + encodeURIComponent(demographicNo) +
				'/recordMenu').then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("uxService::menu error", errors);
					deferred.reject("An error occurred while fetching menu");
				});

			return deferred.promise;
		};

		service.searchTemplates = function searchTemplates(search, startIndex, itemsToReturn)
		{
			var deferred = $q.defer();

			$http.post(service.apiPath + '/searchTemplates?startIndex=' +
				encodeURIComponent(startIndex) + "&itemsToReturn=" +
				encodeURIComponent(itemsToReturn), search).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("uxService::searchTemplates error", errors);
					deferred.reject("An error occurred while searching templates");
				});

			return deferred.promise;
		};

		service.getTemplate = function getTemplate(name)
		{
			var deferred = $q.defer();
			$http.post(service.apiPath + '/template', name).then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("uxService::getTemplate error", errors);
					deferred.reject("An error occurred while fetching template");
				});

			return deferred.promise;
		};

		service.getDisplayProperties = function getDisplayProperties()
		{
			var deferred = $q.defer();
			$http.get(service.apiPath + '/properties').then(
				function success(results)
				{
					deferred.resolve(results.data);
				},
				function error(errors)
				{
					console.log("uxService:getDisplayProperties error", errors);
					deferred.reject("An error occurred while fetching display properties.")
				}
			);
			return deferred.promise;
		};

		return service;
	}
]);

/***/ }),

/***/ "./src/common/util/angular-util.js":
/*!*****************************************!*\
  !*** ./src/common/util/angular-util.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module("Common.Util").service("angularUtil", [
	'$window',

	function($window)
	{
		var service = {};

		// Set to true if we are in a mobile view (<768px), false if otherwise
		service.inMobileView = function inMobileView()
		{
			return $window.innerWidth < 768;
		};

		return service;
	}

]);

/***/ }),

/***/ "./src/common/util/junoHttp.js":
/*!*************************************!*\
  !*** ./src/common/util/junoHttp.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('Common.Util').service("junoHttp", [
        '$http',
        '$window',
        '$q',

        function (
            $http,
            $window,
            $q
        )
        {
            // This service wraps the methods in $http so that authentication can be added.
            var http_util = {};

            http_util.request =  function request(request_hash)
            {
                var deferred = $q.defer();

                $http(request_hash).then(
                    function success(response)
                    {
                        http_util.success_function(response, request_hash, deferred);
                    }, function error(errors)
                    {
                        http_util.errors_function(errors, request_hash, deferred);
                    }, function notify(progress)
                    {
                        deferred.notify(progress);
                    });

                return deferred.promise;
            };

            http_util.success_function = function success_function(response, request_hash, deferred)
            {
                var request_result = response;
                try {
                    if (request_result.data.status === 'SUCCESS') {
                        var results = {
                            meta: angular.copy(request_result.data.headers),
                            data: angular.copy(request_result.data.body)
                        };
                        deferred.resolve(results);
                    }
                    else if (request_result.data.status === 'ERROR'){
                        var errors = {
                            meta: angular.copy(request_result.data.headers),
                            data: angular.copy(request_result.data.error.message)
                        };
                        deferred.reject(errors);
                    }
                    else {
                        throw "Invalid Response Status";
                    }
                }
                catch(e) {
                    var errors = {
                        meta: {},
                        data: "An Error has occurred. please contact technical support"
                    };
                    deferred.reject(errors);
                }
            };

            http_util.errors_function = function errors_function(errors, request_hash, deferred)
            {
                deferred.reject(errors);
            };

            http_util.call = function call(method, url, data)
            {
                var request_hash = {
                    method: method,
                    url: url,
                    data: data
                };
                return http_util.request(request_hash);
            };

            http_util.get = function get(url, config)
            {
                var request_hash = {
                    method: 'GET',
                    url: url
                };
                Juno.Common.Util.mergeHash(request_hash, config);
                return http_util.request(request_hash);
            };

            http_util.post = function post(url,data)
            {
                var request_hash = {
                    method: 'POST',
                    url: url,
                    data: data
                };
                return http_util.request(request_hash);
            };

            http_util.put = function put(url,data)
            {
                var request_hash = {
                    method: 'PUT',
                    url: url,
                    data: data
                };
                return http_util.request(request_hash);
            };

            // 'delete' is a reserved keyword -- leave me alone
            http_util.del = function del(url,data)
            {
                var request_hash = {
                    method: 'DELETE',
                    url: url,
                    data: data
                };
                return http_util.request(request_hash);
            };

            return http_util;
        }
    ]
);


/***/ }),

/***/ "./src/common/util/module.js":
/*!***********************************!*\
  !*** ./src/common/util/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */

angular.module('Common.Util', []);

/***/ }),

/***/ "./src/common/util/searchListHelper.js":
/*!*********************************************!*\
  !*** ./src/common/util/searchListHelper.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

    Copyright (c) 2012-2018. CloudPractice Inc. All Rights Reserved.
    This software is published under the GPL GNU General Public License.
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    This software was written for
    CloudPractice Inc.
    Victoria, British Columbia
    Canada

 */

window.Juno = window.Juno || {};
Juno.Common = Juno.Common || {};

Juno.Common.SearchListHelper = function SearchListHelper(defaultParams, searchParams)
{
	var me = this;

	me.searchParams = searchParams || {};
	me.defaults = {
		page: 1,
		perPage: 10,
	};

	me.initSearchParameters = function initSearchParameters()
	{
		var fieldName;

		// Merge default params
		if(Juno.Common.Util.exists(defaultParams))
		{
			for(fieldName in defaultParams)
			{
				if(defaultParams.hasOwnProperty(fieldName))
				{
					me.defaults[fieldName] = defaultParams[fieldName];
				}
			}
		}
	};

	me.getParams = function getParams()
	{
		var outParams = {};
		for(var fieldName in me.searchParams)
		{
			if(me.searchParams.hasOwnProperty(fieldName))
			{
				outParams[fieldName] = me.searchParams[fieldName];
			}
		}
		for(var fieldName in me.defaults)
		{
			if(!outParams.hasOwnProperty(fieldName))
			{
				outParams[fieldName] = me.defaults[fieldName];
			}
		}
		return outParams;
	};

	me.initSearchParameters();
};


/***/ }),

/***/ "./src/common/util/serviceHelper.js":
/*!******************************************!*\
  !*** ./src/common/util/serviceHelper.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


window.Juno = window.Juno || {};
Juno.Common = Juno.Common || {};

Juno.Common.ServiceHelper = {};

Juno.Common.ServiceHelper.configHeaders = function configHeaders() {
	return {
		headers: {
			"Content-Type": "application/json",
			"Accept": "application/json"
		}
	};
};

Juno.Common.ServiceHelper.configHeadersWithCache = function configHeadersWithCache()
{
	return {
		headers: {
			"Content-Type": "application/json",
			"Accept": "application/json"
		},
		cache: true
	};
};


/***/ }),

/***/ "./src/common/util/util.js":
/*!*********************************!*\
  !*** ./src/common/util/util.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(moment, $) {

if (!window.Juno) window.Juno = {};


if (!Juno.Common) Juno.Common = {};

Juno.Common.Util = {};

Juno.Common.Util.settings = {
	datetime_format: "YYYY-MM-DDTHH:mm:ssZ",
	datetime_no_timezone_format: "YYYY-MM-DDTHH:mm:ss",
	time_format: "h:mma",
	date_format: "YYYY-MM-DD",
	dayofweek_format: "dddd"
};

Juno.Common.Util.exists = function exists(object) {
	// not undefined and not null
	return angular.isDefined(object) && object !== null;
};

Juno.Common.Util.isBlank = function isBlank(object) {
	// undefined or null or empty string
	return !Juno.Common.Util.exists(object) || object === "";
};

Juno.Common.Util.toArray = function toArray(obj) { //convert single object to array
	if (obj instanceof Array) return obj;
	else if (obj == null) return [];
	else return [obj];
};

Juno.Common.Util.pad0 = function pad0(n) {
	var s = n.toString();
	if (s.length == 1) s = "0" + s;
	return s;
};

Juno.Common.Util.toTrimmedString = function toTrimmedString(s) {
	if (s == null) s = "";
	if (s instanceof String) s = s.trim();
	return s;
};

Juno.Common.Util.formatDate = function formatDate(d) {
	d = Juno.Common.Util.toTrimmedString(d);
	if (d) {
		if (!(d instanceof Date)) d = new Date(d);
		d = d.getFullYear() + "-" + Juno.Common.Util.pad0(d.getMonth() + 1) + "-" + Juno.Common.Util.pad0(d.getDate());
	}
	return d;
};

Juno.Common.Util.formatTime = function formatTime(d) {
	d = Juno.Common.Util.toTrimmedString(d);
	if (d) {
		if (!(d instanceof Date)) d = new Date(d);
		d = Juno.Common.Util.pad0(d.getHours()) + ":" + Juno.Common.Util.pad0(d.getMinutes());
	}
	return d;
};

Juno.Common.Util.formatMomentDate = function formatMomentDate(d) {
	return d.format(Juno.Common.Util.settings.date_format);
};

Juno.Common.Util.formatMomentTime = function formatMomentTime(d, format) {
	if(!format) {
		format = Juno.Common.Util.settings.time_format;
	}
	return d.format(format);
};

Juno.Common.Util.formatMomentDateTimeNoTimezone = function formatMomentDateTimeNoTimezone(d) {
	return d.format(Juno.Common.Util.settings.datetime_no_timezone_format);
};

Juno.Common.Util.getDateMoment = function getDateMoment(date_string)
{
	return moment.utc(date_string, Juno.Common.Util.settings.date_format, true);
};

Juno.Common.Util.getTimeMoment = function getTimeMoment(time_string)
{
	return moment.utc(time_string, Juno.Common.Util.settings.time_format, true);
};

Juno.Common.Util.getDateMomentFromComponents = function getDateMomentFromComponents(year_string, month_string, day_string)
{
	return moment.utc({year: year_string, month: month_string, day: day_string});
};

Juno.Common.Util.getDateAndTimeMoment = function getCombinedMoment(dateString, timeString)
{
	return moment.utc(dateString + " " + timeString,
		Juno.Common.Util.settings.date_format + " " +
		Juno.Common.Util.settings.time_format, true);
};

Juno.Common.Util.getDatetimeNoTimezoneMoment = function getDatetimeNoTimezoneMoment(datetime_string)
{
	return moment.utc(datetime_string,
		Juno.Common.Util.settings.datetime_no_timezone_format, true);
};

Juno.Common.Util.validateDateString = function validateDateString(
	dateString, displayErrors, field, fieldDisplayName, required)
{
	if(Juno.Common.Util.exists(dateString))
	{
		var moment = Juno.Common.Util.getDateMoment(dateString);
		if(!moment.isValid())
		{
			displayErrors.add_field_error(field, fieldDisplayName + ' is invalid');
		}
	}
	else if(required)
	{
		displayErrors.add_field_error(field, fieldDisplayName + 'is required');
	}
};

Juno.Common.Util.validateTimeString = function validateTimeString(
	timeString, displayErrors, field, fieldDisplayName, required)
{
	if (Juno.Common.Util.exists(timeString))
	{
		var moment = Juno.Common.Util.getTimeMoment(timeString);
		if (!moment.isValid())
		{
			displayErrors.add_field_error(field, fieldDisplayName + 'is invalid');
		}
	}
	else if (required)
	{
		displayErrors.add_field_error(field, fieldDisplayName + 'is required');
	}
};

Juno.Common.Util.addNewLine = function addNewLine(line, mssg) {
	if (line == null || line.trim() == "") return mssg;

	if (mssg == null || mssg.trim() == "") mssg = line.trim();
	else mssg += "\n" + line.trim();

	return mssg;
};

Juno.Common.Util.calcAge = function calcAge(dobYear, dobMonth, dobDay)
 {

	var dateOfBirth = new Date(parseInt(dobYear, 10), parseInt(dobMonth, 10), parseInt(dobDay, 10));
	var currDate = new Date();

	var years = (currDate.getFullYear() - dateOfBirth.getFullYear());

	if (currDate.getMonth() < dateOfBirth.getMonth() ||
		currDate.getMonth() == dateOfBirth.getMonth() && currDate.getDate() < dateOfBirth.getDate())
	{
		years--;
	}
	return years;
};

Juno.Common.Util.isInArray = function isInArray(value, array) 
{
	return array.indexOf(value) > -1;
};

/**
 * recursively merges two js hashes. the baseHash will be modified
 * @param baseHash
 * @param toMerge
 */
Juno.Common.Util.mergeHash = function mergeHash(baseHash, toMerge)
{
	if (toMerge === 'undefined') {
		return false;
	}
	$.extend(true, baseHash, toMerge);
	return true;
};

Juno.Common.Util.noNull = function noNull(val)
{
    if (typeof val === 'string')
    {
        val =  val.trim();
    }
    else if ( val === null)
    {
		val = "";
    }

    return val;
};

Juno.Common.Util.isUndefinedOrNull = function isUndefinedOrNull(val)
{
	return angular.isUndefined(val) || val === null;
};

Juno.Common.Util.isDefinedAndNotNull = function isDefinedAndNotNull(val)
{
	return (angular.isDefined(val) && val !== null);
};

Juno.Common.Util.objectArrayIndexOf = function objectArrayIndexOf(array, searchTerm, property)
{
	for(var i = 0, len = array.length; i < len; i++) {
		if (array[i][property] === searchTerm) return i;
	}
	return -1;
};

Juno.Common.Util.isIntegerString = function isIntegerString(string)
{
	var parsed_string = parseInt(string);

	if (/^-?\d+$/.test(string.toString()))
	{
		return true;
	}

	return false;
};

Juno.Common.Util.escapeHtml = function escapeHtml(str)
{
	var entityMap = {
		"&": "&amp;",
		"<": "&lt;",
		">": "&gt;",
		'"': '&quot;',
		"'": '&#39;',
		"/": '&#x2F;'
	};

	return String(str).replace(/[&<>"'\/]/g, function (s)
	{
		return entityMap[s];
	});
};

Juno.Common.Util.formatName = function formatName(firstName, lastName)
{
	if(!lastName && !firstName)
	{
		return null;
	}
	else if(!firstName)
	{
		return lastName;
	}
	else if(!lastName)
	{
		return firstName;
	}

	return lastName + ', ' + firstName;
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! moment */ "./node_modules/moment/moment.js"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/consults/common.js":
/*!********************************!*\
  !*** ./src/consults/common.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


window.Juno = window.Juno ||
{};
Juno.Consults = Juno.Consults ||
{};

Juno.Consults.Common = {};

Juno.Consults.Common.sortAttachmentDocs = function sortAttachmentDocs(arrayOfDocs)
{
	arrayOfDocs.sort(function(doc1, doc2)
	{
		if (doc1.documentType < doc2.documentType) return -1;
		else if (doc1.documentType > doc2.documentType) return 1;
		else
		{
			if (doc1.displayName < doc2.displayName) return -1;
			else if (doc1.displayName > doc2.displayName) return 1;
		}
		return 0;
	});
};

/***/ }),

/***/ "./src/consults/consultRequestAttachmentController.js":
/*!************************************************************!*\
  !*** ./src/consults/consultRequestAttachmentController.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {angular.module('Consults').controller('Consults.ConsultRequestAttachmentController', [

	'$uibModalInstance',
	'consultService',
	'consult',

	function(
		$uibModalInstance,
		consultService,
		consult)
	{

		var controller = this;

		controller.atth = {};
		controller.atth.patientName = consult.demographic.lastName + ", " + consult.demographic.firstName;
		controller.atth.attachedDocs = consult.attachments;
		if (controller.atth.attachedDocs[0] != null) controller.atth.selectedAttachedDoc = controller.atth.attachedDocs[0];

		var consultId = 0;

		if (consult.id != null) consultId = consult.id;
		consultService.getRequestAttachments(consultId, consult.demographicId).then(
			function success(results)
			{
				if (consult.availableDocs == null) consult.availableDocs = Juno.Common.Util.toArray(results);
				controller.atth.availableDocs = consult.availableDocs;
				if (controller.atth.availableDocs[0] != null) controller.atth.selectedAvailableDoc = controller.atth.availableDocs[0];
			},
			function error(errors)
			{
				console.log(errors);
			});

		controller.openDoc = function openDoc(doc)
		{
			window.open("../" + doc.url);
		};

		controller.attach = function attach()
		{
			if (controller.atth.selectedAvailableDoc == null) return;

			controller.atth.attachedDocs.push(controller.atth.selectedAvailableDoc);
			controller.atth.selectedAttachedDoc = controller.atth.selectedAvailableDoc;
			controller.atth.selectedAttachedDoc.attached = true;

			//Get index to remove by document id and document type
			var removeIndex = controller.atth.availableDocs.map(function(item)
			{
				return item.documentNo+item.documentType;
			}).indexOf(controller.atth.selectedAvailableDoc.documentNo+controller.atth.selectedAvailableDoc.documentType);
			controller.atth.availableDocs.splice(removeIndex, 1);

			var selectionIndex = $("#selAvailDoc")[0].selectedIndex;
			if (selectionIndex >= controller.atth.availableDocs.length) selectionIndex = controller.atth.availableDocs.length - 1;
			controller.atth.selectedAvailableDoc = controller.atth.availableDocs[selectionIndex];

			consult.attachmentsChanged = true;
		};

		controller.detach = function detach()
		{
			if (controller.atth.selectedAttachedDoc == null) return;

			controller.atth.availableDocs.push(controller.atth.selectedAttachedDoc);
			controller.atth.selectedAvailableDoc = controller.atth.selectedAttachedDoc;
			controller.atth.selectedAvailableDoc.attached = false;

			//Get index to remove by document id and document type
			var removeIndex = controller.atth.attachedDocs.map(function(item)
			{
				return item.documentNo+item.documentType;
			}).indexOf(controller.atth.selectedAttachedDoc.documentNo+controller.atth.selectedAttachedDoc.documentType);
			controller.atth.attachedDocs.splice(removeIndex, 1);

			var selectionIndex = $("#selAttachDoc")[0].selectedIndex;
			if (selectionIndex >= controller.atth.attachedDocs.length) selectionIndex = controller.atth.attachedDocs.length - 1;
			controller.atth.selectedAttachedDoc = controller.atth.attachedDocs[selectionIndex];

			consult.attachmentsChanged = true;
		};

		controller.done = function done()
		{
			console.log('CLOSE MODAL');
			$uibModalInstance.close();
		};
	}
]);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/consults/consultRequestController.js":
/*!**************************************************!*\
  !*** ./src/consults/consultRequestController.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($, moment) {angular.module('Consults').controller('Consults.ConsultRequestController', [

	'$scope',
	'$http',
	'$q',
	'$resource',
	'$location',
	'$uibModal',
	'consultService',
	'demographicService',
	'securityService',
	'summaryService',
	'staticDataService',
	'consult',
	'user',

	function(
		$scope,
		$http,
		$q,
		$resource,
		$location,
		$uibModal,
		consultService,
		demographicService,
		securityService,
		summaryService,
		staticDataService,
		consult,
		user)
	{

		var controller = this;

		controller.consult = consult;

		consult.faxList = Juno.Common.Util.toArray(consult.faxList);
		consult.serviceList = Juno.Common.Util.toArray(consult.serviceList);
		consult.sendToList = Juno.Common.Util.toArray(consult.sendToList);

		controller.urgencies = staticDataService.getConsultUrgencies();
		controller.statuses = staticDataService.getConsultRequestStatuses();
		controller.hours = staticDataService.getHours();
		controller.minutes = staticDataService.getMinutes();

		controller.parseTime = function parseTime(time)
		{
			var tArray = time.split(":");
			consult.appointmentHour = tArray[0];
			consult.appointmentMinute = tArray[1];
		};
		/* If appointment time is present, we must parse the hours and minutes in order to
		   populate the hour and minute selectors */
		if (consult.appointmentTime !== null)
		{
			controller.parseTime(consult.appointmentTime);

		}

		controller.initialize = function()
		{
			//get access rights
			securityService.hasRight("_con", "r").then(
				function success(results)
				{
					controller.consultReadAccess = results;
				},
				function error(errors)
				{
					console.error(errors);
				});
			securityService.hasRight("_con", "u").then(
				function success(results)
				{
					controller.consultUpdateAccess = results;
				},
				function error(errors)
				{
					console.error(errors);
				});
			securityService.hasRight("_con", "w").then(
				function success(results)
				{
					controller.consultWriteAccess = results;
				},
				function error(errors)
				{
					console.error(errors);
				});

			//set demographic info
			demographicService.getDemographic(consult.demographicId).then(
				function success(results)
				{
					consult.demographic = results;

					//set cell phone
					consult.demographic.extras = Juno.Common.Util.toArray(consult.demographic.extras);
					for (var i = 0; i < consult.demographic.extras.length; i++)
					{
						if (consult.demographic.extras[i].key == "demo_cell")
						{
							consult.demographic.cellPhone = consult.demographic.extras[i].value;
							break;
						}
					}
				},
				function error(errors)
				{
					console.error(errors);
				});

			consultService.getLetterheadList().then(
				function success(results)
				{
					consult.letterheadList = Juno.Common.Util.toArray(results.data);
					if(consult.letterhead === null)
					{
						controller.changeLetterhead(consult.letterheadList[0]);
					}
					else
					{
						for (var i = 0; i < consult.letterheadList.length; i++)
						{
							if (consult.letterheadList[i].id === consult.letterheadName)
							{
								controller.changeLetterhead(consult.letterheadList[i]);
								break;
							}
						}
					}
				},
				function error(errors)
				{
					console.error(errors);
				}
			);

			//set specialist list
			for (var i = 0; i < consult.serviceList.length; i++)
			{
				if (consult.serviceList[i].serviceId == consult.serviceId)
				{
					controller.specialists = Juno.Common.Util.toArray(consult.serviceList[i].specialists);
					break;
				}
			}
			angular.forEach(controller.specialists, function(spec)
			{
				if (consult.professionalSpecialist && spec.id == consult.professionalSpecialist.id)
				{
					consult.professionalSpecialist = spec;
				}
			});

			//set attachments
			consult.attachments = Juno.Common.Util.toArray(consult.attachments);
			Juno.Consults.Common.sortAttachmentDocs(consult.attachments);
		};
		controller.initialize();

		controller.changeLetterhead = function changeLetterhead(letterhead)
		{
			consult.letterhead = letterhead;

			// these are required for current print functionality
			consult.letterheadName = consult.letterhead.id;
			consult.letterheadAddress = consult.letterhead.address;
			consult.letterheadPhone = consult.letterhead.phone;
			consult.letterheadFax = consult.letterhead.fax;
		};

		//monitor data changed
		controller.consultChanged = 0;
		$scope.$watchCollection(function()
			{
				return controller.consult;
			},
			function(newVal, oldVal)
			{
				controller.consultChanged++;
			});

		//remind user of unsaved data
		$scope.$on("$stateChangeStart", function(event)
		{
			if (controller.consultChanged > 0)
			{
				var discard = confirm("You may have unsaved data. Are you sure to leave?");
				if (!discard) event.preventDefault();
			}
		});

		controller.changeService = function changeService(id)
		{
			var index = $("#serviceId")[0].selectedIndex;
			if (index === null)
			{
				$scope.specialists = null;
				return;
			}
			controller.specialists = toArray(consult.serviceList[index].specialists);
		};

		controller.writeToBox = function writeToBox(results, boxId)
		{
			var items = Juno.Common.Util.toArray(results.summaryItem);
			var boxData = null;
			for (var i = 0; i < items.length; i++)
			{
				boxData = Juno.Common.Util.addNewLine(items[i].displayName, boxData);
			}
			if (boxId == "clinicalInfo") consult.clinicalInfo = Juno.Common.Util.addNewLine(boxData, consult.clinicalInfo);
			else if (boxId == "concurrentProblems") consult.concurrentProblems = Juno.Common.Util.addNewLine(boxData, consult.concurrentProblems);
			else if (boxId == "currentMeds") consult.currentMeds = Juno.Common.Util.addNewLine(boxData, consult.currentMeds);
		};


		controller.getFamilyHistory = function getFamilyHistory(boxId)
		{
			summaryService.getFamilyHistory(consult.demographicId).then(
				function success(results)
				{
					if (results.summaryItem.length === 0)
						alert("No family history");
					controller.writeToBox(results, boxId);
				},
				function error(errors)
				{
					alert("Error grabbing family history!");
					console.error(errors);
				});
		};

		controller.getMedicalHistory = function getMedicalHistory(boxId)
		{
			summaryService.getMedicalHistory(consult.demographicId).then(
				function success(results)
				{
					if (results.summaryItem.length === 0)
						alert("No medical history");
					controller.writeToBox(results, boxId);
				},
				function error(errors)
				{
					alert("Error grabbing medical history!");
					console.error(errors);
				});
		};

		controller.getSocialHistory = function getSocialHistory(boxId)
		{
			summaryService.getSocialHistory(consult.demographicId).then(
				function success(results)
				{
					if (results.summaryItem.length === 0)
						alert("No social history");
					controller.writeToBox(results, boxId);
				},
				function error(errors)
				{
					alert("Error grabbing social history!");
					console.error(errors);
				});
		};

		controller.getOngoingConcerns = function getOngoingConcerns(boxId)
		{
			summaryService.getOngoingConcerns(consult.demographicId).then(
				function success(results)
				{
					if (results.summaryItem.length === 0)
						alert("No ongoing concerns");
					controller.writeToBox(results, boxId);
				},
				function error(errors)
				{
					alert("Error grabbing ongoing concerns!");
					console.error(errors);
				});
		};

		controller.getOtherMeds = function getOtherMeds(boxId)
		{
			summaryService.getOtherMeds(consult.demographicId).then(
				function success(results)
				{
					if (results.summaryItem.length === 0)
						alert("No other meds");
					controller.writeToBox(results, boxId);
				},
				function error(errors)
				{
					alert("Error grabbing other meds!");
					console.error(errors);
				});
		};

		controller.getReminders = function getReminders(boxId)
		{
			summaryService.getReminders(consult.demographicId).then(
				function success(results)
				{
					if (results.summaryItem.length === 0)
						alert("No reminders");
					controller.writeToBox(results, boxId);
				},
				function error(errors)
				{
					alert("Error grabbing reminders!");
					console.error(errors);
				});
		};

		// New function, doesn't work
		controller.getAllergies = function getAllergies(boxId)
		{
			summaryService.getAllergies(consult.demographicId).then(
				function success(results)
				{
					controller.writeToBox(results, boxId);
				},
				function error(errors)
				{
					console.error(errors);
				});
		};
		
		controller.invalidData = function invalidData()
		{
			if (!controller.consult.urgency)
			{
				alert("Please select an Urgency");
				return true;
			}
			if (!controller.consult.letterheadName)
			{
				alert("Please select a Letterhead");
				return true;
			}
			if (!controller.consult.professionalSpecialist)
			{
				alert("Please select a Specialist");
				return true;
			}
			if (controller.consult.demographic == null || controller.consult.demographic == "")
			{
				alert("Error! Invalid patient!");
				return true;
			}
			return false;
		};

		controller.setAppointmentTime = function setAppointmentTime()
		{
			if (consult.appointmentHour != null && consult.appointmentMinute != null && !consult.patientWillBook)
			{
				apptTime = moment(Date.now());
				apptTime.set('hours', consult.appointmentHour);
				apptTime.set('minute', consult.appointmentMinute);
				consult.appointmentTime = apptTime;
			}
			else
			{
				consult.appointmentTime = null;
			}
		};

		controller.openAttach = function openAttach(attachment)
		{
			window.open("../" + attachment.url);
		};

		controller.attachFiles = function attachFiles()
		{
			var modalInstance = $uibModal.open(
				{
					templateUrl: "src/consults/consultAttachment.jsp",
					controller: 'Consults.ConsultRequestAttachmentController as consultAttachmentCtrl',
					windowClass: "attachment-modal-window",
					size: 'lg',
					resolve:
						{
							consult: function()
							{
								return consult;
							}
						}
				});

			modalInstance.result.then(
				function success()
				{
					if (consult.attachmentsChanged)
					{
						controller.consultChanged++;
						consult.attachmentsChanged = false;
					}
				},
				function error(errors)
				{
					console.error(errors);
				});
		};

		//show/hide e-send button
		controller.setESendEnabled = function setESendEnabled()
		{
			controller.eSendEnabled = consult.professionalSpecialist != null && consult.professionalSpecialist.eDataUrl != null && consult.professionalSpecialist.eDataUrl.trim() != "";
		};

		controller.setESendEnabled(); //execute once on form open

		controller.save = function save()
		{
			var deferred = $q.defer();
			var valid = true;

			if (!controller.consultWriteAccess && consult.id == null)
			{
				alert("You don't have right to save new consult");
				valid = false;
			}
			if (!controller.consultUpdateAccess)
			{
				alert("You don't have right to update consult");
				valid = false;
			}
			if (controller.invalidData())
			{
				valid = false;
			}

			if(valid)
			{
				controller.consultSaving = true; //show saving banner
				controller.setAppointmentTime();

				consultService.saveRequest(consult).then(
					function success(results)
					{
						if (consult.id == null)
						{
							$location.path("/record/" + consult.demographicId + "/consult/" + results.id);
						}
						deferred.resolve(results.id);
					},
					function error(errors)
					{
						console.error(errors);
						deferred.reject(errors);
					})
					.finally(
						function()
						{
							controller.setESendEnabled();
							controller.consultSaving = false; //hide saving banner
							controller.consultChanged = 0; //reset change count
						}
					);
			}
			else
			{
				deferred.reject("Invalid");
			}
			return deferred.promise;
		};

		controller.close = function close()
		{
			if ($location.search().list === "patient")
			{
				$location.path("/record/" + consult.demographicId + "/consults");
			}
			else
			{
				$location.path("/consults");
			}
		};

		controller.saveAndFax = function saveAndPrint()
		{
			controller.save().then(
				function success(reqId)
				{
					var demographicNo = consult.demographicId;
					var letterheadFax = Juno.Common.Util.noNull(consult.letterhead.fax);
					var fax = Juno.Common.Util.noNull(consult.professionalSpecialist.faxNumber);

					window.open("../fax/CoverPage.jsp?reqId=" + reqId + "&demographicNo=" + demographicNo + "&letterheadFax=" + letterheadFax + "&fax=" + fax);
				},
				function failure(error)
				{
				}
			);
		};

		controller.eSend = function eSend()
		{
			if (controller.eSendEnabled)
			{
				consultService.eSendRequest(consult.id).then(
					function success(results)
					{
						alert(results.message);
					},
					function error(errors)
					{
						console.error(errors);
					});
			}
		};

		controller.saveAndPrint = function saveAndPrint()
		{
			controller.save().then(
				function success(reqId)
				{
					controller.print(reqId);
				},
				function failure(error)
				{
				}
			);
		};

		controller.print = function print(reqId)
		{
			window.open("../oscarEncounter/oscarConsultationRequest/printPdf2.do?reqId=" + reqId + "&demographicNo=" + consult.demographicId);
		};
	}
]);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"), __webpack_require__(/*! moment */ "./node_modules/moment/moment.js")))

/***/ }),

/***/ "./src/consults/consultRequestListController.js":
/*!******************************************************!*\
  !*** ./src/consults/consultRequestListController.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(moment) {angular.module('Consults').controller('Consults.ConsultRequestListController', [

	'$scope',
	'$timeout',
	'$state',
	'$location',
	// '$defer',
	'NgTableParams',
	'consultService',
	'providerService',
	'demographicService',
	'demographicsService',
	'securityService',
	'staticDataService',

	function(
		$scope,
		$timeout,
		$state,
		$location,
		// $defer,
		NgTableParams,
		consultService,
		providerService,
		demographicService,
		demographicsService,
		securityService,
		staticDataService)
	{

		var controller = this;

		//get access rights
		securityService.hasRight("_con", "r").then(
			function success(results)
			{
				controller.consultReadAccess = results;
			},
			function error(errors)
			{
				console.log(errors);
			});
		securityService.hasRight("_con", "u").then(
			function success(results)
			{
				controller.consultUpdateAccess = results; //to be used with batch operations (not yet implemented)
			},
			function error(errors)
			{
				console.log(errors);
			});
		securityService.hasRight("_con", "w").then(
			function success(results)
			{
				controller.consultWriteAccess = results;
			},
			function error(errors)
			{
				console.log(errors);
			});

		//set search statuses
		controller.statuses = staticDataService.getConsultRequestStatuses();

		//get urgencies list
		controller.urgencies = staticDataService.getConsultUrgencies();

		controller.lastResponse = "";
		controller.teams = [];
		controller.consult = {};

		var allTeams = "All Teams";
		controller.search = {
			team: allTeams,
			startIndex: 0,
			numToReturn: 10
		};

		providerService.getActiveTeams().then(
			function success(results)
			{
				controller.teams = results;
				controller.teams.unshift(allTeams);
				console.log(JSON.stringify(results));
			},
			function error(errors)
			{
				alert(errors);
				console.log(errors);
			});

		controller.searchPatients = function searchPatients(term)
		{
			var search = {
				type: 'Name',
				'term': term,
				status: 'active',
				integrator: false,
				outofdomain: true
			};
			return demographicsService.search(search, 0, 25).then(
				function success(response)
				{
					var resp = [];
					for (var x = 0; x < response.content.length; x++)
					{
						resp.push(
						{
							demographicNo: response.content[x].demographicNo,
							name: response.content[x].lastName + ', ' + response.content[x].firstName
						});
					}
					return resp;
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.searchMrps = function searchMrps(term)
		{
			var search = {
				searchTerm: term,
				active: true
			};
			return providerService.searchProviders(search).then(
				function success(response)
				{
					var resp = [];
					for (var x = 0; x < response.length; x++)
					{
						resp.push(
						{
							mrpNo: response[x].providerNo,
							name: response[x].name
						});
					}
					return resp;
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.updateMrpNo = function updateMrpNo(model)
		{
			if (model instanceof Object)
			{ //mrp set in search box
				controller.search.mrpNo = Number(model.mrpNo);
				controller.consult.mrpName = model.name;
			}
			else
			{ //mrp specified in url (come back from another consults) 
				providerService.getProvider(model).then(
					function success(results)
					{
						controller.consult.mrpName = results.lastName + ", " + results.firstName;
					},
					function error(errors)
					{
						console.log(errors);
					});
			}
		};

		controller.updateDemographicNo = function updateDemographicNo(item, model)
		{
			if (item != null)
			{ //demo set in search box
				controller.search.demographicNo = item.demographicNo;
				controller.consult.demographicName = item.name;
			}
			else
			{ //demo specified in url (come back from another consults)
				demographicService.getDemographic(model).then(
					function success(results)
					{
						controller.consult.demographicName = results.lastName + ", " + results.firstName;
					},
					function error(errors)
					{
						console.log(errors);
					});
			}
		};

		controller.checkAll = function checkAll()
		{
			angular.forEach(controller.lastResponse, function(item)
			{
				item.checked = true;
			});
		};

		controller.checkNone = function checkNone()
		{
			angular.forEach(controller.lastResponse, function(item)
			{
				item.checked = false;
			});
		};

		controller.editConsult = function editConsult(consult)
		{
			var url = "/record/" + consult.demographic.demographicNo + "/consult/" + consult.id;
			$location.path(url).search(controller.searchParams);
		};

		controller.addConsult = function addConsult()
		{
			if (!controller.consultWriteAccess)
			{
				alert("You don't have right to create new consult");
				return false;
			}
			var url = "/record/" + controller.search.demographicNo + "/consult/new";
			$location.path(url).search(controller.searchParams);
		};

		controller.removeDemographicAssignment = function removeDemographicAssignment()
		{
			controller.search.demographicNo = null;
			controller.consult.demographicName = null;
		};

		controller.removeMrpAssignment = function removeMrpAssignment()
		{
			controller.search.mrpNo = null;
			controller.consult.mrpName = null;
		};

		controller.doSearch = function doSearch()
		{
			controller.tableParams.reload();
		};

		controller.clear = function clear()
		{
			controller.removeDemographicAssignment();
			controller.removeMrpAssignment();

			var searchDemoNo = $state.params.demographicNo == null ? null : Number($state.params.demographicNo);
			controller.search = {
				team: allTeams,
				startIndex: 0,
				numToReturn: 10,
				demographicNo: searchDemoNo
			};
			controller.doSearch();
		};

		//retain search & filters for users to come back
		controller.setSearchParams = function setSearchParams()
		{
			controller.searchParams = {};

			if ($state.$current.name === "record.consultRequests")
				controller.searchParams.list = "patient";
			else if (controller.search.demographicNo != null) controller.searchParams.srhDemoNo = controller.search.demographicNo;

			if (controller.search.mrpNo != null) controller.searchParams.srhMrpNo = controller.search.mrpNo;
			if (controller.search.status != null) controller.searchParams.srhStatus = controller.search.status;
			if (controller.search.team != allTeams) controller.searchParams.srhTeam = controller.search.team;
			if (controller.search.referralStartDate != null) controller.searchParams.srhRefStartDate = controller.search.referralStartDate.getTime();
			if (controller.search.referralEndDate != null) controller.searchParams.srhRefEndDate = controller.search.referralEndDate.getTime();
			if (controller.search.appointmentStartDate != null) controller.searchParams.srhApptStartDate = controller.search.appointmentStartDate.getTime();
			if (controller.search.appointmentEndDate != null) controller.searchParams.srhApptEndDate = controller.search.appointmentEndDate.getTime();

			if (controller.search.page != null) controller.searchParams.srhToPage = controller.search.page;
			if (controller.search.perPage != null) controller.searchParams.srhCountPerPage = controller.search.perPage;
			if (controller.search.sortDirection != null)
			{
				controller.searchParams.srhSortMode = controller.search.sortColumn;
				controller.searchParams.srhSortDir = controller.search.sortDirection;
			}
		};

		controller.justOpen = true;

		// default parameters
		controller.search.sortColumn="ReferralDate";
		controller.search.sortDirection="desc";

		controller.tableParams = new NgTableParams(
		{
			page: 1, // show first page
			count: 10, // initial count per page
			sorting: {
				ReferralDate: 'desc'
			}
		},
		{
			getData: function(params)
			{
				if (controller.justOpen)
				{
					controller.getSavedSearchVals();
					controller.justOpen = false;
				}

				controller.setSearchParams();

				var count = params.url().count;
				var page = params.url().page;

				// shouldn't need these anymore
				//TODO refactor out of all uses here (I think these are used elsewhere).
				controller.search.startIndex = ((page - 1) * count);
				controller.search.numToReturn = parseInt(count);

				controller.search.page = params.url().page;
				controller.search.perPage = params.url().count;

				// need to parse out the ng-tables sort column/direction values
				// for use in our get parameters.
				var myRegexp = /sorting\[(\w+)\]/g;
				for(var key in params.url()) {
					var match = myRegexp.exec(String(key));
					if(match) {
						controller.search.sortColumn = match[1];
						controller.search.sortDirection = params.url()[String(key)];
					}
				}

				// copy to the get parameters hash
				var search1 = angular.copy(controller.search);

				if (search1.team === allTeams)
				{
					search1.team = null;
				}

				return consultService.searchRequests(search1).then(
					function success(result)
					{
						params.total(parseInt(result.meta.total[0]));

						for (var i = 0; i < result.data.length; i++)
						{
							var consult = result.data[i];

							//add statusDescription
							for (var j = 0; j < controller.statuses.length; j++)
							{
								if (consult.status == controller.statuses[j].value)
								{
									consult.statusDescription = controller.statuses[j].name;
									break;
								}
							}

							//add urgencyDescription
							for (var j = 0; j < controller.urgencies.length; j++)
							{
								if (consult.urgency == controller.urgencies[j].value)
								{
									consult.urgencyDescription = controller.urgencies[j].name;
									break;
								}
							}

							//add urgencyColor if consult urgency=Urgent(1)
							if (consult.urgency == 1)
							{
								consult.urgencyColor = "text-danger"; //= red text
							}

							//add notification if outstanding (incomplete requests > 1 month)
							if (consult.status != 4 && consult.status != 5 && consult.status != 7)
							{
								var refDate = moment(consult.referralDate).toDate();
								refDate.setMonth(refDate.getMonth() + 1);
								if ((new Date()) >= refDate)
								{
									consult.outstanding = true;
								}
							}
						}
						controller.lastResponse = result.data;
						return result.data;
					},
					function error(errors)
					{
						alert(errors);
						console.log(errors);
					});
			}

		});

		controller.getSavedSearchVals = function getSavedSearchVals()
		{
			//process demographicNo in url, run only once
			if ($state.params.demographicNo != null)
			{
				//called from patient record
				controller.hideSearchPatient = true;
				controller.search.demographicNo = Number($state.params.demographicNo);
			}
			else if ($location.search().srhDemoNo != null)
			{
				//come back from another consults
				controller.search.demographicNo = Number($location.search().srhDemoNo);
				controller.updateDemographicNo(null, $location.search().srhDemoNo);
			}

			//process other search parameters in url
			if ($location.search().srhMrpNo != null)
			{
				controller.search.mrpNo = Number($location.search().srhMrpNo);
				controller.updateMrpNo($location.search().srhMrpNo);
			}
			if ($location.search().srhRefStartDate != null) controller.search.referralStartDate = new Date(Number($location.search().srhRefStartDate));
			if ($location.search().srhRefEndDate != null) controller.search.referralEndDate = new Date(Number($location.search().srhRefEndDate));
			if ($location.search().srhApptStartDate != null) controller.search.appointmentStartDate = new Date(Number($location.search().srhApptStartDate));
			if ($location.search().srhApptEndDate != null) controller.search.appointmentEndDate = new Date(Number($location.search().srhApptEndDate));
			if ($location.search().srhStatus != null) controller.search.status = Number($location.search().srhStatus);
			if ($location.search().srhTeam != null) controller.search.team = $location.search().srhTeam;
			if ($location.search().srhCountPerPage != null) controller.search.perPage = $location.search().srhCountPerPage;

			if ($location.search().srhToPage != null) controller.search.page = $location.search().srhToPage;
			if ($location.search().srhSortMode != null && $location.search().srhSortDir != null)
			{
				controller.search.sortColumn = $location.search().sortMode;
				controller.search.sortDirection = $location.search().srhSortDir;
			}
		};

		controller.popup = function popup(vheight, vwidth, varpage, winname)
		{
			windowprops = "height=" + vheight + ",width=" + vwidth + ",location=no,scrollbars=yes,menubars=no,toolbars=no,resizable=yes,screenX=0,screenY=0,top=0,left=0";
			var popup = window.open(varpage, winname, windowprops);
			if (popup != null)
			{
				if (popup.opener == null)
				{
					popup.opener = self;
				}
			}
		};

	}
]);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! moment */ "./node_modules/moment/moment.js")))

/***/ }),

/***/ "./src/consults/consultResponseAttachmentController.js":
/*!*************************************************************!*\
  !*** ./src/consults/consultResponseAttachmentController.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {angular.module('Consults').controller('Consults.ConsultResponseAttachmentController', [

	'$uibModalInstance',
	'consultService',
	'consult',

	function(
		$uibModalInstance,
		consultService,
		consult)
	{
		controller.atth = {};
		controller.atth.patientName = consult.demographic.lastName + ", " + consult.demographic.firstName;

		controller.atth.attachedDocs = consult.attachments;
		if (controller.atth.attachedDocs[0] != null) controller.atth.selectedAttachedDoc = controller.atth.attachedDocs[0];

		var consultId = 0;
		if (consult.id != null) consultId = consult.id;
		consultService.getResponseAttachments(consultId, consult.demographic.demographicNo).then(
			function success(results)
			{
				if (consult.availableDocs == null) consult.availableDocs = Juno.Common.Util.toArray(results);
				controller.atth.availableDocs = consult.availableDocs;
				Juno.Consults.Common.sortAttachmentDocs(controller.atth.availableDocs);
				if (controller.atth.availableDocs[0] != null) controller.atth.selectedAvailableDoc = controller.atth.availableDocs[0];
			},
			function error(errors)
			{
				console.log(errors);
			});

		controller.openDoc = function openDoc(doc)
		{
			window.open("../" + doc.url);
		};

		controller.attach = function attach()
		{
			if (controller.atth.selectedAvailableDoc == null) return;

			controller.atth.attachedDocs.push(controller.atth.selectedAvailableDoc);
			controller.atth.selectedAttachedDoc = controller.atth.selectedAvailableDoc;
			controller.atth.selectedAttachedDoc.attached = true;
			Juno.Consults.Common.sortAttachmentDocs(controller.atth.attachedDocs);

			var x = $("#selAvailDoc").val();
			controller.atth.availableDocs.splice(x, 1);
			if (x >= controller.atth.availableDocs.length) x = controller.atth.availableDocs.length - 1;
			controller.atth.selectedAvailableDoc = controller.atth.availableDocs[x];

			consult.attachmentsChanged = true;
		};

		controller.detach = function detach()
		{
			if (controller.atth.selectedAttachedDoc == null) return;

			controller.atth.availableDocs.push(controller.atth.selectedAttachedDoc);
			controller.atth.selectedAvailableDoc = controller.atth.selectedAttachedDoc;
			controller.atth.selectedAvailableDoc.attached = false;
			Juno.Consults.Common.sortAttachmentDocs(controller.atth.availableDocs);

			var x = $("#selAttachDoc").val();
			controller.atth.attachedDocs.splice(x, 1);
			if (x >= controller.atth.attachedDocs.length) x = controller.atth.attachedDocs.length - 1;
			controller.atth.selectedAttachedDoc = controller.atth.attachedDocs[x];

			consult.attachmentsChanged = true;
		};

		controller.done = function done()
		{
			$uibModalInstance.close();
		};
	}
]);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/consults/consultResponseController.js":
/*!***************************************************!*\
  !*** ./src/consults/consultResponseController.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(moment, $) {angular.module('Consults').controller('Consults.ConsultResponseController', [

	'$scope',
	'$http',
	'$resource',
	'$location',
	'$uibModal',
	'consultService',
	'demographicService',
	'securityService',
	'summaryService',
	'staticDataService',
	'consult',
	'user',

	function(
		$scope,
		$http,
		$resource,
		$location,
		$uibModal,
		consultService,
		demographicService,
		securityService,
		summaryService,
		staticDataService,
		consult,
		user)
	{

		var controller = this;

		controller.initialize = function()
		{
			//get access rights
			securityService.hasRight("_con", "r").then(
				function success(results)
				{
					controller.consultReadAccess = results;
				},
				function error(errors)
				{
					console.log(errors);
				});
			securityService.hasRight("_con", "u").then(
				function success(results)
				{
					controller.consultUpdateAccess = results;
				},
				function error(errors)
				{
					console.log(errors);
				});
			securityService.hasRight("_con", "w").then(
				function success(results)
				{
					controller.consultWriteAccess = results;
				},
				function error(errors)
				{
					console.log(errors);
				});

			controller.consult = consult;
			consult.referringDoctorList = Juno.Common.Util.toArray(consult.referringDoctorList);
			consult.faxList = Juno.Common.Util.toArray(consult.faxList);
			consult.sendToList = Juno.Common.Util.toArray(consult.sendToList);

			//set attachments
			consult.attachments = Juno.Common.Util.toArray(consult.attachments);
			Juno.Consults.Common.sortAttachmentDocs(consult.attachments);


			consultService.getLetterheadList().then(
				function success(results)
				{
					consult.letterheadList = Juno.Common.Util.toArray(results.data);

					//set default letterhead
					if(consult.letterhead === null)
					{
						controller.changeLetterhead(consult.letterheadList[0]);
					}
					else
					{
						for (var i = 0; i < consult.letterheadList.length; i++)
						{
							if (consult.letterheadList[i].id === consult.letterheadName)
							{
								controller.changeLetterhead(consult.letterheadList[i]);
								break;
							}
						}
					}
				},
				function error(errors)
				{
					console.log(errors);
				}
			);

			//show referringDoctor in list
			angular.forEach(consult.referringDoctorList, function(referringDoc)
			{
				if(consult.referringDoctor !== null)
				{
					if (referringDoc.id === consult.referringDoctor.id)
					{
						consult.referringDoctor = referringDoc;
					}
				}
			});

			//set patient cell phone
			consult.demographic.extras = Juno.Common.Util.toArray(consult.demographic.extras);
			for (var i = 0; i < consult.demographic.extras.length; i++)
			{
				if (consult.demographic.extras[i].key == "demo_cell")
				{
					consult.demographic.cellPhone = consult.demographic.extras[i].value;
					break;
				}
			}
		};
		controller.initialize();

		controller.changeLetterhead = function changeLetterhead(letterhead)
		{
			consult.letterhead = letterhead;

			// these are required for current print functionality
			consult.letterheadName = consult.letterhead.id;
			consult.letterheadAddress = consult.letterhead.address;
			consult.letterheadPhone = consult.letterhead.phone;
			consult.letterheadFax = consult.letterhead.fax;
		};


		controller.urgencies = staticDataService.getConsultUrgencies();
		controller.statuses = staticDataService.getConsultResponseStatuses();
		controller.hours = staticDataService.getHours();
		controller.minutes = staticDataService.getMinutes();

		controller.parseTime = function parseTime(time)
		{
			var tArray = time.split(":");
			consult.appointmentHour = tArray[0];
			consult.appointmentMinute = tArray[1];
		};
		/* If appointment time is present, we must parse the hours and minutes in order to
		   populate the hour and minute selectors */
		if (consult.appointmentTime !== null)
		{
			controller.parseTime(consult.appointmentTime);

		}

		//monitor data changed
		controller.consultChanged = -1;
		$scope.$watchCollection(function()
			{
				return controller.consult;
			}, function()
			{
				controller.consultChanged++;
			});

		//remind user of unsaved data
		$scope.$on("$stateChangeStart", function(event)
		{
			if (controller.consultChanged > 0)
			{
				var discard = confirm("You may have unsaved data. Are you sure to leave?");
				if (!discard) event.preventDefault();
			}
		});

		controller.writeToBox = function writeToBox(data, boxId)
		{
			var items = Juno.Common.Util.toArray(data.summaryItem);
			var boxData = null;
			for (var i = 0; i < items.length; i++)
			{
				boxData = Juno.Common.Util.addNewLine(items[i].displayName, boxData);
			}
			if (boxId == "clinicalInfo") consult.clinicalInfo = Juno.Common.Util.addNewLine(boxData, consult.clinicalInfo);
			else if (boxId == "concurrentProblems") consult.concurrentProblems = Juno.Common.Util.addNewLine(boxData, consult.concurrentProblems);
			else if (boxId == "currentMeds") consult.currentMeds = Juno.Common.Util.addNewLine(boxData, consult.currentMeds);
		};

		controller.getFamilyHistory = function getFamilyHistory(boxId)
		{
			summaryService.getFamilyHistory(consult.demographic.demographicNo).then(
				function success(results)
				{
					if(results.summaryItem.length === 0)
						alert("No family history");
					controller.writeToBox(results, boxId);
				},
				function error(errors)
				{
					alert("Error grabbing family history!");
					console.log(errors);
				});
		};
		controller.getMedicalHistory = function getMedicalHistory(boxId)
		{
			summaryService.getMedicalHistory(consult.demographic.demographicNo).then(
				function success(results)
				{
					if(results.summaryItem.length === 0)
						alert("No medical history");
					controller.writeToBox(results, boxId);
				},
				function error(errors)
				{
					alert("Error grabbing medical history!");
					console.log(errors);
				});
		};
		controller.getSocialHistory = function getSocialHistory(boxId)
		{
			summaryService.getSocialHistory(consult.demographic.demographicNo).then(
				function success(results)
				{
					if(results.summaryItem.length === 0)
						alert("No social history");
					controller.writeToBox(results, boxId);
				},
				function error(errors)
				{
					alert("Error grabbing social history!");
					console.log(errors);
				});
		};
		controller.getOngoingConcerns = function getOngoingConcerns(boxId)
		{
			summaryService.getOngoingConcerns(consult.demographic.demographicNo).then(
				function success(results)
				{
					if(results.summaryItem.length === 0)
						alert("No ongoing concerns");
					controller.writeToBox(results, boxId);
				},
				function error(errors)
				{
					alert("Error grabbing ongoing concerns!");
					console.log(errors);
				});
		};
		controller.getOtherMeds = function getOtherMeds(boxId)
		{
			summaryService.getOtherMeds(consult.demographic.demographicNo).then(
				function success(results)
				{
					if(results.summaryItem.length === 0)
						alert("No other meds");
					controller.writeToBox(results, boxId);
				},
				function error(errors)
				{
					alert("Error grabbing other meds!");
					console.log(errors);
				});
		};
		controller.getReminders = function getReminders(boxId)
		{
			summaryService.getReminders(consult.demographic.demographicNo).then(
				function success(results)
				{
					if(results.summaryItem.length === 0)
						alert("No reminders");
					controller.writeToBox(results, boxId);
				},
				function error(errors)
				{
					alert("Error grabbing reminders!");
					console.log(errors);
				});
		};

		controller.invalidData = function invalidData()
		{
			if (!controller.consult.urgency)
			{
				alert("Please select an Urgency");
				return true;
			}
			if (!controller.consult.letterheadName)
			{
				alert("Please select a Letterhead");
				return true;
			}
			if (Juno.Common.Util.isUndefinedOrNull(controller.consult.referringDoctor))
			{
				alert("Please select a Referring Doctor");
				return true;
			}
			if (!controller.consult.demographic || controller.consult.demographic === "")
			{
				alert("Error! Invalid patient!");
				return true;
			}
			return false;
		};

		controller.setAppointmentTime = function setAppointmentTime()
		{
			if (consult.appointmentHour !== null && consult.appointmentMinute !== null)
			{
				apptTime = moment(Date.now());
				apptTime.set('hours', consult.appointmentHour);
				apptTime.set('minute', consult.appointmentMinute);
				consult.appointmentTime = apptTime;
			}
			else
			{
				consult.appointmentTime = null;
			}
		};

		controller.openAttach = function openAttach(attachment)
		{
			window.open("../" + attachment.url);
		};

		controller.attachFiles = function attachFiles()
		{
			var modalInstance = $uibModal.open(
			{
				templateUrl: "src/consults/consultAttachment.jsp",
				controller: "Consults.ConsultResponseAttachmentController as consultAttachmentCtrl",
				windowClass: "attachment-modal-window",
				backdrop: "static",
				resolve:
				{
					consult: function()
					{
						return consult;
					}
				}
			});

			modalInstance.result.then(
				function success(results)
				{
					if (consult.attachmentsChanged)
					{
						controller.consultChanged++;
						consult.attachmentsChanged = false;
					}
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.save = function save()
		{
			if (!controller.consultWriteAccess && consult.id == null)
			{
				alert("You don't have right to save new consult");
				return false;
			}
			if (!controller.consultUpdateAccess)
			{
				alert("You don't have right to update consult");
				return false;
			}

			if (controller.invalidData()) return false;

			controller.consultSaving = true; //show saving banner
			controller.setAppointmentTime();

			consultService.saveResponse(consult).then(
				function success(results)
				{
					//update url for new consultation
					if (consult.id === null) {
						$location.path("/record/" + consult.demographic.demographicNo + "/consultResponse/" + results.body.id);
					}
				},
				function error(errors)
				{
					console.log(errors);
				});
			controller.consultSaving = false; //hide saving banner
			controller.consultChanged = -1; //reset change count
			return true;
		};

		controller.close = function close()
		{
			if ($location.search().list === "patient") $location.path("/record/" + consult.demographic.demographicNo + "/consultResponses");
			else $location.path("/consultResponses");
		};

		//fax & print functions
		var p_page1 = "<html><style>body{width:800px;font-family:arial,verdana,tahoma,helvetica,sans serif}table{width:100%}th{text-align:left;font-weight:bold;width:1px;white-space:nowrap}td{vertical-align:top}label{font-weight:bold}em{font-size:small}.large{font-size:large}.center{text-align:center}</style><style media='print'>button{display:none}.noprint{display:none}</style><script>function printAttachments(url){window.open('../'+url);}</script><body>";

		controller.sendFax = function sendFax()
		{
			var p_urgency = Juno.Common.Util.toTrimmedString(controller.urgencies[$("#urgency").val()].name);
			var p_letterheadName = Juno.Common.Util.toTrimmedString(consult.letterheadList[$("#letterhead").val()].name);
			var p_page2 = Juno.Common.Util.getPrintPage2(p_urgency, p_letterheadName, consult, user);

			var consultResponsePage = encodeURIComponent(p_page1 + p_page2);
			var reqId = consult.id;
			var demographicNo = consult.demographic.demographicNo;
			var letterheadFax = Juno.Common.Util.toTrimmedString(consult.letterheadFax);
			var fax = Juno.Common.Util.toTrimmedString(consult.referringDoctor.faxNumber);

			window.open("../fax/CoverPage.jsp?consultResponsePage=" + consultResponsePage + "&reqId=" + reqId + "&demographicNo=" + demographicNo + "&letterheadFax=" + letterheadFax + "&fax=" + fax);
		};

		controller.printPreview = function printPreview()
		{
			if (controller.invalidData()) return;

			var printWin = window.open("", "consultResponsePrintWin", "width=830,height=900,scrollbars=yes,location=no");
			printWin.document.open();

			var p_buttons = "<button onclick='window.print()'>Print</button><button onclick='window.close()'>Close</button>";
			var p_attachments = "";
			for (var i = 0; i < consult.attachments.length; i++)
			{
				p_attachments += "<div class='noprint'><button onclick=printAttachments('" + consult.attachments[i].url + "')>Print attachment</button> " + consult.attachments[i].displayName + "</div>";
			}

			var p_urgency = Juno.Common.Util.toTrimmedString(controller.urgencies[$("#urgency").val()].name);
			var p_letterheadName = Juno.Common.Util.toTrimmedString(consult.letterheadList[$("#letterhead").val()].name);
			var p_page2 = controller.getPrintPage2(p_urgency, p_letterheadName, consult, user);

			printWin.document.write(p_page1 + p_buttons + p_attachments + p_page2);
			printWin.document.close();
		};

		controller.getPrintPage2 = function getPrintPage2(p_urgency, p_letterheadName, consult, user)
		{
			var p_clinicName = Juno.Common.Util.toTrimmedString(consult.letterheadList[0].name);
			var p_responseDate = Juno.Common.Util.formatDate(consult.responseDate);
			var p_referralDate = Juno.Common.Util.formatDate(consult.referralDate);
			var p_letterheadAddress = Juno.Common.Util.toTrimmedString(consult.letterheadAddress);
			var p_letterheadPhone = Juno.Common.Util.toTrimmedString(consult.letterheadPhone);
			var p_letterheadFax = Juno.Common.Util.toTrimmedString(consult.letterheadFax);
			var p_consultantName = Juno.Common.Util.toTrimmedString(consult.referringDoctor.name);
			var p_consultantPhone = Juno.Common.Util.toTrimmedString(consult.referringDoctor.phoneNumber);
			var p_consultantFax = Juno.Common.Util.toTrimmedString(consult.referringDoctor.faxNumber);
			var p_consultantAddress = Juno.Common.Util.toTrimmedString(consult.referringDoctor.streetAddress);
			var p_patientName = Juno.Common.Util.toTrimmedString(consult.demographic.lastName) + ", " + Juno.Common.Util.toTrimmedString(consult.demographic.firstName);
			var p_patientPhone = Juno.Common.Util.toTrimmedString(consult.demographic.phone);
			var p_patientWorkPhone = Juno.Common.Util.toTrimmedString(consult.demographic.alternativePhone);
			var p_patientBirthdate = Juno.Common.Util.formatDate(consult.demographic.dateOfBirth);
			var p_patientSex = Juno.Common.Util.toTrimmedString(consult.demographic.sexDesc);
			var p_patientHealthCardNo = Juno.Common.Util.toTrimmedString(consult.demographic.hin) + "-" + Juno.Common.Util.toTrimmedString(consult.demographic.ver);
			var p_patientChartNo = Juno.Common.Util.toTrimmedString(consult.demographic.chartNo);
			var p_patientAddress = "";
			if (consult.demographic.address != null)
			{
				p_patientAddress = Juno.Common.Util.toTrimmedString(consult.demographic.address.address) + ", " +
					Juno.Common.Util.toTrimmedString(consult.demographic.address.city) + ", " +
					Juno.Common.Util.toTrimmedString(consult.demographic.address.province) + " " +
					Juno.Common.Util.toTrimmedString(consult.demographic.address.postal);
			}
			var p_appointmentDate = Juno.Common.Util.formatDate(consult.appointmentDate);
			var p_appointmentTime = Juno.Common.Util.formatTime(consult.appointmentTime);
			var p_reason = Juno.Common.Util.toTrimmedString(consult.reasonForReferral);
			var p_examination = Juno.Common.Util.toTrimmedString(consult.examination);
			var p_impression = Juno.Common.Util.toTrimmedString(consult.impression);
			var p_plan = Juno.Common.Util.toTrimmedString(consult.plan);
			var p_clinicalInfo = Juno.Common.Util.toTrimmedString(consult.clinicalInfo);
			var p_concurrentProblems = Juno.Common.Util.toTrimmedString(consult.concurrentProblems);
			var p_currentMeds = Juno.Common.Util.toTrimmedString(consult.currentMeds);
			var p_allergies = Juno.Common.Util.toTrimmedString(consult.allergies);
			var p_provider = Juno.Common.Util.toTrimmedString(user.lastName) + ", " + Juno.Common.Util.toTrimmedString(user.firstName);

			return "<div class='center'><label class='large'>" + p_clinicName + "</label><br/><label>Consultation Response</label><br/></div><br/><table><tr><td><label>Date: </label>" + p_responseDate + "</td><td rowspan=6 width=10></td><td><label>Status: </label>" + p_urgency + "</td></tr><tr><td colspan=2></td></tr><tr><th>FROM:</th><th>TO:</th></tr><tr><td><p class='large'>" + p_letterheadName + "</p>" + p_letterheadAddress + "<br/><label>Tel: </label>" + p_letterheadPhone + "<br/><label>Fax: </label>" + p_letterheadFax + "</td><td><table><tr><th>Referring Doctor:</th><td>" + p_consultantName + "</td></tr><tr><th>Phone:</th><td>" + p_consultantPhone + "</td></tr><tr><th>Fax:</th><td>" + p_consultantFax + "</td></tr><tr><th>Address:</th><td>" + p_consultantAddress + "</td></tr></table></td></tr><tr><td colspan=2></td></tr><tr><td><table><tr><th>Patient:</th><td>" + p_patientName + "</td></tr><tr><th>Address:</th><td>" + p_patientAddress + "</td></tr><tr><th>Phone:</th><td>" + p_patientPhone + "</td></tr><tr><th>Work Phone:</th><td>" + p_patientWorkPhone + "</td></tr><tr><th>Birthdate:</th><td>" + p_patientBirthdate + "</td></tr></table></td><td><table><tr><th>Sex:</th><td>" + p_patientSex + "</td></tr><tr><th>Health Card No:</th><td>" + p_patientHealthCardNo + "</td></tr><tr><th>Appointment date:</th><td>" + p_appointmentDate + "</td></tr><tr><th>Appointment time:</th><td>" + p_appointmentTime + "</td></tr><tr><th>Chart No:</th><td>" + p_patientChartNo + "</td></tr></table></td></tr></table><br/><table><tr><th>Examination:</th></tr><tr><td>" + p_examination + "<hr></td></tr><tr><th>Impression:</th></tr><tr><td>" + p_impression + "<hr></td></tr><tr><th>Plan:</th></tr><tr><td>" + p_plan + "<hr></td></tr><tr><td></td></tr><tr><th>Reason for consultation: (Date: " + p_referralDate + ")</th></tr><tr><td>" + p_reason + "<hr></td></tr><tr><th>Pertinent Clinical Information:</th></tr><tr><td>" + p_clinicalInfo + "<hr></td></tr><tr><th>Significant Concurrent Problems:</th></tr><tr><td>" + p_concurrentProblems + "<hr></td></tr><tr><th>Current Medications:</th></tr><tr><td>" + p_currentMeds + "<hr></td></tr><tr><th>Allergies:</th></tr><tr><td>" + p_allergies + "<hr></td></tr><tr><td><label>Consultant: </label>" + p_provider + "</td></tr><tr><td></td></tr><tr><td><div class='center'><em>Created by: OSCAR The open-source EMR www.oscarcanada.org</em></div></td></tr></table></body></html>";
		};
	}
]);

/* html for fax & print, kept here for easy reference
<html>
<style>
	body{width:800px;font-family:arial,verdana,tahoma,helvetica,sans serif}
	table{width:100%}
	th{text-align:left;font-weight:bold;width:1;white-space:nowrap}
	td{vertical-align:top}
	label{font-weight:bold}
	em{font-size:small}
	.large{font-size:large}
	.center{text-align:center}
</style>
<style media='print'>
	button{display:none}
	.noprint{display:none}
</style>
<script>
	function printAttachments(url){
		window.open('../'+url);
	}
</script>
<body>

<!-- Print preview page exclusive -->
	<!-- p_buttons -->
	<button onclick='window.print()'>Print</button>
	<button onclick='window.close()'>Close</button>
	<!-- p_buttons -->

	<!-- p_attachments, 1 or more -->
	<div class='noprint'>
		<button onclick=printAttachments('"+consult.attachments[i].url+"')>Print attachment</button> "+consult.attachments[i].displayName+"
	</div>
	<!-- p_attachments -->
<!-- Print preview page exclusive -->

	<div class='center'>
		<label class='large'>"+p_clinicName+"</label><br/>
		<label>Consultation Response</label><br/>
	</div>
	<br/>
	<table>
		<tr>
			<td>
				<label>Date: </label>"+p_responseDate+"
			</td>
			<td rowspan=6 width=10></td>
			<td>
				<label>Status: </label>"+p_urgency+"
			</td>
		</tr>
		<tr><td colspan=2></td></tr>
		<tr>
			<th>FROM:</th>
			<th>TO:</th>
		</tr>
		<tr>
			<td>
				<p class='large'>"+p_letterheadName+"</p>
				"+p_letterheadAddress+"<br/>
				<label>Tel: </label>"+p_letterheadPhone+"<br/>
				<label>Fax: </label>"+p_letterheadFax+"
			</td>
			<td>
				<table>
					<tr>
						<th>Referring Doctor:</th>
						<td>"+p_consultantName+"</td>
					</tr>
					<tr>
						<th>Phone:</th>
						<td>"+p_consultantPhone+"</td>
					</tr>
					<tr>
						<th>Fax:</th>
						<td>"+p_consultantFax+"</td>
					</tr>
					<tr>
						<th>Address:</th>
						<td>"+p_consultantAddress+"</td>
					</tr>
				</table>
			</td>
		</tr>
		<tr><td colspan=2></td></tr>
		<tr>
			<td>
				<table>
					<tr>
						<th>Patient:</th>
						<td>"+p_patientName+"</td>
					</tr>
					<tr>
						<th>Address:</th>
						<td>"+p_patientAddress+"</td>
					</tr>
					<tr>
						<th>Phone:</th>
						<td>"+p_patientPhone+"</td>
					</tr>
					<tr>
						<th>Work Phone:</th>
						<td>"+p_patientWorkPhone+"</td>
					</tr>
					<tr>
						<th>Birthdate:</th>
						<td>"+p_patientBirthdate+"</td>
					</tr>
				</table>
			</td>
			<td>
				<table>
					<tr>
						<th>Sex:</th>
						<td>"+p_patientSex+"</td>
					</tr>
					<tr>
						<th>Health Card No:</th>
						<td>"+p_patientHealthCardNo+"</td>
					</tr>
					<tr>
						<th>Appointment date:</th>
						<td>"+p_appointmentDate+"</td>
					</tr>
					<tr>
						<th>Appointment time:</th>
						<td>"+p_appointmentTime+"</td>
					</tr>
					<tr>
						<th>Chart No:</th>
						<td>"+p_patientChartNo+"</td>
					</tr>
				</table>
			</td>
		</tr>
	</table>
	<br/>
	<table>
		<tr><th>Examination:</th></tr>
		<tr><td>"+p_examination+"<hr></td></tr>
		<tr><th>Impression:</th></tr>
		<tr><td>"+p_impression+"<hr></td></tr>
		<tr><th>Plan:</th></tr>
		<tr><td>"+p_plan+"<hr></td></tr>
		<tr><td></td></tr>
		<tr><th>Reason for consultation: (Date: "+p_referralDate+")</th></tr>
		<tr><td>"+p_reason+"<hr></td></tr>
		<tr><th>Pertinent Clinical Information:</th></tr>
		<tr><td>"+p_clinicalInfo+"<hr></td></tr>
		<tr><th>Significant Concurrent Problems:</th></tr>
		<tr><td>"+p_concurrentProblems+"<hr></td></tr>
		<tr><th>Current Medications:</th></tr>
		<tr><td>"+p_currentMeds+"<hr></td></tr>
		<tr><th>Allergies:</th></tr>
		<tr><td>"+p_allergies+"<hr></td></tr>
		<tr><td><label>Consultant: </label>"+p_provider+"</td></tr>
		<tr><td></td></tr>
		<tr><td><div class='center'><em>Created by: OSCAR The open-source EMR www.oscarcanada.org</em></div></td></tr>
	</table>
</body>
</html>
*/
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! moment */ "./node_modules/moment/moment.js"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/consults/consultResponseListController.js":
/*!*******************************************************!*\
  !*** ./src/consults/consultResponseListController.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Consults').controller('Consults.ConsultResponseListController', [

	'$scope',
	'$timeout',
	'$state',
	'$location',
	'NgTableParams',
	'consultService',
	'providerService',
	'demographicService',
	'demographicsService',
	'securityService',
	'staticDataService',

	function(
		$scope,
		$timeout,
		$state,
		$location,
		NgTableParams,
		consultService,
		providerService,
		demographicService,
		demographicsService,
		securityService,
		staticDataService)
	{

		var controller = this;

		controller.onRecordPage = false;
		controller.demographicNo = null;
		controller.statuses = staticDataService.getConsultResponseStatuses(); 	//set search statuses
		controller.urgencies = staticDataService.getConsultUrgencies(); //get urgencies list
		controller.lastResponse = "";
		controller.teams = [];
		controller.consult = {};

		var allTeams = "All Teams";
		controller.search = {
			team: allTeams,
			startIndex: 0,
			numToReturn: 10
		};



		// Initialize the controller
		controller.init = function init()
		{
			if($state.params.demographicNo){
				controller.demographicNo = parseInt($state.params.demographicNo);
				controller.onRecordPage = true;
				controller.search.list = "patient";
			}

			controller.getAccessRights();
			controller.getTeams();
		};

		controller.getAccessRights = function getAccessRights()
		{
			//get access rights
			securityService.hasRight("_con", "r").then(
				function success(results)
				{
					controller.consultReadAccess = results;
				},
				function error(errors)
				{
					console.log(errors);
				});
			securityService.hasRight("_con", "u").then(
				function success(results)
				{
					controller.consultUpdateAccess = results; //to be used with batch operations (not yet implemented)
				},
				function error(errors)
				{
					console.log(errors);
				});
			securityService.hasRight("_con", "w").then(
				function success(results)
				{
					controller.consultWriteAccess = results;
				},
				function error(errors)
				{
					console.log(errors);
				});
		};


		controller.getTeams = function getTeams()
		{
			providerService.getActiveTeams().then(
				function success(results)
				{
					controller.teams = results;
					controller.teams.unshift(allTeams);
					controller.search.team = allTeams;
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.searchPatients = function searchPatients(term)
		{
			var search = {
				type: 'Name',
				'term': term,
				status: 'active',
				integrator: false,
				outofdomain: true
			};
			return demographicsService.search(search, 0, 25).then(
				function success(results)
				{
					var resp = [];
					for (var x = 0; x < results.content.length; x++)
					{
						resp.push(
						{
							demographicNo: results.content[x].demographicNo,
							name: results.content[x].lastName + ', ' + results.content[x].firstName
						});
					}
					return resp;
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.searchMrps = function searchMrps(term)
		{
			var search = {
				searchTerm: term,
				active: true
			};
			return providerService.searchProviders(search).then(
				function success(results)
				{
					var resp = [];
					for (var x = 0; x < results.length; x++)
					{
						resp.push(
						{
							mrpNo: results[x].providerNo,
							name: results[x].name
						});
					}
					return resp;
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.updateMrpNo = function updateMrpNo(model)
		{
			if (Juno.Common.Util.exists(model))
			{
				controller.search.mrpNo = Number(model.mrpNo);
				controller.consult.mrpName = model.name;
			}
			else
			{
				providerService.getProvider(model).then(
					function success(results)
					{
						controller.search.mrpNo = Number(model);
						controller.consult.mrpName = results.lastName + ", " + results.firstName;
						controller.doSearch(true);
					},
					function error(errors)
					{
						console.log(errors);
					});
			}
		};

		controller.updateDemographicNo = function updateDemographicNo(item, model, label)
		{
			if(item !== null)
			{
				controller.demographicName = item.name;
				controller.demographicNo = item.demographicNo;
				controller.tableParams.reload();
			}
		};

		controller.checkAll = function checkAll()
		{
			angular.forEach(controller.lastResponse, function(item)
			{
				item.checked = true;
			});
		};

		controller.checkNone = function checkNone()
		{
			angular.forEach(controller.lastResponse, function(item)
			{
				item.checked = false;
			});
		};

		controller.editConsult = function editConsult(consult)
		{
			if(consult)
			{
				url = "/record/" + consult.demographic.demographicNo + "/consultResponse/" + consult.id;
				$location.path(url).search(controller.search);
				return true;
			}

			alert("Something went wrong");
			return false;
		};

		controller.addConsult = function addConsult()
		{
			if (!controller.consultWriteAccess)
			{
				alert("You don't have right to create new consult response");
				return false;
			}

			// User shouldn't be able to access this function unless demoNo is populated, but check just in case
			if(controller.demographicNo)
			{
				var url = "/record/" + controller.demographicNo + "/consultResponse/new";
				$location.path(url).search(controller.search);
				return true;
			}

			alert("Something went wrong");
			return false;
		};

		controller.removeDemographicAssignment = function removeDemographicAssignment()
		{
			controller.demographicNo = null;
			controller.demographicName = null;
			controller.tableParams.reload();
		};

		controller.removeMrpAssignment = function removeMrpAssignment()
		{
			controller.search.mrpNo = null;
			controller.consult.mrpName = null;
			controller.tableParams.reload();
		};

		controller.clear = function clear()
		{
			if(!controller.onRecordPage)
				controller.removeDemographicAssignment();
			controller.removeMrpAssignment();
			controller.search = {
				team: allTeams,
				startIndex: 0,
				numToReturn: 10,
			};

			controller.doSearch();
		};

		controller.doSearch = function doSearch(init)
		{
			$location.search(controller.search);
			controller.tableParams.reload();
		};

		controller.tableParams = new NgTableParams(
		{
			page: 1, // show first page
			count: 10, // initial count per page
			sorting:
			{
				ReferralDate: 'desc' // initial sorting
			}
		},
		{
			// total: 0, // length of data
			getData: function(params)
			{
				controller.getSavedSearchParams();
		
				var count = params._params.count;
				var page = params.url().page;

				controller.search.startIndex = ((page - 1) * count);
				controller.search.numToReturn = parseInt(count);

				controller.search.page = params.url().page;
				controller.search.perPage = params.url().count;

				var myRegexp = /sorting\[(\w+)\]/g;
				for(var key in params.url()) {
					var match = myRegexp.exec(String(key));
					if(match) {
						controller.search.sortColumn = match[1];
						controller.search.sortDirection = params.url()[String(key)];
					}
				}

				var tmpSearch = angular.copy(controller.search);

				if (tmpSearch.team === allTeams)
				{
					tmpSearch.team = null;
				}

				if(controller.demographicNo)
				{
					tmpSearch.demographicNo = controller.demographicNo;
				}

				return consultService.searchResponses(tmpSearch).then(
					function success(results)
					{
						params.total(parseInt(results.meta.total[0]));

						for (var i = 0; i < results.data.length; i++)
						{
							var consult = results.data[i];

							//add statusDescription
							for (var j = 0; j < controller.statuses.length; j++)
							{
								if (consult.status === controller.statuses[j].value)
								{
									consult.statusDescription = controller.statuses[j].name;
									break;
								}
							}

							//add urgencyDescription
							for (var j = 0; j < controller.urgencies.length; j++)
							{
								if (consult.urgency === controller.urgencies[j].value)
								{
									consult.urgencyDescription = controller.urgencies[j].name;
									break;
								}
							}

							//add urgencyColor if consult urgency=Urgent(1)
							if (consult.urgency === 1)
							{
								consult.urgencyColor = "text-danger"; //= red text
							}
						}

						controller.lastResponse = results.data;
						return results.data;
					},
					function error(errors)
					{
						console.log(errors);
					});
			}
		});

		controller.getSavedSearchParams = function getSavedSearchParams()
		{
			//process search parameters
			if ($state.params.demographicNo != null)
			{
				controller.hideSearchPatient = true;
				controller.updateDemographicNo(null, $state.params.demographicNo);
			}
			else if ($location.search().srhDemoNo != null)
			{
				controller.updateDemographicNo(null, $location.search().srhDemoNo);
			}
			if ($location.search().srhMrpNo != null) controller.updateMrpNo($location.search().srhMrpNo);
			if ($location.search().referralStartDate) controller.search.referralStartDate = new Date($location.search().referralStartDate);
			if ($location.search().referralEndDate != null) controller.search.referralEndDate = new Date($location.search().referralEndDate);
			if ($location.search().appointmentStartDate != null) controller.search.appointmentStartDate = new Date($location.search().appointmentStartDate);
			if ($location.search().appointmentEndDate != null) controller.search.appointmentEndDate = new Date($location.search().appointmentEndDate);
			if ($location.search().status != null) controller.search.status = Number($location.search().status);
			if ($location.search().team != null) controller.search.team = $location.search().team;
			if ($location.search().countPerPage != null) controller.countPerPage = $location.search().countPerPage;
			if ($location.search().toPage != null) controller.toPage = $location.search().toPage;
			if ($location.search().sortColumn != null && $location.search().sortDirection != null)
			{
				controller.search.sortColumn = $location.search().sortColumn;
				controller.search.sortDirection = $location.search().sortDirection;
			}
		};

		controller.init();
	}
]);

/***/ }),

/***/ "./src/consults/module.js":
/*!********************************!*\
  !*** ./src/consults/module.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('Consults', ['Common', 'Common.Services']);

/***/ }),

/***/ "./src/dashboard/dashboardController.js":
/*!**********************************************!*\
  !*** ./src/dashboard/dashboardController.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*

    Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
    This software is published under the GPL GNU General Public License.
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    This software was written for the
    Department of Family Medicine
    McMaster University
    Hamilton
    Ontario, Canada

*/
angular.module('Dashboard').controller('Dashboard.DashboardController', [

    '$scope',
    '$uibModal',
    'NgTableParams',
    'providerService',
    'ticklerService',
    'messageService',
    'inboxService',
    'k2aService',
    'noteService',
    'securityService',
    'personaService',

    function($scope,
             $uibModal,
             NgTableParams,
             providerService,
             ticklerService,
             messageService,
             inboxService,
             k2aService,
             noteService,
             securityService,
             personaService)
    {

        var controller = this;

        //header
        controller.displayDate = function displayDate()
        {
            return new Date();
        };
        console.log('TABLE PARAMS', NgTableParams);
        controller.me = null;
        controller.k2aActive = false;
	    controller.k2aFeedActive = false;

	    controller.busyLoadingData = false;

        personaService.getDashboardPreferences().then(
            function success(results)
            {
                controller.prefs = results.dashboardPreferences;
            },
            function error(errors)
            {
                console.log(errors);
            });

        securityService.hasRights(
            {
                items: [
                    {
                        objectName: '_tickler',
                        privilege: 'w'
                    },
                    {
                        objectName: '_tickler',
                        privilege: 'r'
                    }]
            }).then(
            function success(results)
            {
                if (results.content != null && results.content.length == 2)
                {
                    controller.ticklerWriteAccess = results.content[0];
                    controller.ticklerReadAccess = results.content[1];
                }
            },
            function error(errors)
            {
                console.log(errors);
            });

        controller.inboxTableParams = new NgTableParams(
            {
                page: 1, // show first page
                count: 10
            },
            {
                // total: 0, // length of data
                getData: function(params)
                {


                    return inboxService.getDashboardItems(params.count()).then(
                        function success(results)
                        {
                            console.log('INBOX DATA: ', results);
                            params.total(results.total); // recal. page nav controls
                            return results.content;
                        },
                        function error(errors)
                        {
                            console.log(errors);
                        });
                }
            });

        controller.openInbox = function openInbox()
        {
            newwindow = window.open('../dms/inboxManage.do?method=prepareForIndexPage', 'inbox', 'height=700,width=1000');
            if (window.focus)
            {
                newwindow.focus();
            }
        };


	    controller.updateK2aActive = function ()
	    {
		    k2aService.isK2AInit().then(
			    function success(data)
			    {
				    controller.k2aActive = data;
			    }
		    );
	    };
	    controller.loadMoreK2aFeed = function ()
	    {
		    controller.updateFeed(controller.k2afeed.length, 10);
	    };

	    controller.authenticateK2A = function (id)
	    {
		    window.open('../apps/oauth1.jsp?id=' + id, 'appAuth', 'width=700,height=450');
	    };

	    controller.agreeWithK2aPost = function (item)
	    {
		    if (item.agree)
		    {
			    k2aService.removeK2AComment(item.agreeId).then(
				    function (response)
				    {
					    item.agree = false;
					    item.agreeCount--;
					    item.agreeId = '';
				    },
				    function (reason)
				    {
					    alert(reason);
				    });
		    }
		    else if (!(item.agree || item.disagree))
		    {
			    if (typeof item.newComment === 'undefined')
			    {
				    item.newComment = {};
			    }
			    item.newComment.agree = true;
			    item.newComment.body = '';

			    controller.commentOnK2aPost(item);
		    }
	    };

	    controller.disagreeWithK2aPost = function (item)
	    {
		    if (item.disagree)
		    {
			    k2aService.removeK2AComment(item.agreeId).then(
				    function (response)
				    {
					    item.disagree = false;
					    item.disagreeCount--;
					    item.agreeId = '';
				    },
				    function (reason)
				    {
					    alert(reason);
				    });
		    }
		    if (!(item.agree || item.disagree))
		    {
			    if (typeof item.newComment === 'undefined')
			    {
				    item.newComment = {};
			    }
			    item.newComment.agree = false;
			    item.newComment.body = '';

			    controller.commentOnK2aPost(item);
		    }
	    };

	    controller.commentOnK2aPost = function (item)
	    {
		    item.newComment.postId = item.id;
		    k2aService.postK2AComment(item.newComment).then(
			    function (response)
			    {
				    item.newComment.body = '';
				    item.newComment.agree = '';
				    item.agreeId = response.agreeId;
				    if (!(typeof response.post[0].agree === 'undefined'))
				    {
					    if (response.post[0].agree)
					    {
						    item.agree = true;
						    item.agreeId = response.post[0].agreeId;
						    item.agreeCount++;
					    }
					    else
					    {
						    item.disagree = true;
						    item.agreeId = response.post[0].agreeId;
						    item.disagreeCount++;
					    }
				    }
				    else
				    {
					    item.commentCount++;
					    item.comments.unshift(response.post[0]);
				    }
			    },
			    function (reason)
			    {
				    alert(reason);
			    });
	    };

        controller.updateTicklers = function updateTicklers()
        {
            //consider the option to have overdue only or not
            ticklerService.search(
                {
                    status: 'A',
                    creator: controller.me.providerNo,
                    overdueOnly: 'property'
                }, 0, 6).then(
                function success(results)
                {
                    controller.totalTicklers = results.total;
                    if (results.content == null)
                    {
                        return;
                    }

                    if (results.content instanceof Array)
                    {
                        controller.ticklers = results.content;
                    }
                    else
                    {
                        var arr = new Array();
                        arr[0] = results.content;
                        controller.ticklers = arr;
                    }
                },
                function error(errors)
                {
                    console.log(errors);
                });
        };

        controller.updateMessages = function updateMessages()
        {
            messageService.getUnread(6).then(
                function success(results)
                {
                    controller.totalMessages = results.total;

                    if (results.content == null)
                    {
                        return;
                    }

                    if (results.content instanceof Array)
                    {
                        controller.messages = results.content;
                    }
                    else
                    {
                        var arr = new Array();
                        arr[0] = results.content;
                        controller.messages = arr;
                    }
                },
                function error(errors)
                {
                    console.log(errors);
                });

        };

        controller.updateReports = function updateReports()
        {
            //TODO: changed to return 5 since that is all we are using at the moment
            inboxService.getDashboardItems(5).then(
                function success(results)
                {
                    if (results.content == null)
                    {
                        return;
                    }

                    if (results.content instanceof Array)
                    {
                        controller.inbox = results.content;
                    }
                    else
                    {
                        var arr = new Array();
                        arr[0] = results.content;
                        controller.inbox = arr;
                    }
                    controller.totalInbox = results.total;
                },
                function error(errors)
                {
                    console.log(errors);
                });
        };

        controller.updateFeed = function updateFeed(startPoint, numberOfRows)
        {
            if (controller.busyLoadingData) return;
            controller.busyLoadingData = true;
            k2aService.getK2aFeed(startPoint, numberOfRows).then(
                function(response)
                {
                	console.log("k2a feed response", response);

	                if (response.content instanceof Array)
	                {
	                	var content = response.content;
		                for (var i = 0; i < content.length; i++)
		                {
			                if (!Array.isArray(content[i].comments))
			                {
				                var arr = new Array();
				                arr[0] = content[i].comments;
				                content[i].comments = arr;
			                }
		                }
		                if (typeof controller.k2afeed === 'undefined')
		                {
			                controller.k2afeed = content;
		                }
		                else
		                {
			                controller.k2afeed = controller.k2afeed.concat(content);
		                }
		                controller.k2aFeedActive = true;
		                controller.busyLoadingData = false;
	                }
	                else
	                {
		                if (response.content.authenticatek2a)
		                {
			                controller.authenticatek2a = response.content.description;
		                }
		                else
		                {
			                var arr = new Array();
			                arr[0] = response.content;
			                controller.k2afeed = arr;
			                controller.k2aFeedActive = true;
		                }
	                }

                },
                function(reason)
                {
                    alert(reason);
                    controller.busyLoadingData = false;
                });
        };

        controller.updateDashboard = function updateDashboard()
        {
            controller.updateTicklers();
            controller.updateMessages();
            controller.updateReports();
            controller.updateFeed(0, 10);
            controller.updateK2aActive();

        };

        $scope.$watch(function()
        {
            return securityService.getUser();
        }, function(newVal)
        {
            controller.me = newVal;

            if (newVal != null)
            {
                controller.updateDashboard();
            }
        }, true);


        controller.isTicklerExpiredOrHighPriority = function isTicklerExpiredOrHighPriority(tickler)
        {
            var ticklerDate = Date.parse(tickler.serviceDate);
            var now = new Date();
            var result = false;
            if (ticklerDate < now)
            {
                result = true;
            }
            if (tickler.priority == 'High')
            {
                result = true;
            }

            return result;
        };

        controller.isTicklerHighPriority = function isTicklerHighPriority(tickler)
        {
            var ticklerDate = Date.parse(tickler.serviceDate);
            var now = new Date();
            var result = false;

            if (tickler.priority == 'High')
            {
                result = true;
            }

            return result;
        };

        controller.openClassicMessenger = function openClassicMessenger()
        {
            if (controller.me != null)
            {
                window.open('../oscarMessenger/DisplayMessages.do?providerNo=' + controller.me.providerNo, 'msgs', 'height=700,width=1024,scrollbars=1');
            }
        };

        controller.viewMessage = function viewMessage(message)
        {
            window.open('../oscarMessenger/ViewMessage.do?messageID=' + message.id + '&boxType=0', 'msg' + message.id, 'height=700,width=1024,scrollbars=1');
        };

        controller.viewTickler = function viewTickler(tickler)
        {
            var modalInstance = $uibModal.open(
                {
                    templateUrl: 'src/tickler/ticklerView.jsp',
                    controller: 'Tickler.TicklerViewController as  ticklerViewCtrl',
                    backdrop: 'static',
                    size: 'lg',
                    resolve:
                        {
                            tickler: function()
                            {
                                return tickler;
                            },
                            ticklerNote: function()
                            {
                                return noteService.getTicklerNote(tickler.id);
                            },
                            ticklerWriteAccess: function()
                            {
                                return controller.ticklerWriteAccess;
                            },
                            me: function()
                            {
                                return controller.me;
                            }
                        }
                });

            modalInstance.result.then(
                function success(results)
                {
                    //console.log('data from modalInstance '+data);
                    if (results != null && results == true)
                    {
                        controller.updateTicklers();
                    }
                },
                function error(errors)
                {
                    console.log(errors);
                });

        };

        controller.configureTicklers = function configureTicklers()
        {
            var modalInstance = $uibModal.open(
                {
                    templateUrl: 'src/tickler/configureDashboard.jsp',
                    controller: 'Dashboard.TicklerConfigureController as ticklerConfigureCtrl',
                    backdrop: 'static',
                    size: 'md',
                    resolve:
                        {
                            prefs: function()
                            {
                                return personaService.getDashboardPreferences();
                            }
                        }
                });

            modalInstance.result.then(
                function success(results)
                {
                    if (results == true)
                    {
                        controller.updateTicklers();
                        personaService.getDashboardPreferences().then(
                            function(results)
                            {
                                controller.prefs = results.dashboardPreferences;
                            });
                    }
                },
                function error(errors)
                {
                    console.log(errors);
                });

        };
    }
]);

/***/ }),

/***/ "./src/dashboard/module.js":
/*!*********************************!*\
  !*** ./src/dashboard/module.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('Dashboard', ['Common', 'Common.Services']);

/***/ }),

/***/ "./src/dashboard/ticklerConfigureController.js":
/*!*****************************************************!*\
  !*** ./src/dashboard/ticklerConfigureController.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Dashboard').controller('Dashboard.TicklerConfigureController', [

	'$scope',
	'$uibModalInstance',
	'personaService',
	'prefs',

	function(
		$scope,
		$uibModalInstance,
		personaService,
		prefs)
	{

		var controller = this;

		controller.prefs = prefs.dashboardPreferences;

		controller.close = function close()
		{
			$uibModalInstance.close(false);
		};

		controller.save = function save()
		{

			personaService.updateDashboardPreferences(controller.prefs).then(
				function success(results)
				{
					$uibModalInstance.close(true);
				},
				function error(errors)
				{
					$uibModalInstance.close(false);
					console.log(errors);
				});

		};
	}
]);

/***/ }),

/***/ "./src/document/documentsController.js":
/*!*********************************************!*\
  !*** ./src/document/documentsController.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Document').controller('Document.DocumentsController', [

	'$scope',
	'securityService',

	function(
		$scope,
		securityService)
	{
		var controller = this;
		controller.me = null;

		$scope.$watch(function()
		{
			return securityService.getUser();
		}, function(newVal)
		{
			controller.me = newVal;

			if (newVal != null)
			{
				window.open('../dms/documentReport.jsp?function=provider&functionid=' + controller.me.providerNo, 'edocView', 'height=700,width=1024');
			}
		}, true);


		controller.openPopup = function openPopup()
		{
			window.open('../dms/documentReport.jsp?function=provider&functionid=' + controller.me.providerNo, 'edocView', 'height=700,width=1024');
		};
	}
]);

/***/ }),

/***/ "./src/document/module.js":
/*!********************************!*\
  !*** ./src/document/module.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('Document', ['Common', 'Common.Services']);

/***/ }),

/***/ "./src/help/helpController.js":
/*!************************************!*\
  !*** ./src/help/helpController.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Help').controller('Help.HelpController', [

	'$scope',
	'$http',

	function(
		$scope,
		$http) {

	}
]);

/***/ }),

/***/ "./src/help/module.js":
/*!****************************!*\
  !*** ./src/help/module.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('Help', []);

/***/ }),

/***/ "./src/help/supportController.js":
/*!***************************************!*\
  !*** ./src/help/supportController.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Help').controller('Help.SupportController', [

	'$scope',
	'$http',

	function(
		$scope,
		$http)
	{

		$scope.ospInfo = {
			name: 'OscarHost.ca',
			phone: '250-900-7373',
			contact: 'Oscarhost Support',
			email: 'support@oscarhost.ca',
			url: 'https://help.oscarhost.ca'
		};

		$scope.buildInfo = {
			versionDisplayName: '15-Beta',
			version: 'master-0000'
		};
	}
]);

/***/ }),

/***/ "./src/inbox/inboxController.js":
/*!**************************************!*\
  !*** ./src/inbox/inboxController.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Inbox').controller('Inbox.InboxController', [

	'$scope',
	'$http',

	function(
		$scope,
		$http) {

	}
]);

/***/ }),

/***/ "./src/inbox/module.js":
/*!*****************************!*\
  !*** ./src/inbox/module.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('Inbox', []);

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
//import {CalendarApiAdapter} from './schedule/calendarApiAdapter';
/*
angular.module('Schedule').service(
    'Schedule.CalendarApiAdapter', CalendarApiAdapter);
    */


/***/ }),

/***/ "./src/layout/bodyController.js":
/*!**************************************!*\
  !*** ./src/layout/bodyController.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Layout').controller('Layout.BodyController', [
	'$rootScope',
	'$scope',
	'providerService',
	'securityService',
	function($rootScope, $scope, providerService, securityService)
	{
		var controller = this;

		//=========================================================================
		// Initialization
		//=========================================================================

		controller.init = function init()
		{
			providerService.getMe().then(
				function success(results)
				{
					securityService.setUser(results);
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		// flag for whether the patient list should be showing or not
		// can be set from controllers with $emit: $scope.$emit('configureShowPatientList', false);
		controller.showPatientList = true;

		// controllers can update the showPatientList value by calling an $emit
		// e.g. $scope.$emit('configureShowPatientList', false);
		$scope.$on('configureShowPatientList',
			function(event, value)
			{
				console.log("Layout.BodyController updating showPatientList", value);
				controller.showPatientList = value;
			});
	}
]);

/***/ }),

/***/ "./src/layout/module.js":
/*!******************************!*\
  !*** ./src/layout/module.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */

angular.module('Layout', ['Common', 'Common.Services']);

/***/ }),

/***/ "./src/layout/navBarController.js":
/*!****************************************!*\
  !*** ./src/layout/navBarController.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

/*

    Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
    This software is published under the GPL GNU General Public License.
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    This software was written for the
    Department of Family Medicine
    McMaster University
    Hamilton
    Ontario, Canada

*/

angular.module('Layout').controller('Layout.NavBarController', [

	'$rootScope',
	'$scope',
	'$q',
	'$timeout',
	'$location',
	'$state',
	'$uibModal',
	'securityService',
	'personaService',
	'billingService',
	'inboxService',
	'messageService',

	function(
		$rootScope,
		$scope,
		$q,
		$timeout,
		$location,
		$state,
		$uibModal,
		securityService,
		personaService,
		billingService,
		inboxService,
		messageService)
	{
		var controller = this;

		//=========================================================================
		// Initialization
		//=========================================================================

		controller.init = function init()
		{
			controller.unAckLabDocTotal = 0;
			controller.unreadMessageTotal = 0;
			controller.demographicSearch = null;

			billingService.getBillingRegion().then(
				function success(results)
				{
					controller.billRegion = results.message;
				},
				function error(errors)
				{
					console.log(errors);
				});

			securityService.hasRights(
			{
				items: [
				{
					objectName: '_search',
					privilege: 'r'
				},
				{
					objectName: '_demographic',
					privilege: 'w'
				},
				{
					objectName: '_msg',
					privilege: 'r'
				}]
			}).then(
				function success(results)
				{
					if (results.content !== null)
					{
						controller.searchRights = results.content[0];
						controller.newDemographicRights = results.content[1];
						controller.messageRights = results.content[2];
					}
				},
				function error(errors)
				{
					console.log(errors);
				});

			personaService.getDashboardMenu().then(
				function success(results)
				{
					if (results.menus)
					{
						controller.dashboardMenu = results.menus.menu;
					}
				},
				function error(errors)
				{
					console.log(errors);
				});

			personaService.getNavBar().then(
				function success(results)
				{
					controller.currentProgram = results.currentProgram.program;

					if (results.programDomain.program instanceof Array)
					{
						controller.programDomain = results.programDomain.program;
					}
					else
					{
						controller.programDomain = [results.programDomain.program];
					}

					controller.unreadMessagesCount = results.unreadMessagesCount;
					controller.unreadPatientMessagesCount = results.unreadPatientMessagesCount;
					controller.getUnAckLabDocCount();
					controller.getUnreadMessageCount();
					controller.demographicSearchDropDownItems = results.menus.patientSearchMenu.items;
					controller.menuItems = results.menus.menu.items;
					controller.userMenuItems = results.menus.userMenu.items;
					controller.messengerMenu = results.menus.messengerMenu.items;
				},
				function error(errors)
				{
					console.log(errors);
				});

		};

		//=========================================================================
		// Watches
		//=========================================================================

		$scope.$watch(
			function()
			{
				return securityService.getUser();
			},
			function(newVal)
			{
				controller.me = newVal;
			},
			true);

		$scope.$watch(function()
			{
				return controller.demographicSearch;
			},
			function(new_value)
			{
				if (new_value != null && !new_value.isTypeaheadSearchQuery)
				{
					// selection from the patient search typeahead changed
					if (new_value.moreResults)
					{
						// the 'more results' option was selected
						controller.goToPatientSearch(new_value.searchQuery);
					}
					else
					{
						// patient was selected
						controller.goToPatientRecord(new_value.demographicNo);
					}

					// clear the selection
					controller.demographicSearch = null;
				}
			}, true);

		//=========================================================================
		// Methods
		//=========================================================================

		controller.getUnAckLabDocCount = function getUnAckLabDocCount()
		{
			inboxService.getUnAckLabDocCount().then(
				function success(results)
				{
					controller.unAckLabDocTotal = results;
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.getUnreadMessageCount = function getUnreadMessageCount()
		{
			messageService.getUnreadCount().then(
				function success(results)
				{
					controller.unreadMessageTotal = results;
				},
				function error(errors)
				{
					console.log(errors);
				});

		};

		controller.getNavBar = function getNavBar()
		{
			personaService.getNavBar().then(
				function success(results)
				{
					controller.currentProgram = results.currentProgram.program;
					if (results.programDomain.program instanceof Array)
					{
						controller.programDomain = results.programDomain.program;
					}
					else
					{
						controller.programDomain = [results.programDomain.program];
					}

					controller.unreadMessagesCount = results.unreadMessagesCount;
					controller.unreadPatientMessagesCount = results.unreadPatientMessagesCount;
					controller.demographicSearchDropDownItems = results.menus.patientSearchMenu.items;
					controller.menuItems = results.menus.menu.items;
					controller.userMenuItems = results.menus.userMenu.items;
					controller.messengerMenu = results.menus.messengerMenu.items;
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		// when patient typeahead search button is clicked
		controller.onPatientSearch = function onPatientSearch(search)
		{
			if (search === null)
			{
				controller.goToPatientSearch();

			}
			else if (search.isTypeaheadSearchQuery) // should only happen when search isTypeaheadSearchQuery
			{
				controller.goToPatientSearch(search.searchQuery);
			}

			// clear the selection
			controller.demographicSearch = null;
		};

		controller.goToPatientSearch = function goToPatientSearch(search)
		{
			$state.go('search',
			{
				term: search
			},
			{
				reload: 'search'
			});
		};

		controller.goToPatientRecord = function goToPatientRecord(demographicNo)
		{
			$state.go('record.details',
			{
				demographicNo: demographicNo,
				hideNote: true
			},
			{
				reload: 'record.details'
			});
		};

		//to help ng-clicks on buttons
		controller.transition = function transition(item)
		{
			console.log('transition', item);

			var newWindow;

			if (angular.isDefined(item) &&
				angular.isDefined(item.state) &&
				item.state !== null)
			{

				var url = "";
				var wname = "";

				if (item.label === "Inbox")
				{
					url = "../dms/inboxManage.do?method=prepareForIndexPage";
					wname = "inbox";
				}
				else if (item.label === "Billing")
				{
					url = "../billing.do?billRegion=CLINICAID&action=invoice_reports";
					wname = "billing";
				}
				else if (item.label === "Admin")
				{
					url = "../administration/";
					wname = "admin";
				}
				else if (item.label === "eDocs")
				{
					url = "../dms/documentReport.jsp?function=provider&functionid=" +
						encodeURIComponent(controller.me.providerNo);
					wname = "edocView";
				}
				else
				{
					$timeout(function()
					{
						$state.go(item.state);
					});
				}

				if (url !== "" && wname !== "")
				{
					newWindow = window.open(
						url, wname, 'scrollbars=1,height=700,width=1000');
					if (window.focus)
					{
						newWindow.focus();
					}
				}
			}
			else if (angular.isDefined(item) &&
				angular.isDefined(item.url) &&
				item.url !== null)
			{

				if (item.label === "Schedule")
				{
					var qs = "";
					var path = $location.path();
					path = path.substring(1); //remove leading /
					var param = path.split("/");

					if (param.length === 1)
					{
						qs = "?module=" + encodeURIComponent(param[0]);
					}
					else if (param.length === 3)
					{
						qs = "?record=" + encodeURIComponent(param[1]) +
							"&module=" + encodeURIComponent(param[2]);
					}

					window.location = item.url + qs;
					return false;

				}
				else if (angular.isDefined(item) &&
					angular.isDefined(item.openNewWindow) &&
					item.openNewWindow)
				{
					newWindow = window.open(item.url);
					if (window.focus)
					{
						newWindow.focus();
					}
				}
				else
				{
					window.location = item.url;
				}
			}
		};

		controller.openMessenger = function(item)
		{
			if (controller.me != null)
			{
				if (angular.isDefined(item) &&
					angular.isDefined(item.url) &&
					item.url === 'phr')
				{
					window.open('../phr/PhrMessage.do?method=viewMessages',
						'INDIVOMESSENGER' + encodeURIComponent(controller.me.providerNo),
						'height=700,width=1024,scrollbars=1');
				}
				else if (angular.isDefined(item) &&
					angular.isDefined(item.url) &&
					item.url === 'k2a')
				{
					var win;
					if (item.extra === "-")
					{
						//If user is not logged in
						win = window.open('../apps/oauth1.jsp?id=K2A',
							'appAuth', 'width=700,height=450,scrollbars=1');
						win.focus();
					}
					else
					{
						win = window.open('../apps/notifications.jsp',
							'appAuth', 'width=450,height=700,scrollbars=1');
						win.focus();
					}
				}
				else
				{
					// by default open classic messenger
					window.open('../oscarMessenger/DisplayMessages.do?providerNo=' +
						encodeURIComponent(controller.me.providerNo),
						'msgs', 'height=700,width=1024,scrollbars=1');
				}
			}
		};

		controller.newDemographic = function newDemographic(size)
		{
			var modalInstance = $uibModal.open(
			{
				templateUrl: 'src/patient/newPatient.jsp',
				controller: 'Patient.NewPatientController as newPatientCtrl',
				backdrop: 'static',
				size: size
			});

			modalInstance.result.then(
				function success(results)
				{
					console.log(results);
					console.log('patient #: ', results.demographicNo);
					console.log($location.path());

					$location.path('/record/' +
						encodeURIComponent(results.demographicNo) +
						'/details');

					console.log($location.path());
				},
				function error(errors)
				{
					console.log('Modal dismissed at: ' + new Date());
					console.log(errors);
				});

			console.log($('#myModal'));
		};

		controller.isActive = function(tab)
		{
			return ($state.current.name === tab.state);
		};

		controller.changeProgram = function changeProgram(programId)
		{
			personaService.setCurrentProgram(programId).then(
				function success(results)
				{
					controller.getNavBar();
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		// For some reason Angular does not allow for the evaluation of the inverse of custom filters, thus, we have the the following masterpiece
		// If inverse === false, return true if the given item is supposed to be shown outside the 'more' dropdown on the medium view
		// If inverse === true, return the inverse of the above statement,
		controller.mediumNavItemFilter = function mediumNavItemFilter(inverse)
		{
			return function(item)
			{

				var labelsToShow = ['Dashboard', 'Schedule', 'Inbox', 'Consultations', 'Ticklers'];
				var filterValue = $.inArray(item.label, labelsToShow) != -1;

				if (inverse === true)
				{
					return !filterValue;
				}

				return filterValue;
			};
		};
		controller.smallNavItemFilter = function mediumNavItemFilter(inverse)
		{
			return function(item)
			{
				var labelsToShow = ['Dashboard'];
				var filterValue = $.inArray(item.label, labelsToShow) != -1;

				if (inverse === true)
				{
					return !filterValue;
				}

				return filterValue;
			};
		};
	}
]);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/patient/module.js":
/*!*******************************!*\
  !*** ./src/patient/module.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('Patient', ['Common', 'Common.Services']);

/***/ }),

/***/ "./src/patient/newPatientController.js":
/*!*********************************************!*\
  !*** ./src/patient/newPatientController.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

    Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
    This software is published under the GPL GNU General Public License.
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    This software was written for the
    Department of Family Medicine
    McMaster University
    Hamilton
    Ontario, Canada

*/

angular.module('Patient').controller('Patient.NewPatientController', [

	'$scope',
	'$uibModal',
	'$uibModalInstance',
	'demographicService',
	'securityService',
	'programService',
	'staticDataService',

	function(
		$scope,
		$uibModal,
		$uibModalInstance,
		demographicService,
		securityService,
		programService,
		staticDataService)
	{
		var controller = this;

		controller.demographic = {};

		controller.submitDisabled = false;

		//get access right for creating new patient
		securityService.hasRight("_demographic", "w").then(
			function success(results)
			{
				controller.hasRight = results;
			},
			function error(errors)
			{
				console.log(errors);
			});

		//get programs to be selected
		programService.getPrograms().then(
			function success(results)
			{
				controller.programs = results;
				if (controller.programs.length == 1)
				{
					controller.demographic.admissionProgramId = controller.programs[0].id;
				}
			},
			function error(errors)
			{
				console.log(errors);
			});

		//get genders to be selected
		controller.genders = staticDataService.getGenders();

		controller.save = function save(ngModelContoller)
		{
			console.log(controller.demographic.lastName);
			console.log(controller.demographic.firstName);
			console.log(controller.demographic.dobYear);
			console.log(controller.demographic.dobMonth);
			console.log(controller.demographic.dobDay);
			console.log(controller.demographic.sex);
			console.log(controller.demographic);
			console.log(ngModelContoller.$valid);
			console.log($scope);

			controller.submitDisabled = true;

			if (ngModelContoller.$valid)
			{
				console.log("Saving...");

				if (!controller.isCorrectDate(controller.demographic.dobYear,
						controller.demographic.dobMonth, controller.demographic.dobDay))
				{
					alert("Incorrect Date of Birth!");
					controller.submitDisabled = false;
					return;
				}

				controller.demographic.dateOfBirth =
					controller.demographic.dobYear + '-' +
					controller.demographic.dobMonth + "-" +
					controller.demographic.dobDay;

				controller.demographic.patientStatusDate = new Date();
				controller.demographic.dateJoined = new Date();
				controller.demoRetVal = {};

				demographicService.saveDemographic(controller.demographic).then(
					function success(results)
					{
						console.log(results);
						controller.demoRetVal = results;
						$uibModalInstance.close(results);
					},
					function error(errors)
					{
						console.log(errors);
						controller.submitDisabled = false;
					});

			}
			else
			{
				console.log("ERR!!");
				controller.submitDisabled = false;
			}
		};

		controller.ok = function ok()
		{
			$uibModalInstance.close(controller.selected.item);
		};

		controller.cancel = function cancel()
		{
			$uibModalInstance.dismiss('cancel');
		};

		controller.capName = function capName()
		{
			if (controller.demographic.lastName != null)
			{
				controller.demographic.lastName = controller.demographic.lastName.toUpperCase();
			}

			if (controller.demographic.firstName != null)
			{
				controller.demographic.firstName = controller.demographic.firstName.toUpperCase();
			}
		};

		controller.isCorrectDate = function isCorrectDate(year, month, day)
		{
			var d = new Date(year, month - 1, day);

			if (d == "Invalid Date") return false;
			if (d.getFullYear() != year) return false;
			if (d.getMonth() != month - 1) return false;
			if (d.getDate() != day) return false;

			return true;
		};
	}
]);

/***/ }),

/***/ "./src/patient/search/module.js":
/*!**************************************!*\
  !*** ./src/patient/search/module.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('Patient.Search', [ 'Common.Services' ]);


/***/ }),

/***/ "./src/patient/search/patientSearchController.js":
/*!*******************************************************!*\
  !*** ./src/patient/search/patientSearchController.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(moment) {

/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module('Patient.Search').controller('Patient.Search.PatientSearchController', [

	'$q',
	'$state',
	'$stateParams',
	'$uibModal',
	'NgTableParams',
	'securityService',
	'demographicsService',

	function(
		$q,
		$state,
		$stateParams,
		$uibModal,
		NgTableParams,
		securityService,
		demographicsService)
	{
		var controller = {};

		//=========================================================================
		// Initialization
		//=========================================================================

		controller.demographicReadAccess = null;
		controller.search = null;

		controller.init = function init()
		{
			controller.clearParams();
			if (Juno.Common.Util.exists($stateParams.term))
			{
				controller.search.term = $stateParams.term;
			}

			securityService.hasRights(
			{
				items: [
				{
					objectName: '_demographic',
					privilege: 'r'
				}]
			}).then(
				function success(results)
				{
					if (Juno.Common.Util.exists(results.content) && results.content.length === 1)
					{
						controller.demographicReadAccess = results.content[0];
						if (controller.demographicReadAccess)
						{
							controller.initTable();
						}
					}
					else
					{
						console.log('failed to load rights', results);
						controller.demographicReadAccess = false;
					}
				},
				function error(errors)
				{
					console.log(errors);
					controller.demographicReadAccess = false;
				});
		};

		//=========================================================================
		// Methods
		//=========================================================================

		controller.initTable = function initTable()
		{
			controller.tableParams = new NgTableParams(
			{
				page: 1,
				count: 10,
				sorting:
				{
					Name: 'asc'
				}
			},
			{
				getData: function(params)
				{
					var deferred = $q.defer();

					var count = params.url().count;
					var page = params.url().page;

					controller.search.params = params.url();

					var promiseArray = [];
					promiseArray.push(demographicsService.search(
						controller.search, ((page - 1) * count), count));

					controller.integratorResults = null;
					if (controller.search.integrator)
					{
						promiseArray.push(demographicsService.searchIntegrator(
							controller.search, 100));
					}

					$q.all(promiseArray).then(
						function success(results)
						{
							var demographicSearchResults = results[0];
							params.total(demographicSearchResults.total);

							if (controller.search.integrator)
							{
								controller.integratorResults = results[1];
							}

							deferred.resolve(demographicSearchResults.content);
						},
						function error(promiseErrors)
						{
							console.log('patient search failed', promiseErrors);
							deferred.reject();
						});

					return deferred.promise;
				}
			});
		};

		controller.searchPatients = function searchPatients()
		{
			if (controller.search.type === "DOB")
			{
				var dobMoment = moment(controller.search.term, ["YYYY-MM-DD", "YYYY/MM/DD"], true);
				if (dobMoment.isValid())
				{
					controller.search.term = dobMoment.format("YYYY-MM-DD");
				}
				else
				{
					alert("Please enter Date of Birth in format YYYY-MM-DD.");
					return;
				}
			}

			// reset to page 1 for new searches
			controller.tableParams.page(1);
			controller.tableParams.reload();
		};

		controller.clearParams = function(searchType)
		{
			// default search type
			if (!Juno.Common.Util.exists(searchType))
			{
				searchType = 'Name';
			}

			// reset the parameters
			controller.search = {
				type: searchType,
				term: '',
				status: "all",
				integrator: false,
				outofdomain: true
			};

			// update the placeholder
			controller.searchTermPlaceHolder = (controller.search.type === "DOB") ?
				"YYYY-MM-DD" : "Search Term";

			// do the search (if initialized)
			if (Juno.Common.Util.exists(controller.tableParams))
			{
				controller.tableParams.page(1);
				controller.tableParams.reload();
			}
		};

		controller.toggleParam = function toggleParam(param)
		{
			if (['integrator', 'outofdomain'].indexOf(param) > -1)
			{
				controller.search[param] = !controller.search[param];
			}
		};

		controller.loadRecord = function loadRecord(demographicNo)
		{
			$state.go('record.details',
			{
				demographicNo: demographicNo,
				hideNote: true
			});
		};

		controller.showIntegratorResults = function showIntegratorResults()
		{
			var results = [];
			var total = 0;

			if (Juno.Common.Util.exists(controller.integratorResults))
			{
				results = controller.integratorResults.content;
				total = controller.integratorResults.total;
			}

			$uibModal.open(
			{
				templateUrl: 'src/patientsearch/remotePatientResults.jsp',
				controller: 'RemotePatientResultsController',
				resolve:
				{
					results: function()
					{
						return results;
					},
					total: function()
					{
						return total;
					}
				}
			});
		};

		return controller;
	}
]);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! moment */ "./node_modules/moment/moment.js")))

/***/ }),

/***/ "./src/patient/search/remotePatientResultsController.js":
/*!**************************************************************!*\
  !*** ./src/patient/search/remotePatientResultsController.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*

 Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 This software is published under the GPL GNU General Public License.
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

 This software was written for the
 Department of Family Medicine
 McMaster University
 Hamilton
 Ontario, Canada

 */
angular.module('Patient.Search').controller('Patient.Search.RemotePatientResultsController', [

	'$http',
	'$scope',
	'$uibModalInstance',
	'results',
	'total',

	function(
		$http,
		$scope,
		$uibModalInstance,
		results,
		total)
	{
		$scope.results = results;
		$scope.total = total;

		$scope.currentPage = 1;
		$scope.pageSize = 5;
		$scope.startIndex = 0;


		$scope.close = function close()
		{
			$uibModalInstance.close("Someone Closed Me");
		};

		$scope.doImport = function doImport(d)
		{
			var myUrl = '../appointment/copyRemoteDemographic.jsp?remoteFacilityId=' + d.remoteFacilityId + '&demographic_no=' + d.demographicNo;
			window.open(myUrl, "ImportDemo", "width=700, height=1027");
		};

		$scope.save = function save()
		{
			$uibModalInstance.close("Someone Saved Me");
		};

		$scope.prevPage = function prevPage()
		{
			if ($scope.startIndex == 0)
			{
				return;
			}
			$scope.currentPage--;
			$scope.startIndex = ($scope.currentPage - 1) * $scope.pageSize;

		};

		$scope.nextPage = function nextPage()
		{
			if ($scope.startIndex + $scope.pageSize > $scope.total)
			{
				return;
			}
			$scope.currentPage++;
			$scope.startIndex = ($scope.currentPage - 1) * $scope.pageSize;
		};


	}
]);

/***/ }),

/***/ "./src/patientlist/module.js":
/*!***********************************!*\
  !*** ./src/patientlist/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('PatientList', ['Common', 'Common.Services']);

/***/ }),

/***/ "./src/patientlist/patientListAppointmentListController.js":
/*!*****************************************************************!*\
  !*** ./src/patientlist/patientListAppointmentListController.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('PatientList').controller('PatientList.PatientListAppointmentListController', [

	'$scope',
	'$http',
	'$q',
	'$filter',
	'$uibModal',
	'$state',
	'Navigation',
	'scheduleService',
	'providerService',
	'patientListState',

	function(
		$scope,
		$http,
		$q,
		$filter,
		$uibModal,
		$state,
		Navigation,
		scheduleService,
		providerService,
		patientListState)
	{

		var controller = this;

		controller.statusCodeMap = new Map();
		controller.statuses = null;

		controller.dateOptions = {
			showWeeks: false
		};


		//=========================================================================
		// Watches
		//=========================================================================/

		$scope.selectedDate = null;

		$scope.$watch('selectedDate', function(newValue, oldValue)
		{
			if(newValue !== oldValue)
			{
				scheduleService.selectedDate = newValue;
			}
		});


		//=========================================================================
		// Load Remote Data
		//=========================================================================/

		scheduleService.getStatuses().then(
			function success(results)
			{
				controller.statuses = results.content;
				controller.statusCodeMap = new Map(controller.statuses.map(i => [i.status, i]));
			},
			function error(errors)
			{
				console.log(errors);
			});


		//=========================================================================
		// Public Methods
		//=========================================================================/

		controller.getAppointmentStatusDescriptionByStatusCode = function (statusCode)
		{
			let status = controller.statusCodeMap.get(statusCode);
			let description = "";
			if(status)
			{
				description = status.description;
			}
			return description;
		};

		controller.getAppointmentStatusColourByStatusCode = function (statusCode)
		{
			let status = controller.statusCodeMap.get(statusCode);
			let colour = "#000000";
			if(status)
			{
				colour = status.color;
			}
			return colour;
		};

		controller.today = function today()
		{
			controller.appointmentDate = new Date();
		};

		controller.today();

		controller.clear = function clear()
		{
			controller.appointmentDate = null;
		};

		controller.open = function open($event)
		{
			$event.preventDefault();
			$event.stopPropagation();
			controller.opened = true;
		};

		Date.prototype.AddDays = function AddDays(noOfDays)
		{
			this.setTime(this.getTime() + (noOfDays * (1000 * 60 * 60 * 24)));
			return this;
		};

		controller.switchDay = function switchDay(n)
		{
			var dateNew = controller.appointmentDate;
			dateNew.AddDays(n);

			controller.appointmentDate = dateNew;

			var formattedDate = $filter('date')(dateNew, 'yyyy-MM-dd');

			controller.changeApptList(formattedDate);


		};

		controller.changeApptDate = function changeApptDate()
		{
			if (controller.appointmentDate == undefined)
			{
				controller.today();
			}
			var formattedDate = $filter('date')(controller.appointmentDate, 'yyyy-MM-dd');
			controller.changeApptList(formattedDate);
		};

		controller.changeApptList = function changeApptList(day)
		{
			controller.currenttab = patientListState.tabItems[0];
			controller.currenttab.serviceMethod = function ()
			{
				return scheduleService.getAppointments(day).then(
					function success(results)
					{
						return results.patients;
					}
				);
			};
			controller.showFilter = true;
			$scope.$emit('juno:patientListRefresh');
		};

		controller.addNewAppointment = function addNewAppointment()
		{
			var modalInstance = $uibModal.open(
			{
				templateUrl: 'src/schedule/appointmentAdd.jsp',
				controller: 'Schedule.AppointmentAddController as appointmentAddCtrl',
				backdrop: 'static',
				size: 'lg',
				resolve:
				{
					me: function()
					{
						return providerService.getMe();
					},
					apptDate: function()
					{
						return controller.appointmentDate;
					}
				}
			});

			modalInstance.result.then(
				function success(results)
				{
					controller.switchDay(0);
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.viewAppointment = function viewAppointment(apptNo)
		{
			var modalInstance = $uibModal.open(
			{
				templateUrl: 'src/schedule/appointmentView.jsp',
				controller: 'Schedule.AppointmentViewController as appointmentViewCtrl',
				backdrop: 'static',
				size: 'lg',
				resolve:
				{
					me: function()
					{
						return providerService.getMe();
					},
					appointment: function()
					{
						return scheduleService.getAppointment(apptNo);
					},
					statusList: function()
					{
						return scheduleService.getStatuses();
					}
				}
			});

			modalInstance.result.then(
				function success(results)
				{
					controller.switchDay(0);
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.isScheduleActive = function isScheduleActive()
		{
			return $state.current.name == 'schedule';
		};
	}
]);

/***/ }),

/***/ "./src/patientlist/patientListConfigController.js":
/*!********************************************************!*\
  !*** ./src/patientlist/patientListConfigController.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('PatientList').controller('PatientList.PatientListConfigController', [

	'$scope',
	'$uibModalInstance',
	'config',

	function(
		$scope,
		$uibModalInstance,
		config)
	{
		var controller = this;

		controller.patientListConfig = config;

		controller.cancel = function cancel()
		{
			$uibModalInstance.dismiss();
		};

		controller.saveConfiguration = function saveConfiguration()
		{
			$uibModalInstance.close(controller.patientListConfig);
		};
	}
]);

/***/ }),

/***/ "./src/patientlist/patientListController.js":
/*!**************************************************!*\
  !*** ./src/patientlist/patientListController.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*

    Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
    This software is published under the GPL GNU General Public License.
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    This software was written for the
    Department of Family Medicine
    McMaster University
    Hamilton
    Ontario, Canada

*/

angular.module('PatientList').controller('PatientList.PatientListController', [

	'$scope',
	'$http',
	'$state',
	'$uibModal',
	'angularUtil',
	'Navigation',
	'personaService',
	'providerService',
	'patientListState',
	'scheduleService',
	'reportingService',

	function(
		$scope,
		$http,
		$state,
		$uibModal,
		angularUtil,
		Navigation,
		personaService,
		providerService,
		patientListState,
		scheduleService,
		reportingService)
	{

		var controller = this;
		controller.sidebar = Navigation;
		controller.showFilter = true;
		controller.patientListConfig = {};


		controller.goToRecord = function goToRecord(patient)
		{
			if (patient.demographicNo != 0)
			{
				var params = {
					demographicNo: patient.demographicNo
				};
				if (angular.isDefined(patient.appointmentNo))
				{
					params.appointmentNo = patient.appointmentNo;
					params.encType = "face to face encounter with client";

					if (angularUtil.inMobileView())
					{
						controller.hidePatientList();
						console.log('hiding patientlist');
					}
				}
				console.log("params", params);
				$state.go('record.summary', params);
			}
		};

		//for filter box
		controller.query = '';


		controller.isActive = function isActive(temp)
		{
			if (controller.currenttab === null)
			{
				return false;
			}
			return temp === controller.currenttab.id;
		};

		controller.isMoreActive = function isMoreActive(temp)
		{
			if (controller.currentmoretab === null)
			{
				return false;
			}
			return temp === controller.currentmoretab.id;
		};

		controller.showPatientList = function showPatientList()
		{
			$scope.$emit('configureShowPatientList', true);
		};

		controller.hidePatientList = function hidePatientList()
		{
			$scope.$emit('configureShowPatientList', false);
		};

		controller.changeMoreTab = function changeMoreTab(moreTabItemsIndex, filter)
		{
			var beforeChangeTab = controller.currentmoretab;
			controller.currentmoretab = controller.moreTabItems[moreTabItemsIndex];

			controller.showFilter = true;
			controller.currenttab = null;
			controller.refresh(filter);
		};

		controller.changeTab = function changeTab(tabItemIndex, filter)
		{
			if(controller.currenttab !== patientListState.tabItems[tabItemIndex])
			{
				controller.currenttab = patientListState.tabItems[tabItemIndex];
				controller.showFilter = true;
				controller.currentmoretab = null;
				controller.refresh(filter);
			}
		};

		controller.getMoreTabClass = function getMoreTabClass(id)
		{
			if (controller.currentmoretab != null && id == controller.currentmoretab.id)
			{
				return "more-tab-highlight";
			}
			return "";
		};

		controller.currentPage = 0;
		controller.pageSize = 8;
		controller.patients = null;

		controller.numberOfPages = function numberOfPages()
		{
			if (controller.nPages == null || controller.nPages == 0)
			{
				return 1;
			}
			return controller.nPages;
		};


		$scope.$on('updatePatientListPagination', function(event, data)
		{
			console.log('updatePatientListPagination=' + data);
			controller.nPages = Math.ceil(data / controller.pageSize);
			console.log('nPages=' + controller.nPages);
		});


		controller.changePage = function changePage(pageNum)
		{
			controller.currentPage = pageNum;
			//broadcast the change page
			$scope.$broadcast('updatePatientList',
			{
				currentPage: controller.currentPage,
				pageSize: controller.pageSize
			});
		};

		$scope.$on('togglePatientListFilter', function(event, data)
		{
			console.log("received a togglePatientListFilter event:" + data);
			controller.showFilter = data;
		});


		controller.process = function process(tab, filter)
		{
			tab.serviceMethod().then(
				function success(resultList)
				{
					controller.patients = resultList;

					controller.nPages = 1;
					if (controller.patients != null && controller.patients.length > 0)
					{
						controller.nPages = Math.ceil(controller.patients.length / controller.pageSize);
					}

					controller.template = tab.template;
					Navigation.load(controller.template);
					controller.changePage(0);
				},
				function error(error)
				{
					alert('error loading data for patient list:' + error);
				}
			);
		};

		controller.refresh = function refresh(filter)
		{

			if (controller.currenttab != null)
			{
				controller.process(controller.currenttab, filter);
			}
			if (controller.currentmoretab != null)
			{
				controller.process(controller.currentmoretab, filter);
			}

		};

		$scope.$on('juno:patientListRefresh', function()
		{
			controller.refresh();
		});

		providerService.getRecentPatientList().then(
			function success(results)
			{
				controller.recentPatientList = results;
			},
			function error(errors)
			{
				console.log(errors);
			});
		personaService.getPatientListConfig().then(
			function success(results)
			{
				controller.patientListConfig = results;
				controller.pageSize = controller.patientListConfig.numberOfApptstoShow;
			},
			function error(errors)
			{
				console.log(errors);
			});


		controller.getTabItems = function getTabItems()
		{
			return patientListState.tabItems;
		};

		controller.manageConfiguration = function manageConfiguration()
		{
			var modalInstance = $uibModal.open(
			{
				templateUrl: 'src/patientlist/patientListConfiguration.jsp',
				controller: 'PatientList.PatientListConfigController as patientListConfigCtrl',
				backdrop: false,
				size: 'lg',
				resolve:
				{
					config: function()
					{
						return controller.patientListConfig;
					}
				}
			});

			modalInstance.result.then(
				function success(results)
				{
					personaService.setPatientListConfig(results).then(
						function success(results)
						{
							controller.patientListConfig = results;
							controller.pageSize = controller.patientListConfig.numberOfApptstoShow;
							$scope.$emit('updatePatientListPagination', controller.patients.length);
						},
						function error(errors)
						{
							console.log(errors);
						});
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		patientListState.tabItems = [
			{
				id: 0,
				label: "Appts.",
				template: "src/patientlist/patientList1.jsp",
				serviceMethod: function ()
				{
					// this gets overwritten by the appointmentListController, when it sets specific dates
					return scheduleService.getAppointments('today').then(
						function success(results)
						{
							return results.patients;
						}
					);
				}
			},
			{
				id: 1,
				label: "Recent",
				template: "src/patientlist/recent.jsp",
				serviceMethod: function ()
				{
					return providerService.getRecentPatientList().then(
						function success(results)
						{
							controller.recentPatientList = results;
							return results;
						}
					);
				}
			}
		];
		controller.moreTabItems = [
			{
				id: 0,
				label: "Patient Sets",
				template: "src/patientlist/demographicSets.jsp",
				serviceMethod: function ()
				{
					return reportingService.getDemographicSetList().then(
						function success(results)
						{
							return results.content;
						}
					);
				}
			},
			{
				id: 1,
				label: "Caseload",
				template: "src/patientlist/program.jsp",
				serviceMethod: function ()
				{
					return Promise.resolve([]);
				}
			}
		];
		controller.changeTab(0);
	}
]);


/***/ }),

/***/ "./src/patientlist/patientListDemographicSetController.js":
/*!****************************************************************!*\
  !*** ./src/patientlist/patientListDemographicSetController.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('PatientList').controller('PatientList.PatientListDemographicSetController', [
	'$scope',
	'$http',
	'reportingService',

	function(
		$scope,
		$http,
		reportingService)
	{

		var controller = this;

		reportingService.getDemographicSetList().then(
			function success(results)
			{
				controller.sets = results.content;
			},
			function error(error)
			{
				alert('Failed to get sets lists.');
			});
	}
]);

/***/ }),

/***/ "./src/patientlist/patientListProgramController.js":
/*!*********************************************************!*\
  !*** ./src/patientlist/patientListProgramController.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('PatientList').controller('PatientList.PatientListProgramController', [

	'$scope',
	'$http',

	function(
		$scope,
		$http)
	{

		var controller = this;


		$scope.$on('updatePatientList', function(event, data)
		{
			console.log('updatePatientList=' + JSON.stringify(data));
			controller.updateData(data.currentPage, data.pageSize);
		});


		//the currentPage is 0 based
		controller.updateData = function updateData(currentPage, pageSize)
		{
			var startIndex = currentPage * pageSize;

			$http(
			{
				url: '../ws/rs/program/patientList?startIndex=' + startIndex + '&numToReturn=' + pageSize,
				method: "GET",
				headers:
				{
					'Content-Type': 'application/json'
				}
			}).then(
				function success(results)
				{
					controller.admissions = results.data.content;
					$scope.$emit('updatePatientListPagination', results.data.total);
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		//initialize..
		controller.updateData(0, controller.pageSize);
		$scope.$emit('togglePatientListFilter', false);

	}
]);

/***/ }),

/***/ "./src/patientlist/patientListState.js":
/*!*********************************************!*\
  !*** ./src/patientlist/patientListState.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module("PatientList").service("patientListState", [
	// Store variables here that must be accessible across controllers in patientlist
	function()
	{
		var service = this;

		service.tabItems = [];

	}
]);

/***/ }),

/***/ "./src/record/details/detailsController.js":
/*!*************************************************!*\
  !*** ./src/record/details/detailsController.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*

    Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
    This software is published under the GPL GNU General Public License.
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    This software was written for the
    Department of Family Medicine
    McMaster University
    Hamilton
    Ontario, Canada

*/
angular.module('Record.Details').controller('Record.Details.DetailsController', [

	'$scope',
	'$http',
	'$location',
	'$stateParams',
	'$state',
	'$window',
	'demographicService',
	'demographicsService',
	'providersService',
	'patientDetailStatusService',
	'securityService',
	'staticDataService',
	'referralDoctorsService',
	'user',

	function(
		$scope,
		$http,
		$location,
		$stateParams,
		$state,
		$window,
		demographicService,
		demographicsService,
		providersService,
		patientDetailStatusService,
		securityService,
		staticDataService,
		referralDoctorsService,
		user)
	{

		var controller = this;
		controller.page = {};

		// Global variables
		var posExtras = {};
		var hcParts = {};
		var phoneNum = {};
		var colorAttn = "#ffff99";
		var defPhTitle = "Check to set preferred contact number";
		var prefPhTitle = "Preferred contact number";
		var hin0;
		var ver0;
		var chartNo0;
		var cytolNum0;
		var referralDocNo0;
		var familyDocNo0;
		var sin0;
		var effDate0;
		var hcRenewDate0;
		var rosterDate0;
		var rosterTerminationDate0;
		var patientStatusDate0;
		var dateJoined0;
		var endDate0;
		var onWaitingListSinceDate0;
		var paperChartArchivedDate0;

		controller.properties = $scope.$parent.recordCtrl.properties;

		controller.init = function init()
		{
			demographicService.getDemographic($stateParams.demographicNo).then(
				function success(results)
				{
					controller.page.demo = results;
					controller.initDemographicVars();
					controller.checkAccess();

					// retrieve provider types for dropdown selection
					//TODO - are roles determined by security role or provider type?
					providersService.getBySecurityRole("doctor").then(
						function success(data) {
							controller.page.doctors = data;
						}
					);
					providersService.getBySecurityRole("nurse").then(
						function success(data) {
							controller.page.nurses = data;
						}
					);
					providersService.getBySecurityRole("midwife").then(
						function success(data) {
							controller.page.midwives = data;
						}
					);

					// retrieve contact lists for demographic
					demographicService.getDemographicContacts(controller.page.demo.demographicNo, "personal").then(
						function success(data) {
							controller.page.demoContacts = demoContactShow(data);
						}
					);
					demographicService.getDemographicContacts(controller.page.demo.demographicNo, "professional").then(
						function success(data) {
							controller.page.demoContactPros = demoContactShow(data);
						}
					);

					//show notes
					if (controller.page.demo.notes != null)
					{
						controller.page.demo.scrNotes = controller.page.demo.notes;
						if (/^<unotes>[\s\S]*/.test(controller.page.demo.scrNotes)) controller.page.demo.scrNotes = controller.page.demo.scrNotes.substring("<unotes>".length);
						if (/[\s\S]*<\/unotes>$/.test(controller.page.demo.scrNotes)) controller.page.demo.scrNotes = controller.page.demo.scrNotes.substring(0, controller.page.demo.scrNotes.lastIndexOf("</unotes>"));
					}

					//show referral doctor
					if (controller.page.demo.familyDoctor != null)
					{
						var referralDoc = controller.formatDocOutput(controller.page.demo.familyDoctor);
						controller.page.demo.scrReferralDocNo = referralDoc.number;
						controller.page.demo.scrReferralDoc = referralDoc.name;
					}

					//show family doctor
					if (controller.page.demo.familyDoctor2 != null)
					{
						var familyDoc = controller.formatDocOutput(controller.page.demo.familyDoctor2);
						controller.page.demo.scrFamilyDocNo = familyDoc.number;
						controller.page.demo.scrFamilyDoc = familyDoc.name;
					}

					if (controller.page.demo.extras != null)
					{
						controller.page.demo.extras = toArray(controller.page.demo.extras);
						for (var i = 0; i < controller.page.demo.extras.length; i++)
						{
							if (controller.page.demo.extras[i].key == "demo_cell") controller.page.demo.scrDemoCell = controller.page.demo.extras[i].value;
							else if (controller.page.demo.extras[i].key == "aboriginal") controller.page.demo.scrAboriginal = controller.page.demo.extras[i].value;
							else if (controller.page.demo.extras[i].key == "hPhoneExt") controller.page.demo.scrHPhoneExt = controller.page.demo.extras[i].value;
							else if (controller.page.demo.extras[i].key == "wPhoneExt") controller.page.demo.scrWPhoneExt = controller.page.demo.extras[i].value;
							else if (controller.page.demo.extras[i].key == "cytolNum") controller.page.demo.scrCytolNum = controller.page.demo.extras[i].value;
							else if (controller.page.demo.extras[i].key == "phoneComment") controller.page.demo.scrPhoneComment = controller.page.demo.extras[i].value;
							else if (controller.page.demo.extras[i].key == "paper_chart_archived") controller.page.demo.scrPaperChartArchived = controller.page.demo.extras[i].value;
							else if (controller.page.demo.extras[i].key == "paper_chart_archived_date") controller.page.demo.scrPaperChartArchivedDate = controller.page.demo.extras[i].value;
							else if (controller.page.demo.extras[i].key == "usSigned") controller.page.demo.scrUsSigned = controller.page.demo.extras[i].value;
							else if (controller.page.demo.extras[i].key == "privacyConsent") controller.page.demo.scrPrivacyConsent = controller.page.demo.extras[i].value;
							else if (controller.page.demo.extras[i].key == "informedConsent") controller.page.demo.scrInformedConsent = controller.page.demo.extras[i].value;
							else if (controller.page.demo.extras[i].key == "securityQuestion1") controller.page.demo.scrSecurityQuestion1 = controller.page.demo.extras[i].value;
							else if (controller.page.demo.extras[i].key == "securityAnswer1") controller.page.demo.scrSecurityAnswer1 = controller.page.demo.extras[i].value;
							else if (controller.page.demo.extras[i].key == "rxInteractionWarningLevel") controller.page.demo.scrRxInteractionLevel = controller.page.demo.extras[i].value;


							//record array position of extras by keys - to be used on saving
							posExtras[controller.page.demo.extras[i].key] = i;
						}
					}

					//show phone numbers with preferred check
					controller.page.demo.scrCellPhone = getPhoneNum(controller.page.demo.scrDemoCell);
					controller.page.demo.scrHomePhone = getPhoneNum(controller.page.demo.phone);
					controller.page.demo.scrWorkPhone = getPhoneNum(controller.page.demo.alternativePhone);

					//show waitingListNames
					if (controller.page.demo.waitingListNames != null)
					{
						if (controller.page.demo.waitingListNames.id != null)
						{ //only 1 entry, convert to array
							var tmp = {};
							tmp.id = controller.page.demo.waitingListNames.id;
							tmp.name = controller.page.demo.waitingListNames.name;
							tmp.groupNo = controller.page.demo.waitingListNames.groupNo;
							tmp.providerNo = controller.page.demo.waitingListNames.providerNo;
							tmp.createDate = controller.page.demo.waitingListNames.createDate;
							tmp.isHistory = controller.page.demo.waitingListNames.isHistory;
							controller.page.demo.waitingListNames = [tmp];
						}
					}


					controller.page.cellPhonePreferredMsg = defPhTitle;
					controller.page.homePhonePreferredMsg = defPhTitle;
					controller.page.workPhonePreferredMsg = defPhTitle;
					if (isPreferredPhone(controller.page.demo.scrDemoCell))
					{
						controller.page.demo.scrPreferredPhone = "C";
						controller.page.preferredPhoneNumber = controller.page.demo.scrCellPhone;
						controller.page.cellPhonePreferredMsg = prefPhTitle;
						controller.page.cellPhonePreferredColor = colorAttn;
					}
					else if (isPreferredPhone(controller.page.demo.phone))
					{
						controller.page.demo.scrPreferredPhone = "H";
						controller.page.preferredPhoneNumber = controller.page.demo.scrHomePhone;
						controller.page.homePhonePreferredMsg = prefPhTitle;
						controller.page.homePhonePreferredColor = colorAttn;
					}
					else if (isPreferredPhone(controller.page.demo.alternativePhone))
					{
						controller.page.demo.scrPreferredPhone = "W";
						controller.page.preferredPhoneNumber = controller.page.demo.scrWorkPhone;
						controller.page.workPhonePreferredMsg = prefPhTitle;
						controller.page.workPhonePreferredColor = colorAttn;
					}
					else
					{
						controller.page.preferredPhoneNumber = controller.page.demo.scrHomePhone;
					}

					controller.page.dataChanged = false;

					//get static lists to be selected
					controller.page.genders = staticDataService.getGenders();
					controller.page.titles = staticDataService.getTitles();
					controller.page.provinces = staticDataService.getProvinces();
					controller.page.countries = staticDataService.getCountries();
					controller.page.engFre = staticDataService.getEngFre();
					controller.page.spokenlangs = staticDataService.getSpokenLanguages();
					controller.page.rosterTermReasons = staticDataService.getRosterTerminationReasons();
					controller.page.securityQuestions = staticDataService.getSecurityQuestions();
					controller.page.rxInteractionLevels = staticDataService.getRxInteractionLevels();

					//get patient detail status
					patientDetailStatusService.getStatus($stateParams.demographicNo).then(
						function success(results)
						{
							controller.page.macPHRLoggedIn = results.macPHRLoggedIn;
							controller.page.macPHRIdsSet = results.macPHRIdsSet;
							controller.page.macPHRVerificationLevel = results.macPHRVerificationLevel;

							controller.page.integratorEnabled = results.integratorEnabled;
							controller.page.integratorOffline = results.integratorOffline;
							controller.page.integratorAllSynced = results.integratorAllSynced;

							controller.page.conformanceFeaturesEnabled = results.conformanceFeaturesEnabled;
							controller.page.workflowEnhance = results.workflowEnhance;
							controller.page.billregion = results.billregion;
							controller.page.defaultView = results.defaultView;
							controller.page.hospitalView = results.hospitalView;

							if (controller.page.integratorEnabled)
							{
								if (controller.page.integratorOffline)
								{
									controller.page.integratorStatusColor = "#ff5500";
									controller.page.integratorStatusMsg = "NOTE: Integrator is not available at this time";
								}
								else if (!controller.page.integratorAllSynced)
								{
									controller.page.integratorStatusColor = "#ff5500";
									controller.page.integratorStatusMsg = "NOTE: Integrated Community is not synced";
								}
							}

							controller.page.billingHistoryLabel = "Invoice List";
							if (controller.page.billregion == "ON") controller.page.billingHistoryLabel = "Billing History";
						},
						function error(errors)
						{
							console.log(errors);
						});

					//show patientStatusList & rosterStatusList values
					demographicsService.getStatusList("roster").then(
						function success(data)
						{
							controller.page.rosterStatusList = toArray(data);
							controller.page.rosterStatusList.unshift(
								{
									"value": "FS",
									"label": "FS - fee for service"
								});
							controller.page.rosterStatusList.unshift(
								{
									"value": "TE",
									"label": "TE - terminated"
								});
							controller.page.rosterStatusList.unshift(
								{
									"value": "NR",
									"label": "NR - not rostered"
								});
							controller.page.rosterStatusList.unshift(
								{
									"value": "RO",
									"label": "RO - rostered"
								});
						}
					);
					demographicsService.getStatusList("patient").then(
						function success(data)
						{
							controller.page.patientStatusList = toArray(data);
							controller.page.patientStatusList.unshift(
								{
									"value": "FI",
									"label": "FI - Fired"
								});
							controller.page.patientStatusList.unshift(
								{
									"value": "MO",
									"label": "MO - Moved"
								});
							controller.page.patientStatusList.unshift(
								{
									"value": "DE",
									"label": "DE - Deceased"
								});
							controller.page.patientStatusList.unshift(
								{
									"value": "IN",
									"label": "IN - Inactive"
								});
							controller.page.patientStatusList.unshift(
								{
									"value": "AC",
									"label": "AC - Active"
								});
						}
					);

					controller.formatDate("DobM"); //done on page load
					controller.formatDate("DobD"); //done on page load
					controller.page.demo.age = Juno.Common.Util.calcAge(controller.page.demo.dobYear, controller.page.demo.dobMonth, controller.page.demo.dobDay);
					controller.formatLastName(); //done on page load
					controller.formatFirstName(); //done on page load
					controller.setSwipeReady(); //done on page load
					controller.validateHCSave();
				},
				function error(errors)
				{
					alert('Error loading demographic: ', errors) // TODO: Display actual error message
				}
			);

			// controller.page.demo = demo;
		};

		controller.initDemographicVars = function initDemographicVars()
		{
			phoneNum["C"] = controller.page.demo.scrCellPhone;
			phoneNum["H"] = controller.page.demo.scrHomePhone;
			phoneNum["W"] = controller.page.demo.scrWorkPhone;
			phoneNum["HX"] = controller.page.demo.scrHPhoneExt;
			phoneNum["WX"] = controller.page.demo.scrWPhoneExt;
			hin0 = controller.page.demo.hin;
			ver0 = controller.page.demo.ver;
			chartNo0 = controller.page.demo.chartNo;
			cytolNum0 = controller.page.demo.scrCytolNum;
			referralDocNo0 = controller.page.demo.scrReferralDocNo;
			sin0 = controller.page.demo.sin;
			effDate0 = controller.page.demo.effDate;
			hcRenewDate0 = controller.page.demo.hcRenewDate;
			rosterDate0 = controller.page.demo.rosterDate;
			rosterTerminationDate0 = controller.page.demo.rosterTerminationDate;
			patientStatusDate0 = controller.page.demo.patientStatusDate;
			dateJoined0 = controller.page.demo.dateJoined;
			endDate0 = controller.page.demo.endDate;
			onWaitingListSinceDate0 = controller.page.demo.onWaitingListSinceDate;
			paperChartArchivedDate0 = controller.page.demo.scrPaperChartArchivedDate;
		};

		controller.checkAccess = function checkAccess()
		{
			//get access rights
			securityService.hasRight("_demographic", "r", controller.page.demo.demographicNo).then(
				function success(results)
				{
					controller.page.canRead = results;
				},
				function error(errors)
				{
					console.log(errors);
				});
			securityService.hasRight("_demographic", "u", controller.page.demo.demographicNo).then(
				function success(results)
				{
					controller.page.cannotChange = !results;
				},
				function error(errors)
				{
					console.log(errors);
				});

		};

		// Is there a shared location where this could be accessed from any controller? i.e. a utils file
		controller.isNaN = function(num)
		{
			return isNaN(num);
		};

		//disable click and keypress if user only has read-access
		controller.checkAction = function checkAction(event)
		{
			if (controller.page.cannotChange)
			{
				event.preventDefault();
				event.stopPropagation();
				controller.setSwipeReady();
			}
		};

		//----------------------//
		// on-screen operations //
		//----------------------//
		//monitor data changed
		$scope.$watch(function()
		{
			return controller.page.demo;
		}, function(newValue, oldValue)
		{
			if (newValue !== oldValue && angular.isDefined(oldValue) && angular.isDefined(newValue))
			{
				controller.page.dataChanged = true;
			}

		}, true);

		$window.onbeforeunload = function ()
		{
			/* Have to check if we are on the details page since the controller is
				not necessarily destroyed upon leaving the page
			*/
			if (controller.page.dataChanged === true && $state.current.name === 'record.details')
			{
				return 'You have unsaved patient data. Are you sure you want to leave?';
			}
		};

		$scope.$on('$destroy', function() {
			delete $window.onbeforeunload;
		});

		// Warn user about unsaved data before a state change
		$scope.$on("$stateChangeStart", function(event)
		{
			if (controller.page.dataChanged === true)
			{
				var discard = confirm("You have unsaved patient data. Are you sure you want to leave?");
				if (!discard)
				{
					event.preventDefault();
				} else {
					demographicService.getDemographic($stateParams.demographicNo).then(
						function success(results)
						{
							// TODO: Celebrate
						},
						function error(errors)
						{
							alert('Error loading demographic: ', errors) // TODO: Display actual error message
						}
					);
				
				}
			}
		});

		//format lastname, firstname
		controller.formatLastName = function formatLastName()
		{
			controller.page.demo.lastName = controller.page.demo.lastName.toUpperCase();
		};
		controller.formatFirstName = function formatFirstName()
		{
			controller.page.demo.firstName = controller.page.demo.firstName.toUpperCase();
		};


		// //calculate age
		// var now = new Date();
		// controller.calculateAge = function calculateAge()
		// {
		// 	controller.page.demo.age = now.getFullYear() - controller.page.demo.dobYear;
		// 	if (now.getMonth() < controller.page.demo.dobMonth - 1) controller.page.demo.age--;
		// 	else if (now.getMonth() == controller.page.demo.dobMonth - 1 && now.getDate() < controller.page.demo.dobDay) controller.page.demo.age--;
		// };
		//
		// controller.calculateAge(); //done on page load

		//set ready for swipe card
		controller.setSwipeReady = function setSwipeReady(status)
		{
			if (status == "off")
			{
				controller.page.readyForSwipe = "";
				controller.page.swipecardMsg = "Click for Card Swipe";
			}
			else if (status == "done")
			{
				controller.page.readyForSwipe = "btn-primary";
			}
			else
			{
				controller.page.readyForSwipe = "btn-success";
				controller.page.swipecardMsg = "Ready for Card Swipe";
				controller.page.swipecard = "";
			}
		};

		//Health card verification
		controller.healthCardHandler = function healthCardHandler(keycode)
		{
			if (keycode == 13)
			{ //carriage-return
				var swipeCardData = controller.page.swipecard;
				controller.page.swipecard = "";

				if (swipeCardData.substring(0, 3) == "%E?")
				{ //swipe card error
					alert("Error reading card");
				}
				else
				{
					if (swipeCardData.substring(2, 8) == "610054")
					{ //Ontario
						hcParts["issuer"] = "ON";
						hcParts["hin"] = swipeCardData.substring(8, 18);

						var namePos = swipeCardData.indexOf("^") + 1;
						var endNamePos = swipeCardData.indexOf("^", namePos);
						hcParts["fullName"] = swipeCardData.substring(namePos, endNamePos);
						hcParts["lastName"] = hcParts["fullName"].split("/")[0];
						hcParts["firstName"] = hcParts["fullName"].split("/")[1].trim();

						hcParts["sex"] = swipeCardData.substring(endNamePos + 8, endNamePos + 9);
						hcParts["dob"] = swipeCardData.substring(endNamePos + 9, endNamePos + 17);
						hcParts["hinExp"] = swipeCardData.substring(endNamePos + 1, endNamePos + 5) + hcParts["dob"].substring(6, 8);
						hcParts["hinVer"] = swipeCardData.substring(endNamePos + 17, endNamePos + 19);
						hcParts["firstNameShort"] = swipeCardData.substring(endNamePos + 19, endNamePos + 24);
						hcParts["issueDate"] = swipeCardData.substring(endNamePos + 24, endNamePos + 30);
						hcParts["lang"] = swipeCardData.substring(endNamePos + 30, endNamePos + 32);

						if (!isNumber(hcParts["dob"]))
						{
							hcParts["dob"] = null;
							hcParts["hinExp"] = null;
						}
						if (!isNumber(hcParts["hinExp"]))
						{
							hcParts["hinExp"] = null;
						}
						if (!isNumber(hcParts["issueDate"]))
						{
							hcParts["issueDate"] = null;
						}

						controller.setSwipeReady("done");
						controller.healthCardUpdateDemographics();
					}
					else
					{
						alert("Not Ontario Health Card");
					}
					controller.validateHC(); //Run HCValidation
				}
			}
		};

		controller.healthCardUpdateDemographics = function healthCardUpdateDemographics()
		{
			var now = new Date();
			if (controller.page.demo.hcType != hcParts["issuer"])
			{
				controller.page.demo.hcType = hcParts["issuer"];
				controller.page.hcTypeColor = colorAttn;
			}
			if (controller.page.demo.lastName != hcParts["lastName"])
			{
				controller.page.demo.lastName = hcParts["lastName"];
				controller.page.lastNameColor = colorAttn;
			}
			if (controller.page.demo.firstName != hcParts["firstName"])
			{
				controller.page.demo.firstName = hcParts["firstName"];
				controller.page.firstNameColor = colorAttn;
			}
			if (isNumber(hcParts["hin"]) && controller.page.demo.hin != hcParts["hin"])
			{
				controller.page.demo.hin = hcParts["hin"];
				controller.page.hinColor = colorAttn;
			}
			if (controller.page.demo.ver != hcParts["hinVer"])
			{
				controller.page.demo.ver = hcParts["hinVer"];
				controller.page.verColor = colorAttn;
			}
			var hcSex = hcParts["sex"] == 1 ? "M" : (hcParts["sex"] == 2 ? "F" : null);
			if (hcSex != null && controller.page.demo.sex != hcSex)
			{
				controller.page.demo.sex = hcSex;
				controller.page.sexColor = colorAttn;
			}
			var dateParts = {};
			if (hcParts["dob"] != null)
			{
				dateParts["year"] = hcParts["dob"].substring(0, 4);
				dateParts["month"] = hcParts["dob"].substring(4, 6);
				dateParts["day"] = hcParts["dob"].substring(6);
				if (controller.page.demo.dobYear != dateParts["year"])
				{
					controller.page.demo.dobYear = dateParts["year"];
					controller.page.dobYearColor = colorAttn;
				}
				if (controller.page.demo.dobMonth != dateParts["month"])
				{
					controller.page.demo.dobMonth = dateParts["month"];
					controller.page.dobMonthColor = colorAttn;
				}
				if (controller.page.demo.dobDay != dateParts["day"])
				{
					controller.page.demo.dobDay = dateParts["day"];
					controller.page.dobDayColor = colorAttn;
				}
			}
			if (hcParts["issueDate"] != null)
			{
				var swipeDate = "20" + hcParts["issueDate"].substring(0, 2) + "-" + hcParts["issueDate"].substring(2, 4) + "-" + hcParts["issueDate"].substring(4);
				if (controller.page.demo.effDate != swipeDate)
				{
					controller.page.demo.effDate = swipeDate;
					controller.page.effDateColor = colorAttn;
				}
			}
			if (hcParts["hinExp"] != null)
			{
				var swipeDate = "20" + hcParts["hinExp"].substring(0, 2) + "-" + hcParts["hinExp"].substring(2, 4) + "-" + hcParts["hinExp"].substring(4);
				if (controller.page.demo.hcRenewDate != swipeDate)
				{
					controller.page.demo.hcRenewDate = swipeDate;
					controller.page.hcRenewDateColor = colorAttn;
				}
				var hinExpDate = buildDate("20" + hcParts["hinExp"].substring(0, 2), hcParts["hinExp"].substring(2, 4), hcParts["hinExp"].substring(4));
				if (hinExpDate != null && now > hinExpDate)
				{
					alert("This health card has expired!");
					controller.page.hcRenewDateColor = colorAttn;
				}
			}
		}

		//HCValidation
		controller.validateHC = function validateHC()
		{
			if (controller.page.demo.hcType != "ON" || controller.page.demo.hin == null || controller.page.demo.hin == "") return;
			if (controller.page.demo.ver == null) controller.page.demo.ver = "";
			patientDetailStatusService.validateHC(controller.page.demo.hin, controller.page.demo.ver).then(
				function success(results)
				{
					if (results.valid == null)
					{
						controller.page.HCValidation = "n/a";
						controller.page.swipecardMsg = "Done Health Card Action";
					}
					else
					{
						controller.page.HCValidation = results.valid ? "valid" : "invalid";
						controller.page.swipecardMsg = results.responseDescription + " (" + results.responseCode + ")";
					}
				},
				function error(errors)
				{
					console.log(errors);
				});
		}

		//manage hin/hinVer entries
		controller.checkHin = function checkHin()
		{
			if (controller.page.demo.hcType == "ON" && controller.page.demo.hin != null && controller.page.demo.hin != "")
			{
				if (controller.page.demo.hin.length > 10) controller.page.demo.hin = hin0;
				if (!isNumber(controller.page.demo.hin)) controller.page.demo.hin = hin0;
			}
			hin0 = controller.page.demo.hin;
			controller.page.HCValidation = null;
		}
		controller.checkHinVer = function checkHinVer()
		{
			if (controller.page.demo.hcType == "ON")
			{
				if (controller.page.demo.ver.length > 2) controller.page.demo.ver = ver0;
				if (!(/^[a-zA-Z()]*$/.test(controller.page.demo.ver))) controller.page.demo.ver = ver0;
				controller.page.demo.ver = controller.page.demo.ver.toUpperCase();
			}
			ver0 = controller.page.demo.ver;
		}

		//manage date entries
		controller.checkDate = function checkDate(id)
		{
			if (id == "DobY")
			{
				controller.page.demo.dobYear = checkYear(controller.page.demo.dobYear);
			}
			else if (id == "DobM")
			{
				controller.page.demo.dobMonth = checkMonth(controller.page.demo.dobMonth);
			}
			else if (id == "DobD")
			{
				controller.page.demo.dobDay = checkDay(controller.page.demo.dobDay, controller.page.demo.dobMonth, controller.page.demo.dobYear);
			}
			console.log('MONTH: ', controller.page.demo.dobMonth);
			controller.page.demo.age = Juno.Common.Util.calcAge(controller.page.demo.dobYear, controller.page.demo.dobMonth, controller.page.demo.dobDay);
		};

		controller.formatDate = function formatDate(id)
		{
			// controller.calculateAge();

			if (id == "DobM" && controller.page.demo.dobMonth != null && String(controller.page.demo.dobMonth).length == 1)
			{
				controller.page.demo.dobMonth = "0" + controller.page.demo.dobMonth;
			}
			else if (id == "DobD" && controller.page.demo.dobDay != null && String(controller.page.demo.dobDay).length == 1)
			{
				controller.page.demo.dobDay = "0" + controller.page.demo.dobDay;
			}
		};

		//check Patient Status if endDate is entered
		controller.checkPatientStatus = function checkPatientStatus()
		{
			var now = new Date();
			if (controller.page.demo.patientStatus == "AC")
			{
				if (controller.page.demo.endDate != null && controller.page.demo.endDate != "")
				{
					if (dateValid(controller.page.demo.endDate))
					{
						var datePart = controller.page.demo.endDate.split("-");
						var endDate = new Date(datePart[0], datePart[1] - 1, datePart[2]);
						if (now > endDate)
						{
							alert("Patient Status cannot be Active after End Date.");
							return false;
						}
					}
				}
			}
			return true;
		}

		controller.isPostalComplete = function isPostalComplete()
		{
			var province = controller.page.demo.address.province;
			var postal = controller.page.demo.address.postal;
			// If Canadian province is selected, proceed with validation
			if (postal !== null && province !== null && province !== "OT" && province.indexOf("US") !== 0)
			{
				if (controller.isPostalValid())
				{
					return true;
				}

				controller.resetEditState();
				return false;
			}

			return true;
		};

		controller.isPostalValid = function isPostalValid()
		{
			var postal = controller.page.demo.address.postal.replace(/\s/g, ""); // Trim whitespace

			// If postal code is an empty string, set it to null and continue
			if(postal.length === 0)
			{
				controller.page.demo.address.postal = null;
				return true;
			}

			var regex = new RegExp(/^[A-Za-z]\d[A-Za-z]\d[A-Za-z]\d$/); // Match to Canadian postal code standard (minus the space)
			if (regex.test(postal))
			{
				// Format postal code to Canadian standard
				controller.page.demo.address.postal = postal.substring(0, 3) + " " + postal.substring(3);
				return true;
			}else {
				alert("Invalid/Incomplete Postal Code"); // TODO: Display proper error message
				return false;
			}
		};

		//check email
		controller.checkEmail = function checkEmail()
		{
			if (controller.page.demo.email == null || controller.page.demo.email == "") return true;

			var regex = /^[^@]+@[^@]+$/;
			if (regex.test(controller.page.demo.email))
			{
				var email = controller.page.demo.email.split("@");

				regex = /^[!#%&'=`~\{}\-\$\*\+\/\?\^\|\w]+(\.[!#%&'=`~\{}\-\$\*\+\/\?\^\|\w]+)*$/;
				if (regex.test(email[0]))
				{ //test email local address part

					regex = /^[^\W_]+(([^\W_]|-)+[^\W_]+)*(\.[^\W_]+(([^\W_]|-)+[^\W_]+)*)*\.[^\W_]{2,3}$/;
					if (regex.test(email[1])) return true; //test email address domain part
				}
			}
			alert("Invalid email address");
			return false;
		}

		//check Chart No (length)
		controller.checkChartNo = function checkChartNo()
		{
			if (controller.page.demo.chartNo == null || controller.page.demo.chartNo == "")
			{
				chartNo0 = controller.page.demo.chartNo;
				return;
			}
			if (controller.page.demo.chartNo.length > 10) controller.page.demo.chartNo = chartNo0;
			else chartNo0 = controller.page.demo.chartNo;
		}

		//check Cytology Number
		controller.checkCytoNum = function checkCytoNum()
		{
			if (controller.page.demo.scrCytolNum == null || controller.page.demo.scrCytolNum == "")
			{
				cytolNum0 = controller.page.demo.scrCytolNum;
				return;
			}
			if (!isNumber(controller.page.demo.scrCytolNum)) controller.page.demo.scrCytolNum = cytolNum0;
			else cytolNum0 = controller.page.demo.scrCytolNum;
		};

		//check Referral Doctor No
		controller.checkReferralDocNo = function checkReferralDocNo()
		{
			var isValid = controller.validateDocNo(controller.page.demo.scrReferralDocNo, true);
			if (isValid)
				referralDocNo0 = controller.page.demo.scrReferralDocNo;
			else
				controller.page.demo.scrReferralDocNo = referralDocNo0;
		};

		//check Family Doctor No
		controller.checkFamilyDocNo = function checkFamilyDocNo()
		{
			var isValid = controller.validateDocNo(controller.page.demo.scrFamilyDocNo, true);
			if (isValid)
				familyDocNo0 = controller.page.demo.scrFamilyDocNo;
			else
				controller.page.demo.scrFamilyDocNo = familyDocNo0;
		};

		controller.validateDocNo = function validateDocNo(docNo, quiet)
		{
			if (docNo == null || docNo === "" || (isNumber(docNo) && docNo.length < 10))
				return true;

			if (!quiet)
				alert("Invalid Doctor Number");

			return false;
		};

		//check SIN
		controller.checkSin = function checkSin()
		{
			if (controller.page.demo.sin == null || controller.page.demo.sin == "")
			{
				sin0 = controller.page.demo.sin;
				return;
			}

			var sin = controller.page.demo.sin.replace(/\s/g, "");
			if (!isNumber(sin) || sin.length > 9)
			{
				controller.page.demo.sin = sin0;
			}
			else
			{
				if (sin.length > 6)
				{
					controller.page.demo.sin = sin.substring(0, 3) + " " + sin.substring(3, 6) + " " + sin.substring(6);
				}
				else if (sin.length > 3)
				{
					controller.page.demo.sin = sin.substring(0, 3) + " " + sin.substring(3);
				}
				sin0 = controller.page.demo.sin;
			}
		}

		controller.validateSin = function validateSin()
		{
			if (controller.page.demo.sin == null || controller.page.demo.sin == "") return true;

			var sin = controller.page.demo.sin.replace(/\s/g, "");
			if (isNumber(sin) && sin.length == 9)
			{
				var sinNumber = 0;
				for (var i = 0; i < sin.length; i++)
				{
					var n = Number(sin.charAt(i)) * (i % 2 + 1);
					sinNumber += n % 10 + Math.floor(n / 10);
				}
				if (sinNumber % 10 == 0) return true;
			}
			alert("Invalid SIN #");
			return false;
		}

		//prevent manual input dates
		controller.preventManualEffDate = function preventManualEffDate()
		{
			if (controller.page.demo.effDate == null) controller.page.demo.effDate = effDate0;
			else effDate0 = controller.page.demo.effDate;
		}
		controller.preventManualHcRenewDate = function preventManualHcRenewDate()
		{
			if (controller.page.demo.hcRenewDate == null) controller.page.demo.hcRenewDate = hcRenewDate0;
			else hcRenewDate0 = controller.page.demo.hcRenewDate;
		}
		controller.preventManualRosterDate = function preventManualRosterDate()
		{
			if (controller.page.demo.rosterDate == null) controller.page.demo.rosterDate = rosterDate0;
			else rosterDate0 = controller.page.demo.rosterDate;
		}
		controller.preventManualRosterTerminationDate = function preventManualRosterTerminationDate()
		{
			if (controller.page.demo.rosterTerminationDate == null) controller.page.demo.rosterTerminationDate = rosterTerminationDate0;
			else rosterTerminationDate0 = controller.page.demo.rosterTerminationDate;
		}
		controller.preventManualPatientStatusDate = function preventManualPatientStatusDate()
		{
			if (controller.page.demo.patientStatusDate == null) controller.page.demo.patientStatusDate = patientStatusDate0;
			else patientStatusDate0 = controller.page.demo.patientStatusDate;
		}
		controller.preventManualDateJoined = function preventManualDateJoined()
		{
			if (controller.page.demo.dateJoined == null) controller.page.demo.dateJoined = dateJoined0;
			else dateJoined0 = controller.page.demo.dateJoined;
		}
		controller.preventManualEndDate = function preventManualEndDate()
		{
			if (controller.page.demo.endDate == null) controller.page.demo.endDate = endDate0;
			else endDate0 = controller.page.demo.endDate;
		}
		controller.preventManualOnWaitingListSinceDate = function preventManualOnWaitingListSinceDate()
		{
			if (controller.page.demo.onWaitingListSinceDate == null) controller.page.demo.onWaitingListSinceDate = onWaitingListSinceDate0;
			else onWaitingListSinceDate0 = controller.page.demo.onWaitingListSinceDate;
		}
		controller.preventManualPaperChartArchivedDate = function preventManualPaperChartArchivedDate()
		{
			if (controller.page.demo.scrPaperChartArchivedDate == null) controller.page.demo.scrPaperChartArchivedDate = paperChartArchivedDate0;
			else paperChartArchivedDate0 = controller.page.demo.scrPaperChartArchivedDate;
		}

		//show/hide items
		// TODO: FIGURE OUT BETTER WAY TO SYNCHRONIZE THIS WITH DEMOGRAPHIC LOADING
		controller.isRosterTerminated = function isRosterTerminated()
		{
			if(controller.page.demo !== null && controller.page.demo !== undefined)
				return (controller.page.demo.rosterStatus === "TE");

			return null;
		};
		controller.showReferralDocList = function showReferralDocList()
		{
			controller.page.showReferralDocList = !controller.page.showReferralDocList;
		};

		controller.searchReferralDocsName = function searchReferralDocsName(searchName)
		{
			return controller.searchReferralDocs(searchName, null);
		};
		controller.searchReferralDocsRefNo = function searchReferralDocsRefNo(searchRefNo)
		{
			return controller.searchReferralDocs(null, searchRefNo);
		};
		controller.searchReferralDocs = function searchReferralDocs(searchName, searchRefNo)
		{
			return referralDoctorsService.searchReferralDoctors(searchName, searchRefNo, 1, 10).then(
				function success(results) {

					var referralDoctors = new Array(results.length);
					for (var i = 0; i < results.length; i++)
					{
						var displayName = results[i].lastName + ', ' + results[i].firstName;
						referralDoctors[i] = {
							label: displayName,
							name: displayName,
							referralNo: results[i].referralNo
						};
						if (results[i].specialtyType != null && results[i].specialtyType != "")
						{
							referralDoctors[i].label += " [" + results[i].specialtyType + "]";
						}
					}
					return referralDoctors;
				},
				function failure(errors) {
					return [];
				}
			);
		};
		controller.chooseReferralDoc = function chooseReferralDoc(item, model, label)
		{
			controller.page.demo.scrReferralDocNo = item.referralNo;
			controller.page.demo.scrReferralDoc = item.name;
			controller.checkReferralDocNo();
		};
		controller.chooseFamilyDoc = function chooseFamilyDoc(item, model, label)
		{
			controller.page.demo.scrFamilyDocNo = item.referralNo;
			controller.page.demo.scrFamilyDoc = item.name;
			controller.checkFamilyDocNo();
		};
		controller.showAddNewRosterStatus = function showAddNewRosterStatus()
		{
			controller.page.showAddNewRosterStatus = !controller.page.showAddNewRosterStatus;
			controller.page.newRosterStatus = null;
		};
		controller.showAddNewPatientStatus = function showAddNewPatientStatus()
		{
			controller.page.showAddNewPatientStatus = !controller.page.showAddNewPatientStatus;
			controller.page.newPatientStatus = null;
		};

		//add new Roster Status
		controller.addNewRosterStatus = function addNewRosterStatus()
		{
			if (controller.page.newRosterStatus != null && controller.page.newRosterStatus != "")
			{
				controller.page.rosterStatusList.push(
				{
					"value": controller.page.newRosterStatus,
					"label": controller.page.newRosterStatus
				});
				controller.page.demo.rosterStatus = controller.page.newRosterStatus;
			}
			controller.showAddNewRosterStatus();
		}

		//add new Patient Status
		controller.addNewPatientStatus = function addNewPatientStatus()
		{
			if (controller.page.newPatientStatus != null && controller.page.newPatientStatus != "")
			{
				controller.page.patientStatusList.push(
				{
					"value": controller.page.newPatientStatus,
					"label": controller.page.newPatientStatus
				});
				controller.page.demo.patientStatus = controller.page.newPatientStatus;
			}
			controller.showAddNewPatientStatus();
		}

		//check phone numbers
		controller.checkPhone = function checkPhone(type)
		{
			if (type == "C")
			{
				if (invalidPhoneNumber(controller.page.demo.scrCellPhone)) controller.page.demo.scrCellPhone = phoneNum["C"];
				else phoneNum["C"] = controller.page.demo.scrCellPhone;
			}
			else if (type == "H")
			{
				if (invalidPhoneNumber(controller.page.demo.scrHomePhone)) controller.page.demo.scrHomePhone = phoneNum["H"];
				else phoneNum["H"] = controller.page.demo.scrHomePhone;
			}
			else if (type == "W")
			{
				if (invalidPhoneNumber(controller.page.demo.scrWorkPhone)) controller.page.demo.scrWorkPhone = phoneNum["W"];
				else phoneNum["W"] = controller.page.demo.scrWorkPhone;
			}
			else if (type == "HX" && controller.page.demo.scrHPhoneExt != null && controller.page.demo.scrHPhoneExt != "")
			{
				if (!isNumber(controller.page.demo.scrHPhoneExt)) controller.page.demo.scrHPhoneExt = phoneNum["HX"];
				else phoneNum["HX"] = controller.page.demo.scrHPhoneExt;
			}
			else if (type == "WX" && controller.page.demo.scrWPhoneExt != null && controller.page.demo.scrWPhoneExt != "")
			{
				if (!isNumber(controller.page.demo.scrWPhoneExt)) controller.page.demo.scrWPhoneExt = phoneNum["WX"];
				else phoneNum["WX"] = controller.page.demo.scrWPhoneExt;
			}
		}

		//set preferred contact phone number
		controller.setPreferredPhone = function setPreferredPhone()
		{
			controller.page.cellPhonePreferredMsg = defPhTitle;
			controller.page.cellPhonePreferredColor = "";
			controller.page.homePhonePreferredMsg = defPhTitle;
			controller.page.homePhonePreferredColor = "";
			controller.page.workPhonePreferredMsg = defPhTitle;
			controller.page.workPhonePreferredColor = "";

			if (controller.page.demo.scrPreferredPhone == "C")
			{
				controller.page.preferredPhoneNumber = controller.page.demo.scrCellPhone;
				controller.page.cellPhonePreferredMsg = prefPhTitle;
				controller.page.cellPhonePreferredColor = colorAttn;
			}
			else if (controller.page.demo.scrPreferredPhone == "H")
			{
				controller.page.preferredPhoneNumber = controller.page.demo.scrHomePhone;
				controller.page.homePhonePreferredMsg = prefPhTitle;
				controller.page.homePhonePreferredColor = colorAttn;
			}
			else if (controller.page.demo.scrPreferredPhone == "W")
			{
				controller.page.preferredPhoneNumber = controller.page.demo.scrWorkPhone;
				controller.page.workPhonePreferredMsg = prefPhTitle;
				controller.page.workPhonePreferredColor = colorAttn;
			}
		}

		//disable set-preferred if phone number empty
		controller.isPhoneVoid = function isPhoneVoid(phone)
		{
			return (phone == null || phone == "");
		}

		//show enrollment history (roster staus history)
		controller.showEnrollmentHistory = function showEnrollmentHistory()
		{
			var url = "../demographic/EnrollmentHistory.jsp?demographicNo=" + controller.page.demo.demographicNo;
			window.open(url, "enrollmentHistory", "width=650, height=1000");
		}

		//upload photo
		controller.launchPhoto = function launchPhoto()
		{
			var url = "../casemgmt/uploadimage.jsp?demographicNo=" + controller.page.demo.demographicNo;
			window.open(url, "uploadWin", "width=500, height=300");
		}

		//manage contacts
		controller.manageContacts = function manageContacts()
		{
			var discard = true;
			if (controller.page.dataChanged > 0)
			{
				discard = confirm("You may have unsaved data. Are you sure to leave?");
			}
			if (discard)
			{
				var url = "../demographic/Contact.do?method=manage&demographic_no=" + controller.page.demo.demographicNo;
				window.open(url, "ManageContacts", "width=960, height=700");
			}
		}

		//print buttons
		controller.printLabel = function printLabel(label)
		{
			var url = null;
			if (label == "PDFLabel") url = "../demographic/printDemoLabelAction.do?appointment_no=null&demographic_no=" + controller.page.demo.demographicNo;
			else if (label == "PDFAddress") url = "../demographic/printDemoAddressLabelAction.do?demographic_no=" + controller.page.demo.demographicNo;
			else if (label == "PDFChart") url = "../demographic/printDemoChartLabelAction.do?demographic_no=" + controller.page.demo.demographicNo;
			else if (label == "PrintLabel") url = "../demographic/demographiclabelprintsetting.jsp?demographic_no=" + controller.page.demo.demographicNo;
			else if (label == "ClientLab") url = "../demographic/printClientLabLabelAction.do?demographic_no=" + controller.page.demo.demographicNo;
			window.open(url, "Print", "width=960, height=700");
		}

		//integrator buttons
		controller.integratorDo = function integratorDo(func)
		{
			var url = null;
			if (func == "ViewCommunity") url = "../admin/viewIntegratedCommunity.jsp";
			else if (func == "Linking") url = "../integrator/manage_linked_clients.jsp?demographicId=" + controller.page.demo.demographicNo;
			else if (func == "Compare") url = "../demographic/DiffRemoteDemographics.jsp?demographicId=" + controller.page.demo.demographicNo;
			else if (func == "Update") url = "../demographic/copyLinkedDemographicInfoAction.jsp?displaymode=edit&dboperation=search_detail&demographicId=" + controller.page.demo.demographicNo + "&demographic_no=" + controller.page.demo.demographicNo;
			else if (func == "SendNote") url = "../demographic/followUpSelection.jsp?demographicId=" + controller.page.demo.demographicNo;
			window.open(url, "Integrator", "width=960, height=700");
		}

		//MacPHR buttons
		controller.macPHRDo = function macPHRDo(func)
		{
			var url = null;
			if (func == "Register")
			{
				if (!controller.page.macPHRLoggedIn)
				{
					alert("Please login to PHR first");
					return;
				}
				url = "../phr/indivo/RegisterIndivo.jsp?demographicNo=" + controller.page.demo.demographicNo;
			}
			else if (func == "SendMessage")
			{
				url = "../phr/PhrMessage.do?method=createMessage&providerNo=" + user.providerNo + "&demographicNo=" + controller.page.demo.demographicNo;
			}
			else if (func == "ViewRecord")
			{
				url = "../demographic/viewPhrRecord.do?demographic_no=" + controller.page.demo.demographicNo;
			}
			else if (func == "Verification")
			{
				url = "../phr/PHRVerification.jsp?demographic_no=" + controller.page.demo.demographicNo;
			}
			window.open(url, "MacPHR", "width=960, height=700");
		}

		//appointment buttons
		controller.appointmentDo = function appointmentDo(func)
		{
			var url = null;
			if (func == "ApptHistory") url = "../demographic/demographiccontrol.jsp?displaymode=appt_history&dboperation=appt_history&limit1=0&limit2=25&orderby=appttime&demographic_no=" + controller.page.demo.demographicNo + "&last_name=" + encodeURI(controller.page.demo.lastName) + "&first_name=" + encodeURI(controller.page.demo.firstName);
			else if (func == "WaitingList") url = "../oscarWaitingList/SetupDisplayPatientWaitingList.do?demographic_no=" + controller.page.demo.demographicNo;
			window.open(url, "Appointment", "width=960, height=700");
		}

		controller.isClinicaidBilling = function isClinicaidBilling()
		{
			return controller.page.billregion == "CLINICAID";
		}

		//billing buttons
		controller.billingDo = function billingDo(func)
		{
			var now = new Date();
			var url = null;
			if (func == "BillingHistory")
			{
				if (controller.page.billregion == "CLINICAID")
				{
					url = "../billing.do?billRegion=CLINICAID&action=invoice_reports&patient_remote_id=" + controller.page.demo.demographicNo;
				}
				else if (controller.page.billregion == "ON")
				{
					url = "../billing/CA/ON/billinghistory.jsp?demographic_no=" + controller.page.demo.demographicNo + "&last_name=" + encodeURI(controller.page.demo.lastName) + "&first_name=" + encodeURI(controller.page.demo.firstName) + "&orderby=appointment_date&displaymode=appt_history&dboperation=appt_history&limit1=0&limit2=10";
				}
				else
				{
					url = "../billing/CA/BC/billcontroller.page.jsp?lastName=" + encodeURI(controller.page.demo.lastName) + "&firstName=" + encodeURI(controller.page.demo.firstName) + "&filterPatient=true&demographicNo=" + controller.page.demo.demographicNo;
				}
			}
			else if (func == "CreateInvoice")
			{
				url = "../billing.do?billRegion=" + controller.page.billregion + "&billForm=" + controller.page.defaultView + "&hotclick=&appointment_no=0&demographic_name=" + encodeURI(controller.page.demo.lastName) + encodeURI(",") + encodeURI(controller.page.demo.firstName) + "&demographic_no=" + controller.page.demo.demographicNo + "&providerview=" + controller.page.demo.providerNo + "&user_no=" + user.providerNo + "&apptProvider_no=none&appointment_date=" + now.getFullYear + "-" + (now.getMonth() + 1) + "-" + now.getDate() + "&start_time=00:00:00&bNewForm=1&status=t";
			}
			else if (func == "FluBilling")
			{
				url = "../billing/CA/ON/specialtyBilling/fluBilling/addFluBilling.jsp?function=demographic&functionid=" + controller.page.demo.demographicNo + "&creator=" + user.providerNo + "&demographic_name=" + encodeURI(controller.page.demo.lastName) + encodeURI(",") + encodeURI(controller.page.demo.firstName) + "&hin=" + controller.page.demo.hin + controller.page.demo.ver + "&demo_sex=" + controller.page.demo.sex + "&demo_hctype=" + controller.page.demo.hcType + "&rd=" + encodeURI(controller.page.demo.scrReferralDoc) + "&rdohip=" + controller.page.demo.scrReferralDocNo + "&dob=" + controller.page.demo.dobYear + controller.page.demo.dobMonth + controller.page.demo.dobDay + "&mrp=" + controller.page.demo.providerNo;
			}
			else if (func == "HospitalBilling")
			{
				url = "../billing/CA/ON/billingShortcutPg1.jsp?billRegion=" + controller.page.billregion + "&billForm=" + encodeURI(controller.page.hospitalView) + "&hotclick=&appointment_no=0&demographic_name=" + encodeURI(controller.page.demo.lastName) + encodeURI(",") + encodeURI(controller.page.demo.firstName) + "&demographic_no=" + controller.page.demo.demographicNo + "&providerview=" + controller.page.demo.providerNo + "&user_no=" + user.providerNo + "&apptProvider_no=none&appointment_date=" + now.getFullYear + "-" + (now.getMonth() + 1) + "-" + now.getDate() + "&start_time=00:00:00&bNewForm=1&status=t";
			}
			else if (func == "AddBatchBilling")
			{
				url = "../billing/CA/ON/addBatchBilling.jsp?demographic_no=" + controller.page.demo.demographicNo + "&creator=" + user.providerNo + "&demographic_name=" + encodeURI(controller.page.demo.lastName) + encodeURI(",") + encodeURI(controller.page.demo.firstName) + "&hin=" + controller.page.demo.hin + controller.page.demo.ver + "&dob=" + controller.page.demo.dobYear + controller.page.demo.dobMonth + controller.page.demo.dobDay;
			}
			else if (func == "AddINR")
			{
				url = "../billing/CA/ON/inr/addINRbilling.jsp?function=demographic&functionid=" + controller.page.demo.demographicNo + "&creator=" + user.providerNo + "&demographic_name=" + encodeURI(controller.page.demo.lastName) + encodeURI(",") + encodeURI(controller.page.demo.firstName) + "&hin=" + controller.page.demo.hin + controller.page.demo.ver + "&dob=" + controller.page.demo.dobYear + controller.page.demo.dobMonth + controller.page.demo.dobDay;
			}
			else if (func == "BillINR")
			{
				url = "../billing/CA/ON/inr/reportINR.jsp?provider_no=" + user.providerNo;
			}
			window.open(url, "Billing", "width=960, height=700");
		}

		//export demographic
		controller.exportDemographic = function exportDemographic()
		{
			var url = "../demographic/demographicExport.jsp?demographicNo=" + controller.page.demo.demographicNo;
			window.open(url, "DemographicExport", "width=960, height=700");
		}

		controller.formatDocOutput = function formatDocOutput(value)
		{
			var number, name;
			var begin = value.indexOf("<rdohip>") + "<rdohip>".length;
			var end = value.indexOf("</rdohip>");
			if (end > begin && end >= 0 && begin >= 0) number = value.substring(begin, end);

			begin = value.indexOf("<rd>") + "<rd>".length;
			end = value.indexOf("</rd>");
			if (end > begin && end >= 0 && begin >= 0) name = value.substring(begin, end);

			return {"number": number, "name": name};
		};

		controller.formatDocInput = function formatDocInput(name, number)
		{
			var docNo = "<rdohip></rdohip>";
			var doc = "<rd></rd>";
			if (number != null && number !== "")
			{
				docNo = "<rdohip>" + number + "</rdohip>";
			}
			if (name != null && name !== "")
			{
				doc = "<rd>" + name + "</rd>";
			}
			return docNo + doc;
		};

		//HCValidation on open & save
		controller.validateHCSave = function validateHCSave(doSave)
		{
			if (controller.page.demo.hin == null || controller.page.demo.hin == "")
			{
				if (doSave) controller.save();
			}
			else
			{
				patientDetailStatusService.isUniqueHC(controller.page.demo.hin, controller.page.demo.demographicNo).then(
					function success(results)
					{
						if (!results.success)
						{
							alert("HIN is already in use!");
						}
						else if (controller.page.demo.hcType != "ON")
						{
							if (doSave) controller.save();
						}
						else
						{
							if (controller.page.demo.ver == null) controller.page.demo.ver = "";
							patientDetailStatusService.validateHC(controller.page.demo.hin, controller.page.demo.ver).then(
								function success(results)
								{
									if (results.valid == null)
									{
										controller.page.HCValidation = "n/a";
									}
									else if (!results.valid)
									{
										alert("Health Card Validation failed: " + results.responseDescription + " (" + results.responseCode + ")");
										doSave = false;
									}
									if (doSave) controller.save();
								},
								function error(errors)
								{
									console.log(errors);
								});
						}
					},
					function error(errors)
					{
						console.log(errors);
					});
			}
		};

		//-----------------//
		// save operations //
		//-----------------//
		controller.save = function save()
		{
			controller.page.saving = true;

			//check required fields
			if (controller.page.demo.lastName == null || controller.page.demo.lastName == "")
			{
				alert("Last Name is required");
				return;
			}
			else if (controller.page.demo.firstName == null || controller.page.demo.firstName == "")
			{
				alert("First Name is required");
				return;
			}
			else if (controller.page.demo.sex == null || controller.page.demo.sex == "")
			{
				alert("Sex is required");
				return;
			}
			else if (dateEmpty(controller.page.demo.dobYear, controller.page.demo.dobMonth, controller.page.demo.dobDay))
			{
				alert("Date of Birth is required");
				return;
			}

			//validate field inputs
			controller.page.demo.dateOfBirth = buildDate(controller.page.demo.dobYear, controller.page.demo.dobMonth, controller.page.demo.dobDay);
			if (controller.page.demo.dateOfBirth == null)
			{
				alert("Invalid Date of Birth");
				return;
			}
			if (!controller.checkPatientStatus()) return;
			if (!controller.isPostalComplete()) return;
			if (!controller.validateSin()) return;
			if (!controller.validateDocNo(controller.page.demo.scrReferralDocNo)) return;
			if (!controller.validateDocNo(controller.page.demo.scrFamilyDocNo)) return;

			//save notes
			if (controller.page.demo.scrNotes != null)
			{
				controller.page.demo.notes = "<unotes>" + controller.page.demo.scrNotes + "</unotes>";
			}

			//save referral doctor (familyDoctor)
			controller.page.demo.familyDoctor = controller.formatDocInput(controller.page.demo.scrReferralDoc, controller.page.demo.scrReferralDocNo);

			//save family doctor (familyDoctor2)
			controller.page.demo.familyDoctor2 = controller.formatDocInput(controller.page.demo.scrFamilyDoc, controller.page.demo.scrFamilyDocNo);

			//save phone numbers
			controller.page.demo.scrDemoCell = controller.page.demo.scrCellPhone;
			controller.page.demo.phone = controller.page.demo.scrHomePhone;
			controller.page.demo.alternativePhone = controller.page.demo.scrWorkPhone;

			if (controller.page.demo.scrPreferredPhone == "C") controller.page.demo.scrDemoCell += "*";
			else if (controller.page.demo.scrPreferredPhone == "H") controller.page.demo.phone += "*";
			else if (controller.page.demo.scrPreferredPhone == "W") controller.page.demo.alternativePhone += "*";

			//save extras
			var newDemoExtras = [];
			newDemoExtras = updateDemoExtras("demo_cell", controller.page.demo.scrDemoCell, posExtras, controller.page.demo.extras, newDemoExtras);
			newDemoExtras = updateDemoExtras("aboriginal", controller.page.demo.scrAboriginal, posExtras, controller.page.demo.extras, newDemoExtras);
			newDemoExtras = updateDemoExtras("hPhoneExt", controller.page.demo.scrHPhoneExt, posExtras, controller.page.demo.extras, newDemoExtras);
			newDemoExtras = updateDemoExtras("wPhoneExt", controller.page.demo.scrWPhoneExt, posExtras, controller.page.demo.extras, newDemoExtras);
			newDemoExtras = updateDemoExtras("cytolNum", controller.page.demo.scrCytolNum, posExtras, controller.page.demo.extras, newDemoExtras);
			newDemoExtras = updateDemoExtras("phoneComment", controller.page.demo.scrPhoneComment, posExtras, controller.page.demo.extras, newDemoExtras);
			newDemoExtras = updateDemoExtras("paper_chart_archived", controller.page.demo.scrPaperChartArchived, posExtras, controller.page.demo.extras, newDemoExtras);
			newDemoExtras = updateDemoExtras("paper_chart_archived_date", controller.page.demo.scrPaperChartArchivedDate, posExtras, controller.page.demo.extras, newDemoExtras);
			newDemoExtras = updateDemoExtras("usSigned", controller.page.demo.scrUsSigned, posExtras, controller.page.demo.extras, newDemoExtras);
			newDemoExtras = updateDemoExtras("privacyConsent", controller.page.demo.scrPrivacyConsent, posExtras, controller.page.demo.extras, newDemoExtras);
			newDemoExtras = updateDemoExtras("informedConsent", controller.page.demo.scrInformedConsent, posExtras, controller.page.demo.extras, newDemoExtras);
			newDemoExtras = updateDemoExtras("securityQuestion1", controller.page.demo.scrSecurityQuestion1, posExtras, controller.page.demo.extras, newDemoExtras);
			newDemoExtras = updateDemoExtras("securityAnswer1", controller.page.demo.scrSecurityAnswer1, posExtras, controller.page.demo.extras, newDemoExtras);
			newDemoExtras = updateDemoExtras("rxInteractionWarningLevel", controller.page.demo.scrRxInteractionLevel, posExtras, controller.page.demo.extras, newDemoExtras);
			controller.page.demo.extras = newDemoExtras;

			//save to database
			demographicService.updateDemographic(controller.page.demo).then(
				function success()
				{
					controller.resetEditState();
				},

				function error()
				{
					controller.page.saving = false;
					alert('Failed to save demographic');
					// TODO: handle error
				}
			);
		};

		controller.resetEditState = function resetEditState()
		{
			controller.page.saving = false;
			controller.page.dataChanged = false;
		};

		controller.init(); // Initialize the controller
	}
]);


// Move these?
function updateDemoExtras(extKey, newVal, posExtras, oldExtras, newExtras)
{
	if (newVal == null) return newExtras;

	var pos = posExtras[extKey];
	if (pos != null && oldExtras[pos] != null)
	{ //existing ext
		if (oldExtras[pos].value != newVal)
		{
			newExtras.push(
			{
				id: oldExtras[pos].id,
				key: extKey,
				value: newVal,
				hidden: oldExtras[pos].hidden
			});
		}
	}
	else
	{ //newly added ext
		newExtras.push(
		{
			key: extKey,
			value: newVal
		});
	}
	return newExtras;
}

function buildDate(year, month, day)
{
	if (dateEmpty(year, month, day)) return "";
	if (date3Valid(year, month, day)) return year + "-" + month + "-" + day;
	return null;
}

function checkYear(year)
{
	for (var i = 0; i < year.length; i++)
	{
		if (!isNumber(year.charAt(i)))
		{
			year = year.substring(0, i) + year.substring(i + 1);
		}
	}
	if (year != "")
	{
		year = parseInt(year).toString();
		if (year.length > 4) year = year.substring(0, 4);
		if (year == 0) year = "";
	}
	return year;
}

function checkMonth(month)
{
	for (var i = 0; i < month.length; i++)
	{
		if (!isNumber(month.charAt(i)))
		{
			month = month.substring(0, i) + month.substring(i + 1);
		}
	}
	if (month != "")
	{
		if (month.length > 2) month = month.substring(0, 2);
		if (month > 12) month = month.substring(0, 1);
	}
	return month;
}

var daysOfMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

function checkDay(day, month, year)
{
	for (var i = 0; i < day.length; i++)
	{
		if (!isNumber(day.charAt(i)))
		{
			day = day.substring(0, i) + day.substring(i + 1);
		}
	}
	if (day != "")
	{
		if (day.length > 2) day = day.substring(0, 2);

		if (month == null)
		{
			if (day > 31) day = day.substring(0, 1);
		}
		else if (year == null)
		{
			if (day > daysOfMonth[month - 1]) day.substring(0, 1);
		}
		else if (!date3Valid(year, month, day))
		{
			day = day.substring(0, 1);
		}
	}
	return day;
}

function date3Valid(year, month, day)
{
	if (year != null && year != "" && month != null && month != "" && day != null && day != "")
	{
		var maxDaysOfMonth = daysOfMonth[month - 1];
		if (month == 2)
		{
			if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0)
			{
				maxDaysOfMonth = 29;
			}
		}
		return (day > 0 && day <= maxDaysOfMonth);
	}
	return dateEmpty(year, month, day);
}

function dateEmpty(year, month, day)
{
	return ((year == null || year == "") && (month == null || month == "") && (day == null || day == ""));
}

function dateValid(dateStr)
{ //valid date format: yyyy-MM-dd
	if (dateStr == null || dateStr == "") return true;

	var datePart = dateStr.toString().split("-");
	if (datePart.length != 3) return false;

	var dateDate = new Date(datePart[0], datePart[1] - 1, datePart[2]);
	if (isNaN(dateDate.getTime())) return false;

	if (dateDate.getFullYear() != datePart[0]) return false;
	if (dateDate.getMonth() != datePart[1] - 1) return false;
	if (dateDate.getDate() != datePart[2]) return false;

	return true;
}

function isNumber(s)
{
	return /^[0-9]+$/.test(s);
}

function invalidPhoneNumber(phone)
{
	if (phone == null) return false; //phone number is NOT invalid
	return !(/^[0-9 \-\()]*$/.test(phone));
}

function isPreferredPhone(phone)
{
	phone = String(phone);
	if (phone != null && phone != "")
	{
		if (phone.charAt(phone.length - 1) == "*") return true;
	}
	return false;
}

function getPhoneNum(phone)
{
	if (isPreferredPhone(phone))
	{
		phone = phone.substring(0, phone.length - 1);
	}
	return phone;
}

function demoContactShow(demoContact)
{
	var contactShow = demoContact;
	if (demoContact.role != null)
	{ //only 1 entry
		var tmp = {};
		tmp.role = demoContact.role;
		tmp.sdm = demoContact.sdm;
		tmp.ec = demoContact.ec;
		tmp.category = demoContact.category;
		tmp.lastName = demoContact.lastName;
		tmp.firstName = demoContact.firstName;
		tmp.phone = demoContact.phone;
		contactShow = [tmp];
	}
	for (var i = 0; i < contactShow.length; i++)
	{
		if (contactShow[i].sdm == true) contactShow[i].role += " /sdm";
		if (contactShow[i].ec == true) contactShow[i].role += " /ec";
		if (contactShow[i].role == null || contactShow[i].role == "") contactShow[i].role = "-";

		if (contactShow[i].phone == null || contactShow[i].phone == "")
		{
			contactShow[i].phone = "-";
		}
		else if (contactShow[i].phone.charAt(contactShow[i].phone.length - 1) == "*")
		{
			contactShow[i].phone = contactShow[i].phone.substring(0, contactShow[i].phone.length - 1);
		}
	}
	return contactShow;
}

function toArray(obj)
{ //convert single object to array
	if (obj instanceof Array) return obj;
	else if (obj == null) return [];
	else return [obj];
}

/***/ }),

/***/ "./src/record/details/module.js":
/*!**************************************!*\
  !*** ./src/record/details/module.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('Record.Details', ['Common', 'Common.Services']);

/***/ }),

/***/ "./src/record/forms/formsController.js":
/*!*********************************************!*\
  !*** ./src/record/forms/formsController.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {/*

    Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
    This software is published under the GPL GNU General Public License.
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    This software was written for the
    Department of Family Medicine
    McMaster University
    Hamilton
    Ontario, Canada

*/
angular.module('Record.Forms').controller('Record.Forms.FormController', [

	'$scope',
	'$http',
	'$location',
	'$stateParams',
	'$state',
	'demographicService',
	'demo',
	'formService',
	'user',
	'securityService',

	function(
		$scope,
		$http,
		$location,
		$stateParams,
		$state,
		demographicService,
		demo,
		formService,
		user,
		securityService)
	{

		var controller = this;

		console.log("form ctrl ", $stateParams, $state);

		controller.demographicNo = $stateParams.demographicNo;
		controller.providerNo = user.providerNo;

		controller.page = {};
		controller.page.currentFormList = [];
		controller.page.currentForm = {};
		controller.page.currentlistId = $stateParams.formListId;

		console.log("What is the state " + $state.params.type + " : " + angular.isUndefined($state.params.type) + " id " + $state.params.id, $state); // Use this to load the current form if the page is refreshed

		securityService.hasRights(
		{
			items: [
			{
				objectName: '_admin',
				privilege: 'w'
			},
			{
				objectName: '_admin.eform',
				privilege: 'w'
			}]
		}).then(
			function success(results)
			{
				controller.adminAccess = results.content[0];
				controller.adminEformAccess = results.content[1];
				if (results.content != null && results.content.length == 2)
				{
					if (controller.adminAccess || controller.adminEformAccess)
					{
						controller.hasAdminAccess = true;
					}
				}
				else
				{
					alert('failed to load rights');
				}
			},
			function error(errors)
			{
				console.log(errors);
			});


		controller.page.formlists = [
		{
			id: 0,
			label: 'Completed'
		},
		{
			id: 1,
			label: 'Library'
		}]; //Need to get this from the server.

		controller.page.formlists.forEach(function(item, index)
		{
			console.log('What is the item ', item);
			formService.getAllFormsByHeading($stateParams.demographicNo, item.label).then(
				function success(results)
				{
					controller.page.currentFormList[index] = Juno.Common.Util.toArray(results.list);
				},
				function error(errors)
				{
					console.log(errors);
				});
		});


		controller.page.encounterFormlist = [];
		controller.page.formGroups = [];
		controller.getFormGroups = function getFormGroups()
		{
			formService.getFormGroups().then(
				function success(results)
				{
					if (results instanceof Array)
					{
						controller.page.formGroups = results;
					}
					else
					{
						controller.page.formGroups.push(results);
					}

					for (var i = 0; i < controller.page.formGroups.length; i++)
					{
						if (!(controller.page.formGroups[i].summaryItem instanceof Array))
						{
							controller.page.formGroups[i].summaryItem = [controller.page.formGroups[i].summaryItem];
						}
					}
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.getFormGroups();
		controller.page.formOptions = [];
		controller.favouriteGroup = null;

		getFavouriteFormGroup = function getFavouriteFormGroup()
		{
			formService.getFavouriteFormGroup().then(
				function success(results)
				{
					controller.favouriteGroup = results;

					if (!(controller.favouriteGroup.summaryItem instanceof Array))
					{
						controller.favouriteGroup.summaryItem = [controller.favouriteGroup.summaryItem];
					}

				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		getFavouriteFormGroup();

		formService.getFormOptions(controller.demographicNo).then(
			function success(results)
			{
				console.log("data", results);

				if (results.items instanceof Array)
				{
					controller.page.formOptions = results.items;
				}
				else
				{
					controller.page.formOptions.push(results.items);
				}


				console.log("form options", controller.page.formOptions);
			},
			function error(errors)
			{
				console.log(errors);
			});

		formService.getCompletedEncounterForms($stateParams.demographicNo).then(
			function success(results)
			{
				controller.page.encounterFormlist[0] = results;
			},
			function error(errors)
			{
				console.log(errors);
			});

		formService.getSelectedEncounterForms().then(
			function success(results)
			{
				controller.page.encounterFormlist[1] = results;
			},
			function error(errors)
			{
				console.log(errors);
			});


		controller.changeTo = function changeTo(listId)
		{
			controller.page.currentlistId = listId;
			console.log('set currentlist to ' + listId);
			if (listId == 0)
			{
				formService.getAllFormsByHeading($stateParams.demographicNo, 'Completed').then(
					function success(results)
					{
						console.debug('whats the index' + 0, results);
						controller.page.currentFormList[0] = Juno.Common.Util.toArray(results.list);
					},
					function error(errors)
					{
						console.log(errors);
					});
			}
		};

		controller.viewFormState = function viewFormState(item, view)
		{

			while (document.getElementById('formInViewFrame').hasChildNodes())
			{
				document.getElementById('formInViewFrame').removeChild(document.getElementById('formInViewFrame').firstChild);
			}

			var queryName = $location.search().name;
			var params = {
				demographicNo: $stateParams.demographicNo,
				type: item.type === 'eform' ? 'eform' : 'form',
				id: item.id || item.formId
			};

			// The items sent from the server are such that
			// 1. Existing eforms have a formId and an id
			// 2. Existing forms have a formId only
			// 3. Library/available eforms have a formId only
			// 4. Library/available forms have neither
			if ((item.type === 'eform' && item.id) || (item.type === 'form' && item.formId))
			{
				params.name = item.type === 'form' ? item.name || queryName : '';
				$state.go('record.forms.view', params);
			}
			else if (item.type === 'eform')
			{
				$state.go('record.forms.add', params);
			}
			else
			{
				$state.go('record.forms');
			}

			/*
			* 1=frame
			* 2=newwindow
			*/
			if (view === undefined)
			{
				view = 1;
			}

			var url = '';
			if (item.type === 'eform')
			{
				if (!Juno.Common.Util.isUndefinedOrNull(item.id))
				{
					url = '../eform/efmshowform_data.jsp?fdid=' + item.id;
				}
				else
				{
					url = '../eform/efmformadd_data.jsp?fid=' + item.formId + '&demographic_no=' + $stateParams.demographicNo;
				}
			}
			else
			{ //form
				if (angular.isDefined(item.formId))
				{
					var name = item.name || queryName;
					url = '../form/forwardshortcutname.jsp?formname=' + name + '&demographic_no=' + $stateParams.demographicNo + '&formId=' + item.formId;
				}
				else
				{
					url = item.formValue + $stateParams.demographicNo + "&formId=0&provNo=" + user.providerNo + "&parentAjaxId=forms";
				}
			}

			if (view === 1)
			{
				$("html, body").animate(
					{
						scrollTop: 0
					}, "slow");
			}
			else if (view === 2)
			{
				var rnd = Math.round(Math.random() * 1000);
				win = "win" + rnd;

				window.open(url, win, "scrollbars=yes, location=no, width=900, height=600", "");
				return;
			}

			controller.page.currentForm = item;
			var pymParent = new pym.Parent('formInViewFrame', url,
			{});
			controller.pymParent = pymParent;

			/*if(item.type != 'eform' && view==1){
				document.getElementById('formInViewFrame').firstChild.style.height = "1600px"; //temp hack for the forms
			}*/

			//resize iframe for both form and eforms
			$('iframe').load(function()
			{
				var maxheight = Math.max(document.getElementById('formInViewFrame').firstChild.contentWindow.document.body.scrollHeight, document.getElementById('formInViewFrame').firstChild.contentWindow.document.body.offsetHeight) + 30 + 'px';
				document.getElementById('formInViewFrame').firstChild.style.height = maxheight;
			});

		};

		controller.isEmpty = function isEmpty(obj)
		{
			for (var i in obj)
				if (obj.hasOwnProperty(i)) return false;
			return true;
		};

		controller.currentEformGroup = {};

		controller.setCurrentEFormGroup = function setCurrentEFormGroup(mod)
		{
			controller.currentEformGroup = mod;
		};

		controller.openFormFromGroups = function openFormFromGroups(item)
		{
			console.log("group item", item);
			item.formId = item.id;
			delete item.id;
			controller.viewFormState(item, 2);
		};

		controller.formOption = function formOption(opt)
		{
			var atleastOneItemSelected = false;
			if (opt.extra == "send2PHR")
			{
				var docIds = "";
				for (var i = 0; i < controller.page.currentFormList[controller.page.currentlistId].length; i++)
				{
					if (controller.page.currentFormList[controller.page.currentlistId][i].isChecked)
					{
						docIds = docIds + '&sendToPhr=' + controller.page.currentFormList[controller.page.currentlistId][i].id;
						atleastOneItemSelected = true;
					}
				}
				if (atleastOneItemSelected)
				{
					var rnd = Math.round(Math.random() * 1000);
					win = "win" + rnd;
					var url = '../eform/efmpatientformlistSendPhrAction.jsp?clientId=' + controller.demographicNo + docIds;
					window.open(url, win, "scrollbars=yes, location=no, width=900, height=600", "");
				}
			}

			if (!atleastOneItemSelected)
			{
				alert("No Documents Selected");
			}
		};


		/*
		 * Used to make the left side list tab be active
		 */
		controller.getListClass = function getListClass(listId)
		{
			if (listId === controller.page.currentlistId)
			{
				return "active";
			}
		};

		/*
		 * Used to make group setting active
		 */
		controller.getGroupListClass = function getGroupListClass(grp)
		{
			if (grp === controller.currentEformGroup)
			{
				return "active";
			}
		};

		/*
		 * Used to mark which form is active.
		 */
		controller.getActiveFormClass = function getActiveFormClass(item)
		{
			if (item.type === controller.page.currentForm.type && item.id === controller.page.currentForm.id && !Juno.Common.Util.isUndefinedOrNull(item.id))
			{
				return "active";
			}
			else if (item.type === controller.page.currentForm.type && item.formId === controller.page.currentForm.formId && Juno.Common.Util.isUndefinedOrNull(item.id))
			{
				return "active";
			}
		}

		var currentState = $state.current.name;
		if (currentState === 'record.forms.view' || currentState === 'record.forms.add')
		{
			var item = {};
			item.type = $state.params.type;

			// set item properties in a way that matches the content that the server returns
			if (currentState === 'record.forms.view' && item.type === 'eform')
			{
				item.id = $state.params.id;
			}
			else
			{
				item.formId = $state.params.id;
			}

			controller.viewFormState(item);
			controller.changeTo(currentState === 'record.forms.view' ? 0 : 1);
		}

		/*
		 * This still needs to be tested
		 */
		controller.keypress = function keypress(event)
		{
			if (event.altKey == true && event.keyCode == 38)
			{ //up
				console.log("up", event);
				console.log(controller.page.currentFormList[controller.page.currentlistId].indexOf(controller.page.currentForm));
				var currIdx = controller.page.currentFormList[controller.page.currentlistId].indexOf(controller.page.currentForm);
				if (currIdx > 0)
				{
					controller.page.currentForm = controller.page.currentFormList[controller.page.currentlistId][currIdx - 1];
					controller.viewFormState(controller.page.currentForm);
				}
			}
			else if (event.altKey == true && event.keyCode == 40)
			{ //Down
				console.log("down", event);
				var currIdx = controller.page.currentFormList[controller.page.currentlistId].indexOf(controller.page.currentForm);
				console.log(currIdx, controller.page.currentFormList[controller.page.currentlistId].length);
				if (currIdx <= controller.page.currentFormList[controller.page.currentlistId].length)
				{
					controller.page.currentForm = controller.page.currentFormList[controller.page.currentlistId][currIdx + 1];
					controller.viewFormState(controller.page.currentForm);
				}
			}
			else
			{
				console.log("keypress", event.altKey, event.key, event);
			}
		};


	}
]);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/record/forms/module.js":
/*!************************************!*\
  !*** ./src/record/forms/module.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('Record.Forms', ['Common', 'Common.Services']);

/***/ }),

/***/ "./src/record/module.js":
/*!******************************!*\
  !*** ./src/record/module.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('Record', ['Common', 'Common.Services']);

/***/ }),

/***/ "./src/record/phr/module.js":
/*!**********************************!*\
  !*** ./src/record/phr/module.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('Record.PHR', ['Common', 'Common.Services']);

/***/ }),

/***/ "./src/record/phr/phrController.js":
/*!*****************************************!*\
  !*** ./src/record/phr/phrController.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*

    Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
    This software is published under the GPL GNU General Public License.
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    This software was written for the
    Department of Family Medicine
    McMaster University
    Hamilton
    Ontario, Canada

*/
angular.module('Record.PHR').controller('Record.PHR.PHRController', [

	'$scope',
	'$http',
	'$location',
	'$state',
	'$stateParams',
	'demographicService',
	'demo',
	'formService',

	function(
		$scope,
		$http,
		$location,
		$state,
		$stateParams,
		demographicService,
		demo,
		formService)
	{

		var controller = this;

		console.log("phr ctrl ", $stateParams, $state);

		controller.page = {};
		controller.page.currentFormList = [];
		controller.page.currentForm = {};
		controller.page.currentlistId = 0;

		console.log("What is the state " + $state.params.type + " : " + angular.isUndefined($state.params.type) + " id " + $state.params.id, $state); // Use this to load the current form if the page is refreshed


		controller.page.formlists = [
		{
			id: 0,
			label: 'Data'
		}]; //,{id:1,label:'Msgs'}];  //Need to get this from the server.

		controller.page.currentFormList[0] = [
		{
			id: 0,
			name: 'Glucose',
			url: '../oscarEncounter/myoscar/measurements_glucose.do?type=GLUCOSE&demoNo=',
			type: 'frame'
		},
		{
			id: 1,
			name: 'BP',
			url: '../oscarEncounter/myoscar/measurements_blood_pressure.do?type=BLOOD_PRESSURE&demoNo=',
			type: 'frame'
		},
		{
			id: 2,
			name: 'Height & Weight',
			url: '../oscarEncounter/myoscar/measurements_height_and_weight.do?type=HEIGHT_AND_WEIGHT&demoNo=',
			type: 'frame'
		},
		{
			id: 3,
			name: 'Open Record',
			url: '../demographic/viewPhrRecord.do?demographic_no=',
			type: 'window'
		},
		{
			id: 4,
			name: 'Send a Message',
			url: '../phr/PhrMessage.do?method=createMessage&demographicNo=',
			type: 'window'
		},
		{
			id: 5,
			name: 'Data Sync',
			url: '../admin/oscar_myoscar_sync_config_redirect.jsp?uselessParam=',
			type: 'window'
		}];



		/*controller.page.formlists.forEach(function (item, index) {
			console.log('What is the item ',item);
			formService.getAllFormsByHeading($stateParams.demographicNo,item.label).then(function(data) {
		        console.debug('whats the index'+index,data);
		        controller.page.currentFormList[index] = data.list;
		    });
		});
		*/

		controller.changeTo = function changeTo(listId)
		{
			controller.page.currentlistId = listId;
			console.log('set currentlist to ' + listId);
			if (listId == 0)
			{
				formService.getAllFormsByHeading($stateParams.demographicNo, 'Completed').then(
					function success(results)
					{
						console.debug('whats the index' + 0, results);
						controller.page.currentFormList[0] = results.list;
					},
					function error(errors)
					{
						console.log(errors);
					});
			}
		};

		controller.viewFormState = function viewFormState(item)
		{

			while (document.getElementById('formInViewFrame').hasChildNodes())
			{
				document.getElementById('formInViewFrame').removeChild(document.getElementById('formInViewFrame').firstChild);
			}

			var url = item.url + $stateParams.demographicNo;
			console.log("item", item);

			if (item.type == 'frame')
			{
				controller.page.currentForm = item;
				var pymParent = new pym.Parent('formInViewFrame', url,
				{});
				controller.pymParent = pymParent;
			}
			else
			{
				var rnd = Math.round(Math.random() * 1000);
				win = "win" + rnd;
				window.open(url, win, "scrollbars=yes, location=no, width=900, height=600", "");
				return;
			}


		};



		/*
		 * Used to make the left side list tab be active
		 */
		controller.getListClass = function getListClass(listId)
		{
			if (listId === controller.page.currentlistId)
			{
				return "active";
			}
		};

		/*
		 * Used to mark which form is active.
		 */
		controller.getActiveFormClass = function getActiveFormClass(item)
		{
			if (item.type == controller.page.currentForm.type && item.id == controller.page.currentForm.id && angular.isDefined(item.id))
			{
				return "active";
			}
			else if (item.type == controller.page.currentForm.type && angular.isUndefined(item.id) && item.formId == controller.page.currentForm.formId)
			{
				return "active";
			}
		};

		// Remove this?
		function handleError(errorMessage)
		{
			console.log(errorMessage);
		}

		/*
		 * This still needs to be tested
		 */
		controller.keypress = function keypress(event)
		{
			if (event.altKey == true && event.key == "Up")
			{
				console.log("up", event);
				console.log(controller.page.currentFormList[controller.page.currentlistId].indexOf(controller.page.currentForm));
				var currIdx = controller.page.currentFormList[controller.page.currentlistId].indexOf(controller.page.currentForm);
				if (currIdx > 0)
				{
					controller.page.currentForm = controller.page.currentFormList[controller.page.currentlistId][currIdx - 1];
					controller.viewFormState(controller.page.currentForm);
				}
			}
			else if (event.altKey == true && event.key == "Down")
			{
				console.log("down", event);
				var currIdx = controller.page.currentFormList[controller.page.currentlistId].indexOf(controller.page.currentForm);
				console.log(currIdx, controller.page.currentFormList[controller.page.currentlistId].length);
				if (currIdx <= controller.page.currentFormList[controller.page.currentlistId].length)
				{
					controller.page.currentForm = controller.page.currentFormList[controller.page.currentlistId][currIdx + 1];
					controller.viewFormState(controller.page.currentForm);
				}
			}
			else
			{
				console.log("keypress", event.altKey, event.key, event);
			}
		};
	}
]);

/***/ }),

/***/ "./src/record/recordController.js":
/*!****************************************!*\
  !*** ./src/record/recordController.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($, moment) {/*

    Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
    This software is published under the GPL GNU General Public License.
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    This software was written for the
    Department of Family Medicine
    McMaster University
    Hamilton
    Ontario, Canada

*/

angular.module('Record').controller('Record.RecordController', [

	'$rootScope',
	'$scope',
	'$window',
	'$http',
	'$localStorage',
	'$location',
	'$state',
	'$stateParams',
	'$timeout',
	'$interval',
	'$uibModal',
	'demographicService',
	'demo',
	'user',
	'properties',
	'noteService',
	'uxService',
	'securityService',
	'scheduleService',
	'billingService',

	function(
		$rootScope,
		$scope,
		$window,
		$http,
		$localStorage,
		$location,
		$state,
		$stateParams,
		$timeout,
		$interval,
		$uibModal,
		demographicService,
		demo,
		user,
		properties,
		noteService,
		uxService,
		securityService,
		scheduleService,
		billingService)
	{

		var controller = this;

		controller.demographicNo = $stateParams.demographicNo;
		controller.demographic = demo;
		controller.properties = properties;
		controller.page = {};
		controller.page.assignedCMIssues = [];

		/*
		 * handle concurrent note edit - EditingNoteFlag
		 */
		controller.page.itvSet = null;
		controller.page.itvCheck = null;
		controller.page.editingNoteId = null;
		controller.page.isNoteSaved = false; // Track save state of note TODO: Potentially add this to the encounterNote object on the backend

		controller.$storage = $localStorage; // Define persistent storage
		/*
		controller.recordtabs2 = [ 
		 {id : 0,name : 'Master',url : 'partials/master.html'},
		 {id : 1,name : 'Summary',url : 'partials/summary.html'},
		 {id : 2,name : 'Rx',url : 'partials/rx.jsp'},
		 {id : 3,name : 'Msg',url : 'partials/summary.html'},
		 {id : 4,name : 'Trackers',url : 'partials/tracker.jsp'},
		 {id : 5,name : 'Consults',url : 'partials/summary.html'},
		 {id : 6,name : 'Forms',url : 'partials/formview.html'},
		 {id : 7,name : 'Prevs/Measurements',url : 'partials/summary.html'},
		 {id : 8,name : 'Ticklers',url : 'partials/summary.html'},
		 {id : 9,name : 'MyOscar',url : 'partials/blank.jsp'},
		 {id : 10,name : 'Allergies',url : 'partials/summary.html'},
		 {id : 11,name : 'CPP',url : 'partials/cpp.html'},
		 {id : 12,name : 'Labs/Docs',url : 'partials/labview.html'},
		 {id : 13,name : 'Billing',url : 'partials/billing.jsp'}	
		*/
		controller.recordtabs2 = [];
		/*
		                 	 {id : 0,displayName : 'Details'  ,path : 'record.details'},
		                 	 {id : 1,displayName : 'Summary'  ,path : 'record.summary'},
		                 	 {id : 2,displayName : 'Forms'    ,path : 'record.forms'},
		                 	 {id : 3,displayName : 'Labs/Docs',path : 'partials/eform.jsp'},
		                 	 {id : 4,displayName : 'Rx'       ,path : 'partials/eform.jsp'}];
		*/

		controller.init = function init()
		{
			controller.fillMenu();
		};

		//get access rights
		securityService.hasRight("_eChart", "w", controller.demographicNo).then(
			function success(results)
			{
				controller.page.cannotChange = !results;
			},
			function error(errors)
			{
				console.log(errors);
			});

		//disable click and keypress if user only has read-access
		controller.checkAction = function checkAction(event)
		{
			if (controller.page.cannotChange)
			{
				event.preventDefault();
				event.stopPropagation();
			}
		};

		// Is there a shared location where this could be accessed from any controller? i.e. a utils file
		controller.isNaN = function(num)
		{
			return isNaN(num);
		};

		controller.fillMenu = function fillMenu()
		{
			uxService.menu($stateParams.demographicNo).then(
				function success(results)
				{
					controller.recordtabs2 = results;
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		//var transitionP = $state.transitionTo(controller.recordtabs2[0].path,$stateParams,{location:'replace',notify:true});
		//console.log("transition ",transitionP);

		controller.changeTab = function changeTab(temp)
		{
			controller.currenttab2 = controller.recordtabs2[temp.id];

			if (Juno.Common.Util.isDefinedAndNotNull(temp.state))
			{
				if(Juno.Common.Util.isDefinedAndNotNull(temp.demoId)){
					$state.go(temp.state,
						{
							demographicNo: temp.demoId
						});
				}
				else
				{
					$state.go(temp.state);
				}
			}
			else if (angular.isDefined(temp.url))
			{
				if (temp.label == "Rx")
				{
					win = temp.label + controller.demographicNo;
				}
				else
				{
					var rnd = Math.round(Math.random() * 1000);
					win = "win" + rnd;
				}
				window.open(temp.url, win, "scrollbars=yes, location=no, width=1000, height=600", "");
			}
			//console.log(controller.recordtabs2[temp].path);
		};

		controller.isActive = function isActive(tab)
		{
			if(Juno.Common.Util.isDefinedAndNotNull($state.current.name) &&
				Juno.Common.Util.isDefinedAndNotNull(tab.state))
			{
				return ($state.current.name === tab.state);
			}

			return false;
		};

		// Check if there have been potential changes to a note, display a warning if needed
		$window.onbeforeunload = function (event) {
			if (Juno.Common.Util.isDefinedAndNotNull(controller.page.encounterNote))
			{
				if(controller.page.encounterNote.note.trim().length !== 0 && controller.page.isNoteSaved === false)
				{
					return 'You have made changes to a note, but you did not save them yet.\nLeaving the page will revert all changes.';
				}
			}
		};

		$scope.$on('$destroy', function() {
			delete $window.onbeforeunload;
		});

		// Warn user about unsaved data before a state change
		$scope.$on("$stateChangeStart", function(event, data)
		{
			// If the encounter note is not null/undefined and the new state is not a child of record, continue
			if (Juno.Common.Util.isDefinedAndNotNull(controller.page.encounterNote) &&
				controller.page.isNoteSaved === false && data.name.indexOf('record.') === -1)
			{
				if(controller.page.encounterNote.note.trim().length !== 0)
				{
					var discard = confirm("You have unsaved note data. Are you sure you want to leave?");
					if (!discard)
					{
						event.preventDefault();
					}
				}
			}
		});

		//////AutoSave
		var saveIntervalSeconds = 2;

		var timeout = null;
		var saveUpdates = function saveUpdates()
		{
			if (controller.page.encounterNote.note == controller.page.initNote) return; //user did not input anything, don't save

			console.log("save", controller.page.encounterNote);
			noteService.tmpSave($stateParams.demographicNo, controller.page.encounterNote);
		};
		var skipTmpSave = false;
		var noteDirty = false;

		var delayTmpSave = function delayTmpSave(newVal, oldVal)
		{
			console.log("whats the val ", (newVal != oldVal));
			if (!skipTmpSave)
			{
				if (newVal != oldVal)
				{
					noteDirty = true;
					if (timeout)
					{
						$timeout.cancel(timeout);
					}
					timeout = $timeout(saveUpdates, saveIntervalSeconds * 1000);
				}
				else
				{
					noteDirty = false;
				}
			}
			skipTmpSave = false; // only skip once
		};
		$scope.$watch('controller.page.encounterNote.note', delayTmpSave);

		//////

		//////Timer
		var d = new Date(); //the start

		var totalSeconds = 0;
		var myVar = setInterval(setTime, 1000);

		controller.getCurrentTimerToggle = function getCurrentTimerToggle()
		{
			if (angular.isDefined(myVar))
			{
				return "fa-pause";
			}
			return "fa-play";
		};

		controller.toggleTimer = function toggleTimer()
		{
			if ($("#aToggle").hasClass("fa-pause"))
			{
				$("#aToggle").removeClass("fa-pause");
				$("#aToggle").addClass("fa-play");
				clearInterval(myVar);
			}
			else
			{
				$("#aToggle").removeClass("fa-play");
				$("#aToggle").addClass("fa-pause");
				myVar = setInterval(setTime, 1000);
			}
		};

		controller.pasteTimer = function pasteTimer()
		{
			var ed = new Date();
			controller.page.encounterNote.note += "\n" + document.getElementById("startTag").value + ": " + d.getHours() + ":" + pad(d.getMinutes()) + "\n" + document.getElementById("endTag").value + ": " + ed.getHours() + ":" + pad(ed.getMinutes()) + "\n" + pad(parseInt(totalSeconds / 3600)) + ":" + pad(parseInt((totalSeconds / 60) % 60)) + ":" + pad(totalSeconds % 60);
		};

		function setTime()
		{
			++totalSeconds;
			document.getElementById("aTimer").innerHTML = pad(parseInt(totalSeconds / 60)) + ":" + pad(totalSeconds % 60);
			if (totalSeconds == 1200)
			{
				$("#aTimer").css("background-color", "#DFF0D8");
			} //1200 sec = 20 min light green
			if (totalSeconds == 3000)
			{
				$("#aTimer").css("background-color", "#FDFEC7");
			} //3600 sec = 50 min light yellow
		}

		function pad(val)
		{
			var valString = val + "";
			if (valString.length < 2)
			{
				return "0" + valString;
			}
			else
			{
				return valString;
			}
		}
		$scope.$on('$destroy', function()
		{
			clearInterval(myVar);
		});
		//////		


		// Note Input Logic
		controller.toggleNote = function toggleNote()
		{
			if (controller.$storage.hideNote)
			{
				controller.$storage.hideNote = false;
			}
			else
			{
				controller.$storage.hideNote = true;
			}
		};

		// TODO
		controller.cancelNoteEdit = function cancelNoteEdit()
		{
			console.log('CANCELLING EDIT');
			controller.page.encounterNote = null;
			$rootScope.$emit('stopEditingNote');
			skipTmpSave = true;
			controller.getCurrentNote(false);
			controller.removeEditingNoteFlag();
			controller.$storage.hideNote = true;
		};

		controller.saveNote = function saveNote()
		{
			// Don't let users save an empty note
			if (controller.page.encounterNote.note.length === 0)
			{
				alert("Can't save a blank note!"); // Placeholder error handling
				return;
			}
			// Check if this is a new note, if it isn't, we don't want to overwrite the existing observationDate
			// Need to find a better way of preventing this date overwrite
			controller.page.encounterNote.assignedIssues = controller.page.assignedCMIssues;
			controller.page.encounterNote.issueDescriptions = [];
			if(!Juno.Common.Util.isInArray(user.displayName,  controller.page.encounterNote.editorNames))
				controller.page.encounterNote.editorNames.push(user.displayName);

			for (var i = 0; i < controller.page.assignedCMIssues.length; i++)
			{
				// if (controller.page.encounterNote.issueDescriptions == null)
				// {
				// 	controller.page.encounterNote.issueDescriptions = controller.page.assignedCMIssues[i].issue.description;
				// }
				// else
				// {
				// 	controller.page.encounterNote.issueDescriptions += "," + controller.page.assignedCMIssues[i].issue.description;
				// }
				controller.page.encounterNote.issueDescriptions.push(controller.page.assignedCMIssues[i].issue.description);
			}

			noteService.saveNote($stateParams.demographicNo, controller.page.encounterNote).then(
				function success(results)
				{
					controller.page.isNoteSaved = true;
					$rootScope.$emit('noteSaved', results);
					skipTmpSave = true;
					controller.page.encounterNote = results;
					controller.$storage.hideNote = true;
					controller.getCurrentNote(false);
					controller.page.assignedCMIssues = [];
				},
				function error(errors)
				{
					console.log(errors);
				});
			controller.removeEditingNoteFlag();
		};

		controller.saveSignNote = function saveSignNote()
		{
			controller.page.encounterNote.isSigned = true;
			controller.saveNote();
		};

		controller.saveSignVerifyNote = function saveSignVerifyNote()
		{
			controller.page.encounterNote.isVerified = true;
			controller.page.encounterNote.isSigned = true;
			controller.saveNote();
		};

		billingService.getBillingRegion().then(
			function success(results)
			{
				controller.page.billregion = results.message;
			},
			function error(errors)
			{
				console.log(errors);
			});
		billingService.getDefaultView().then(
			function success(results)
			{
				controller.page.defaultView = results.message;
			},
			function error(errors)
			{
				console.log(errors);
			});
		if ($location.search().appointmentNo != null)
		{
			scheduleService.getAppointment($location.search().appointmentNo).then(
				function success(results)
				{
					controller.page.appointment = results;
				},
				function error(errors)
				{
					console.log(errors);
				});
		}

		controller.saveSignBillNote = function saveSignBillNote()
		{
			controller.page.encounterNote.isSigned = true;
			controller.saveNote();

			var dxCode = "";
			for (var i = 0; i < controller.page.assignedCMIssues.length; i++)
			{
				dxCode += "&dxCode=" + controller.page.assignedCMIssues[i].issue.code.substring(0, 3);
			}

			var apptNo = "",
				apptProvider = "",
				apptDate = "",
				apptStartTime = "";
			if (controller.page.appointment != null)
			{
				apptNo = controller.page.appointment.id;
				apptProvider = controller.page.appointment.providerNo;
				var dt = moment(controller.page.appointment.appointmentDate).toDate();
				apptDate = dt.getFullYear() + "-" + zero(dt.getMonth() + 1) + "-" + zero(dt.getDate());
				dt = new Date(controller.page.appointment.startTime);
				apptStartTime = zero(dt.getHours()) + ":" + zero(dt.getMinutes()) + ":" + zero(dt.getSeconds());
			}

			var url = "../billing.do?billRegion=" + encodeURIComponent(controller.page.billregion);
			url += "&billForm=" + encodeURIComponent(controller.page.defaultView);
			url += "&demographic_name=" + encodeURIComponent(demo.lastName + "," + demo.firstName);
			url += "&demographic_no=" + demo.demographicNo;
			url += "&providerview=" + user.providerNo + "&user_no=" + user.providerNo;
			url += "&appointment_no=" + apptNo + "&apptProvider_no=" + apptProvider;
			url += "&appointment_date=" + apptDate + "&start_time=" + apptStartTime;
			url += "&hotclick=&status=t&bNewForm=1" + dxCode;

			window.open(url, "billingWin", "scrollbars=yes, location=no, width=" + screen.width + ", height=" + screen.height, "");
		};


		console.log('RecordCtrlEnd', $state);

		controller.page.currentNoteConfig = {};


		controller.getIssueNote = function getIssueNote()
		{
			if (controller.page.encounterNote.noteId != null)
			{
				noteService.getIssueNote(controller.page.encounterNote.noteId).then(
					function success(results)
					{
						if (results != null) controller.page.assignedCMIssues = toArray(results.assignedCMIssues);
					},
					function error(errors)
					{
						console.log(errors);
					});
			}
		};

		controller.getCurrentNote = function getCurrentNote(showNoteAfterLoadingFlag)
		{
			noteService.getCurrentNote($stateParams.demographicNo, $location.search()).then(
				function success(results)
				{
					controller.page.encounterNote = results;
					controller.page.initNote = results.note; //compare this with current note content to determine tmpsave or not
					controller.getIssueNote();
					// controller.hideNote = showNoteAfterLoadingFlag;
					// controller.$storage.hideNote = showNoteAfterLoadingFlag;
					$rootScope.$emit('currentlyEditingNote', controller.page.encounterNote);
					controller.initAppendNoteEditor();
					controller.initObservationDate();
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.getCurrentNote(true);

		controller.editNote = function editNote(note)
		{
			$rootScope.$emit('', note);
		};

		$rootScope.$on('loadNoteForEdit', function(event, data)
		{
			// Check if another note is currently being edited
			if (controller.page.editingNoteId !== null)
			{
				console.log('Note is already being edited! Do you want to save changes?');
				controller.displayWarning(data);
				return;
			}
			controller.page.encounterNote = angular.copy(data);
			controller.getIssueNote();

			//Need to check if note has been saved yet.
			controller.$storage.hideNote = false;
			$rootScope.$emit('currentlyEditingNote', controller.page.encounterNote);

			controller.removeEditingNoteFlag();
		});

		controller.initAppendNoteEditor = function initAppendNoteEditor()
		{
			if ($location.search().noteEditorText != null)
			{
				controller.page.encounterNote.note = controller.page.encounterNote.note + $location.search().noteEditorText;
			}
		};

		// Initialize the observationDate for new notes
		controller.initObservationDate = function initObservationDate()
		{
			if (controller.page.encounterNote.observationDate === null)
			{
				controller.page.encounterNote.observationDate = new Date();
			}
		};


		$rootScope.$on("$stateChangeStart", function()
		{
			controller.removeEditingNoteFlag();
		});

		controller.doSetEditingNoteFlag = function doSetEditingNoteFlag()
		{
			noteService.setEditingNoteFlag(controller.page.editingNoteId, user.providerNo).then(
				function success(results)
				{
					if (!results.success)
					{
						if (results.message == "Parameter error") alert("Parameter Error: noteUUID[" + controller.page.editingNoteId + "] userId[" + user.providerNo + "]");
						else alert("Warning! Another user is editing this note now.");
					}
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.setEditingNoteFlag = function setEditingNoteFlag()
		{
			if (controller.page.encounterNote.uuid == null) return;
			controller.page.isNoteSaved = false;
			controller.page.editingNoteId = controller.page.encounterNote.uuid;
			if (controller.page.itvSet == null)
			{
				controller.page.itvSet = $interval(controller.doSetEditingNoteFlag(), 30000); //set flag every 5 min until canceled
			}
			if (controller.page.itvCheck == null)
			{ //warn once only when the 1st time another user tries to edit this note
				controller.page.itvCheck = $interval(function()
				{
					noteService.checkEditNoteNew(controller.page.editingNoteId, user.providerNo).then(
						function success(results)
						{
							if (!results.success)
							{ //someone else wants to edit this note
								alert("Warning! Another user tries to edit this note. Your update may be replaced by later revision(s).");
								$interval.cancel(controller.page.itvCheck);
								controller.page.itvCheck = null;
							}
						},
						function error(errors)
						{
							console.log(errors);
						});
				}, 10000); //check for new edit every 10 seconds
			}
		};

		controller.removeEditingNoteFlag = function removeEditingNoteFlag()
		{
			if (controller.page.editingNoteId != null)
			{
				noteService.removeEditingNoteFlag(controller.page.editingNoteId, user.providerNo);
				$interval.cancel(controller.page.itvSet);
				$interval.cancel(controller.page.itvCheck);
				controller.page.itvSet = null;
				controller.page.itvCheck = null;
				controller.page.editingNoteId = null;
			}
		};


		controller.searchTemplates = function searchTemplates(term)
		{
			var search = {
				name: term
			};

			return uxService.searchTemplates(search, 0, 25).then(
				function success(results)
				{
					var resp = [];
					for (var x = 0; x < results.templates.length; x++)
					{
						resp.push(
						{
							encounterTemplateName: results.templates[x].encounterTemplateName
						});
					}
					return resp;
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.insertTemplate = function insertTemplate(item, model, label)
		{
			
			uxService.getTemplate(
			{
				name: model
			}).then(
				function success(results)
				{
					if (results.templates !== null)
					{
						var template = results.templates[0];
						controller.page.encounterNote.note = controller.page.encounterNote.note + template.encounterTemplateValue;
						controller.options = {
							magicVal: ''
						};
					}

				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.displayWarning = function displayWarning(noteToEdit)
		{
			var modalInstance = $uibModal.open(
			{
				templateUrl: 'src/record/summary/saveWarning.jsp',
				controller: 'Record.Summary.SaveWarningController as saveWarningCtrl',
				backdrop: 'static',
				size: 'md',
				resolve:
				{
					saveSignNote: function()
					{
						return controller.saveSignNote;
					},
					cancelNoteEdit: function()
					{
						return controller.cancelNoteEdit;
					}
				}
			});

			// Might need to keep this to continue the original edit action
			modalInstance.result.then(
				function success(results)
				{
					console.log(results);
				},
				function error(errors)
				{
					console.log('Modal dismissed at: ' + new Date());
					console.log(errors);
				});
		};

		controller.searchIssues = function searchIssues(term)
		{
			console.log('SEARCHING FOR ISSUE: ', term);
			var search = {
				'term': term
			};
			return noteService.searchIssues(search, 0, 100).then(
				function success(results)
				{
					var resp = [];
					for (var x = 0; x < results.content.length; x++)
					{
						resp.push(
						{
							issueId: results.content[x].id,
							code: results.content[x].description + '(' + results.content[x].code + ')'
						});
					}
					if (results.total > results.content.length)
					{
						//warn user there's more results somehow?
					}
					return resp;
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.assignIssue = function assignIssue(item, model, label)
		{
			for (var x = 0; x < controller.page.assignedCMIssues.length; x++)
			{
				if (controller.page.assignedCMIssues[x].issue.id == model)
				{
					return;
				}
			}

			noteService.getIssue(model).then(
				function success(results)
				{
					var cmIssue = {
						acute: false,
						certain: false,
						issue: results,
						issue_id: item.issueId,
						major: false,
						resolved: false,
						unsaved: true
					};
					controller.page.assignedCMIssues.push(cmIssue);

					$scope.$broadcast('noteIssueAdded');
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.removeIssue = function removeIssue(i)
		{
			console.log('removed issue in record ctrl');
			i.unchecked = true;
			var newList = [];
			for (var x = 0; x < controller.page.assignedCMIssues.length; x++)
			{
				if (controller.page.assignedCMIssues[x].issue_id != i.issue_id)
				{
					newList.push(controller.page.assignedCMIssues[x]);
				}
			}
			controller.page.assignedCMIssues = newList;

			$scope.$broadcast('noteIssueRemoved');
		};

		// If inverse === false, return true if the given item is supposed to be shown outisde the 'more' dropdown on the medium view
		// If inverse === true, return the inverse of the above statement,
		controller.mediumNavItemFilter = function mediumNavItemFilter(inverse)
		{
			return function(item)
			{
				var labelsToShow = ['Details', 'Summary', 'Forms', 'Tickler', 'Health Tracker', 'Rx', 'Consultations'];
				var filterValue = $.inArray(item.label, labelsToShow) != -1;

				if (inverse === true)
				{
					return !filterValue;
				}

				return filterValue;
			};
		};

		controller.demographic.age = Juno.Common.Util.calcAge(controller.demographic.dobYear, controller.demographic.dobMonth, controller.demographic.dobDay);
		controller.init();
	}
]);

function toArray(obj)
{ //convert single object to array
	if (obj instanceof Array) return obj;
	if (obj == null) return [];
	return [obj];
}

function zero(n)
{
	if (n < 10) n = "0" + n;
	return n;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"), __webpack_require__(/*! moment */ "./node_modules/moment/moment.js")))

/***/ }),

/***/ "./src/record/summary/groupNotesController.js":
/*!****************************************************!*\
  !*** ./src/record/summary/groupNotesController.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Record.Summary').controller('Record.Summary.GroupNotesController', [

	'$scope',
	'$uibModal',
	'$uibModalInstance',
	'$stateParams',
	'$state',
	'$interval',
	'mod',
	'action',
	'user',
	'noteService',
	'securityService',
	'diseaseRegistryService',

	function(
		$scope,
		$uibModal,
		$uibModalInstance,
		$stateParams,
		$state,
		$interval,
		mod,
		action,
		user,
		noteService,
		securityService,
		diseaseRegistryService)
	{

		var controller = this;


		controller.page = {};
		controller.page.title = mod.displayName;
		controller.page.items = mod.summaryItem;
		controller.page.quickLists = [];
		
		//controller.action = action;
		controller.page.code = mod.summaryCode;

		controller.groupNotesForm = {
			assignedCMIssues: []
		};
		controller.groupNotesForm.encounterNote = {
			position: 1
		};


		//set hidden which can can move out of hidden to $scope values
		var now = new Date();
		controller.groupNotesForm.annotation_attrib = "anno" + now.getTime();


		//get access rights
		securityService.hasRight("_eChart", "u", $stateParams.demographicNo).then(
			function success(results)
			{
				controller.page.cannotChange = !results;
			},
			function error(errors)
			{
				console.log(errors);
			});

		diseaseRegistryService.getIssueQuickLists().then(
			function success(results)
			{
				console.log(results);
				controller.page.quickLists = results;
			},
			function error(errors)
			{
				console.log(errors);
			});

		controller.addDxItem = function addDxItem(item)
		{
			for (var x = 0; x < controller.groupNotesForm.assignedCMIssues.length; x++)
			{
				if (controller.groupNotesForm.assignedCMIssues[x].issue.code === item.code && controller.groupNotesForm.assignedCMIssues[x].issue.type === item.codingSystem)
				{
					return;
				}
			}

			diseaseRegistryService.findDxIssue(item.code, item.codingSystem).then(
				function success(results)
				{
					var cmIssue = {
						acute: false,
						certain: false,
						issue: results,
						issue_id: results.id,
						major: false,
						resolved: false,
						unsaved: true
					};
					controller.groupNotesForm.assignedCMIssues.push(cmIssue);
				},
				function error(errors)
				{
					console.log(errors);
				});


		};

		//disable click and keypress if user only has read-access
		controller.checkAction = function checkAction(event)
		{
			if (controller.page.cannotChange)
			{
				event.preventDefault();
				event.stopPropagation();
			}
		};

		displayIssueId = function displayIssueId(issueCode)
		{
			noteService.getIssueId(issueCode).then(
				function success(results)
				{
					controller.page.issueId = results.id;
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		displayIssueId(controller.page.code);

		displayGroupNote = function displayGroupNote(item, itemId)
		{
			if (controller.page.items[itemId].noteId != null)
			{
				noteService.getIssueNote(controller.page.items[itemId].noteId).then(
					function success(results)
					{
						//controller.master = angular.copy( "iNote----" +  JSON.stringify(iNote) );
						controller.groupNotesForm.encounterNote = results.encounterNote;
						controller.groupNotesForm.encounterNote.editorNames = mod.editorNames; // Get editor names. TODO: Add editor names to the object on the back end
						controller.groupNotesForm.groupNoteExt = results.groupNoteExt;
						controller.groupNotesForm.assignedCMIssues = results.assignedCMIssues;

						controller.groupNotesForm.assignedCMIssues = [];

						if (results.assignedCMIssues instanceof Array)
						{
							controller.groupNotesForm.assignedCMIssues = results.assignedCMIssues;
						}
						else
						{
							if (results.assignedCMIssues != null)
							{
								controller.groupNotesForm.assignedCMIssues.push(results.assignedCMIssues);
							}
						}

						action = itemId;
						controller.setAvailablePositions();

						controller.removeEditingNoteFlag();

						if (controller.groupNotesForm.encounterNote.position < 1)
						{
							controller.groupNotesForm.encounterNote.position = 1;
						}

					},
					function error(errors)
					{
						console.log(errors);
					});
			}
			else if (controller.page.items[itemId].type === "dx_reg")
			{
				controller.groupNotesForm.assignedCMIssues = [];
				var itemExtra = controller.page.items[itemId].extra;
				diseaseRegistryService.findDxIssue(itemExtra.code, itemExtra.codingSystem).then(
					function success(results)
					{
						var cmIssue = {
							acute: false,
							certain: false,
							issue: results,
							issue_id: results.issueId,
							major: false,
							resolved: false,
							unsaved: true
						};
						console.log("find like issue ", cmIssue, results);
						controller.groupNotesForm.assignedCMIssues.push(cmIssue);
						controller.groupNotesForm.encounterNote = {};
						controller.groupNotesForm.groupNoteExt = {};
						controller.groupNotesForm.encounterNote = {
							position: 1
						};
						action = itemId;
					},
					function error(errors)
					{
						console.log(errors);
					});
			}
		};

		//action is NULL when new , action is some id when not
		if (action != null)
		{
			displayGroupNote(controller.page.items, action);
		}
		else
		{
			//new entry
		}

		controller.setAvailablePositions = function setAvailablePositions()
		{
			controller.availablePositions = [];
			if (controller.page.items == null || controller.page.items.length == 0)
			{
				controller.availablePositions.push(1);
			}
			else
			{
				var x = 0;
				for (x = 0; x < controller.page.items.length; x++)
				{
					controller.availablePositions.push(x + 1);
				}
				if (action == null)
				{
					controller.availablePositions.push(x + 1);
				}
			}
		};

		controller.setAvailablePositions();

		controller.changeNote = function changeNote(item, itemId)
		{
			return displayGroupNote(item, itemId);
		};

		controller.saveGroupNotes = function saveGroupNotes()
		{
			if (controller.groupNotesForm.encounterNote.noteId == null)
			{
				controller.groupNotesForm.encounterNote.noteId = 0;
			}
			controller.groupNotesForm.encounterNote.cpp = true;
			controller.groupNotesForm.encounterNote.editable = true;
			controller.groupNotesForm.encounterNote.isSigned = true;
			controller.groupNotesForm.encounterNote.observationDate = new Date();
			controller.groupNotesForm.encounterNote.appointmentNo = $stateParams.appointmentNo; //TODO: make this dynamic so it changes on edit
			controller.groupNotesForm.encounterNote.encounterType = "";
			controller.groupNotesForm.encounterNote.encounterTime = "";
			controller.groupNotesForm.encounterNote.assignedIssues = controller.groupNotesForm.assignedCMIssues;
			controller.groupNotesForm.encounterNote.summaryCode = controller.page.code; //'ongoingconcerns';

			noteService.saveIssueNote($stateParams.demographicNo, controller.groupNotesForm).then(
				function success(results)
				{
					$uibModalInstance.dismiss('cancel');
					$state.transitionTo($state.current, $stateParams, {
						reload: true,
						inherit: false,
						notify: true
					});

				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.removeGroupNoteIssue = function removeGroupNoteIssue(i)
		{
			console.log('removing issue');
			i.unchecked = true;
			var newList = [];
			for (var x = 0; x < controller.groupNotesForm.assignedCMIssues.length; x++)
			{
				if (controller.groupNotesForm.assignedCMIssues[x].issue_id != i.issue_id)
				{
					newList.push(controller.groupNotesForm.assignedCMIssues[x]);
				}
			}
			controller.groupNotesForm.assignedCMIssues = newList;
			console.log('NEW LIST: ', newList);
		};

		/*
		 * handle concurrent note edit - EditingNoteFlag
		 */
		controller.doSetEditingNoteFlag = function doSetEditingNoteFlag()
		{
			noteService.setEditingNoteFlag(editingNoteId, user.providerNo).then(
				function success(results)
				{
					if (!results.success)
					{
						if (results.message == "Parameter error") alert("Parameter Error: noteUUID[" + editingNoteId + "] userId[" + user.providerNo + "]");
						else alert("Warning! Another user is editing this note now.");
					}
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.setEditingNoteFlag = function setEditingNoteFlag()
		{
			if (controller.groupNotesForm.encounterNote.uuid == null) return;

			controller.removeEditingNoteFlag(); //remove any previous flag actions
			editingNoteId = controller.groupNotesForm.encounterNote.uuid;

			itvSet = $interval(controller.doSetEditingNoteFlag(), 30000); //set flag every 5 min
			itvCheck = $interval(function()
			{
				noteService.checkEditNoteNew(editingNoteId, user.providerNo).then(
					function success(results)
					{
						if (!results.success)
						{ //someone else wants to edit this note
							alert("Warning! Another user tries to edit this note. Your update may be replaced by later revision(s).");

							//cancel 10sec check after 1st time warning when another user tries to edit this note
							$interval.cancel(itvCheck);
							itvCheck = null;
						}
					},
					function error(errors)
					{
						console.log(errors);
					});
			}, 10000); //check for new edit every 10 sec
		};

		controller.removeEditingNoteFlag = function removeEditingNoteFlag()
		{
			if (editingNoteId != null)
			{
				noteService.removeEditingNoteFlag(editingNoteId, user.providerNo);
				$interval.cancel(itvSet);
				$interval.cancel(itvCheck);
				itvSet = null;
				itvCheck = null;
				editingNoteId = null;
			}
		};


		controller.removeIssue = function removeIssue(i)
		{
			i.unchecked = true;
		};
		controller.restoreIssue = function restoreIssue(i)
		{
			i.unchecked = false;
		};

		controller.archiveGroupNotes = function archiveGroupNotes()
		{
			//controller.master = angular.copy(controller.groupNotesForm);
			controller.groupNotesForm.encounterNote.archived = true;
			controller.saveGroupNotes();
		};

		controller.cancel = function cancel()
		{
			$uibModalInstance.dismiss('cancel');
		};

		//temp load into pop-up
		controller.openRevisionHistory = function openRevisionHistory(encounterNote)
		{
			console.log(controller.groupNotesForm);
			var rnd = Math.round(Math.random() * 1000);
			win = "win" + rnd;
			var url = "../CaseManagementEntry.do?method=notehistory&noteId=" + encounterNote.noteId;
			window.open(url, win, "scrollbars=yes, location=no, width=647, height=600", "");
		};

		controller.searchIssues = function searchIssues(term)
		{
			var search = {
				'term': term
			};
			return noteService.searchIssues(search, 0, 100).then(
				function success(results)
				{
					var resp = [];
					for (var x = 0; x < results.content.length; x++)
					{
						resp.push({
							issueId: results.content[x].id,
							code: results.content[x].description + '(' + results.content[x].code + ')'
						});
					}
					if (results.total > results.content.length)
					{
						//warn user there's more results somehow?
					}
					return resp;
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.assignIssue = function assignIssue(item, model, label)
		{
			for (var x = 0; x < controller.groupNotesForm.assignedCMIssues.length; x++)
			{
				if (controller.groupNotesForm.assignedCMIssues[x].issue.id == model)
				{
					return;
				}
			}

			noteService.getIssue(model).then(
				function success(results)
				{
					var cmIssue = {
						acute: false,
						certain: false,
						issue: results,
						issue_id: item.issueId,
						major: false,
						resolved: false,
						unsaved: true
					};
					controller.groupNotesForm.assignedCMIssues.push(cmIssue);
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.isSelected = function isSelected(item)
		{
			if (item.id == action)
			{
				return "group-note-selected";
			}
		};

		controller.addToDxRegistry = function addToDxRegistry(issue)
		{
			diseaseRegistryService.addToDxRegistry($stateParams.demographicNo, issue).then(
				function success(results)
				{
					console.log(results);
				},
				function error(errors)
				{
					console.log(errors);
				});

		};

	}
]);

/***/ }),

/***/ "./src/record/summary/module.js":
/*!**************************************!*\
  !*** ./src/record/summary/module.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('Record.Summary', ['Common', 'Common.Services']);

/***/ }),

/***/ "./src/record/summary/recordPrintController.js":
/*!*****************************************************!*\
  !*** ./src/record/summary/recordPrintController.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Record.Summary').controller('Record.Summary.RecordPrintController', [

	'$scope',
	'$uibModal',
	'$uibModalInstance',
	'$filter',
	'mod',
	'action',
	'$stateParams',
	'summaryService',

	function(
		$scope,
		$uibModal,
		$uibModalInstance,
		$filter,
		mod,
		action,
		$stateParams,
		summaryService)
	{

		var controller = this;

		controller.pageOptions = {};
		controller.pageOptions.printType = {};
		controller.pageOptions.dates = {};
		controller.page = {};
		controller.page.selectedWarning = false;

		/*
		 *If mod length > 0 than the user has selected a note. = Default to Note
		 *Other wise default to All
		 */
		var atleastOneSelected = false;
		for (var i = 0; i < mod.length; i++)
		{
			if (mod[i].isSelected)
			{
				atleastOneSelected = true;
				i = mod.length;
			}
		}

		if (atleastOneSelected)
		{
			console.log("mod len ", mod.length);
			controller.pageOptions.printType = 'selected';
		}
		else
		{
			console.log("printType = all");
			controller.pageOptions.printType = 'all';
		}

		controller.printToday = function printToday()
		{
			controller.pageOptions.printType = 'dates';
			var date = new Date();
			controller.pageOptions.dates.start = date;
			controller.pageOptions.dates.end = date;
		};

		controller.cancelPrint = function cancelPrint()
		{
			$uibModalInstance.dismiss('cancel');
		};


		controller.sendToPhr = function sendToPhr()
		{
			var queryString = "demographic_no=" + $stateParams.demographicNo;
			queryString = queryString + "&module=echart";

			if (controller.pageOptions.printType == 'all')
			{
				queryString = queryString + '&notes2print=ALL_NOTES';
			}
			else if (controller.pageOptions.printType == 'selected')
			{
				//get array
				var selectedList = [];
				for (var i = 0; i < mod.length; i++)
				{
					if (mod[i].isSelected)
					{
						selectedList.push(mod[i].noteId);
					}
				}
				queryString = queryString + '&notes2print=' + selectedList.join();
			}
			else if (controller.pageOptions.printType == 'dates')
			{
				queryString = queryString + '&notes2print=ALL_NOTES';
				queryString = queryString + '&startDate=' + controller.pageOptions.dates.start.getTime();
				queryString = queryString + '&endDate=' + controller.pageOptions.dates.end.getTime();
			}

			if (controller.pageOptions.cpp)
			{
				queryString = queryString + '&printCPP=true';
			}
			if (controller.pageOptions.cpp)
			{
				queryString = queryString + '&printRx=true';
			}
			if (controller.pageOptions.cpp)
			{
				queryString = queryString + '&printLabs=true';
			}
			console.log("QS" + queryString);

			if (controller.pageOptions.printType === 'selected' && selectedList.length == 0)
			{
				controller.page.selectedWarning = true;
				return;
			}
			else
			{
				controller.page.selectedWarning = false;
			}

			window.open('../SendToPhr.do?' + queryString, '_blank');
		};

		controller.print = function print()
		{
			var selectedList = [];
			for (var i = 0; i < mod.length; i++)
			{
				if (mod[i].isSelected)
				{
					selectedList.push(mod[i].noteId);
				}
			}

			if (controller.pageOptions.printType === 'selected' && selectedList.length == 0)
			{
				controller.page.selectedWarning = true;
				return;
			}
			else
			{
				controller.page.selectedWarning = false;
			}

			controller.pageOptions.selectedList = selectedList;
			var ops = encodeURIComponent(JSON.stringify(controller.pageOptions));
			window.open('../ws/rs/recordUX/' + $stateParams.demographicNo + '/print?printOps=' + ops, '_blank');



		};
	}
]);

/***/ }),

/***/ "./src/record/summary/saveWarningController.js":
/*!*****************************************************!*\
  !*** ./src/record/summary/saveWarningController.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Record.Summary').controller('Record.Summary.SaveWarningController', [

	'$rootScope',
	'$scope',
	'$uibModal',
	'$uibModalInstance',
	'saveSignNote',
	'cancelNoteEdit',

	function(
		$rootScope,
		$scope,
		$uibModal,
		$uibModalInstance,
		saveSignNote,
		cancelNoteEdit)
	{

		var controller = this;

		// Cancel warning and maintain note changes
		controller.cancel = function cancel()
		{
			$uibModalInstance.dismiss('cancel');
		};

		// Save changes to the note
		controller.save = function save()
		{
			if (angular.isFunction(saveSignNote))
			{
				saveSignNote();
			}
			$uibModalInstance.close(true);
		};

		// Clear changes to the note
		controller.clearChanges = function clearChanges()
		{
			if (angular.isFunction(cancelNoteEdit))
			{
				cancelNoteEdit();
			}
			$uibModalInstance.close(true);
		};
	}
]);

/***/ }),

/***/ "./src/record/summary/summaryController.js":
/*!*************************************************!*\
  !*** ./src/record/summary/summaryController.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {/*

    Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
    This software is published under the GPL GNU General Public License.
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    This software was written for the
    Department of Family Medicine
    McMaster University
    Hamilton
    Ontario, Canada

*/
angular.module('Record.Summary').controller('Record.Summary.SummaryController', [

	'$rootScope',
	'$scope',
	'$http',
	'$location',
	'$stateParams',
	'$state',
	'$filter',
	'$uibModal',
	'$interval',
	'user',
	'noteService',
	'summaryService',
	'securityService',

	function(
		$rootScope,
		$scope,
		$http,
		$location,
		$stateParams,
		$state,
		$filter,
		$uibModal,
		$interval,
		user,
		noteService,
		summaryService,
		securityService)
	{

		var controller = this;

		console.log("in summary Ctrl ", $stateParams);

		controller.page = {};
		controller.page.columnOne = {};
		controller.page.columnOne.modules = {};

		controller.page.columnThree = {};
		controller.page.columnThree.modules = {};
		controller.page.selectedNotes = [];

		controller.page.notes = {};
		controller.index = 0;
		controller.page.notes = {};
		controller.page.notes.notelist = [];
		controller.busy = false;
		controller.page.noteFilter = {};
		controller.page.currentFilter = 'none';
		controller.page.onlyNotes = false; // Filter for only showing encounter notes
		controller.page.onlyMine = false; // Filter for only showing notes the current user has created/edited

		controller.demographicNo = $stateParams.demographicNo;

		//get access rights
		securityService.hasRight("_eChart", "r", $stateParams.demographicNo).then(
			function success(results)
			{
				controller.page.canRead = results;
			},
			function error(errors)
			{
				console.log(errors);
			});
		securityService.hasRight("_eChart", "u", $stateParams.demographicNo).then(
			function success(results)
			{
				controller.page.cannotChange = !results;
			},
			function error(errors)
			{
				console.log(errors);
			});
		securityService.hasRight("_eChart", "w", $stateParams.demographicNo).then(
			function success(results)
			{
				controller.page.cannotAdd = !results;
			},
			function error(errors)
			{
				console.log(errors);
			});

		//disable click and keypress if user only has read-access
		controller.checkAction = function checkAction(event)
		{
			if (controller.page.cannotChange)
			{
				event.preventDefault();
				event.stopPropagation();
			}
		};

		controller.openRevisionHistory = function openRevisionHistory(note)
		{
			//var rnd = Math.round(Math.random() * 1000);
			win = "revision";
			var url = "../CaseManagementEntry.do?method=notehistory&noteId=" + note.noteId;
			window.open(url, win, "scrollbars=yes, location=no, width=647, height=600", "");
		};

		controller.openRx = function openRx(demoNo)
		{
			win = "Rx" + demoNo;
			var url = "../oscarRx/choosePatient.do?demographicNo=" + demoNo;
			window.open(url, win, "scrollbars=yes, location=no, width=900, height=600", "");
		};

		controller.openAllergies = function openAllergies(demoNo)
		{
			win = "Allergy" + demoNo;
			var url = "../oscarRx/showAllergy.do?demographicNo=" + demoNo;
			window.open(url, win, "scrollbars=yes, location=no, width=900, height=600", "");
			return false;
		};

		controller.openPreventions = function openPreventions(demoNo)
		{
			win = "prevention" + demoNo;
			var url = "../oscarPrevention/index.jsp?demographic_no=" + demoNo;
			window.open(url, win, "scrollbars=yes, location=no, width=900, height=600", "");
			return false;
		};

		controller.openAssessments = function openAssessments()
		{
			// open forms tab with "Library" list selected
			$state.go('record.forms', {formListId: 1});
		};

		//Note display functions
		controller.addMoreItems = function addMoreItems()
		{
			console.log(controller.busy);
			if (controller.busy) return;

			controller.busy = true;

			noteService.getNotesFrom($stateParams.demographicNo, controller.index, 20, controller.page.noteFilter).then(
				function success(results)
				{
					console.log('whats the data', angular.isUndefined(results.notelist), results.notelist);
					if (angular.isDefined(results.notelist))
					{
						//controller.page.notes = data;
						if (results.notelist instanceof Array)
						{
							console.log("ok its in an array", controller.busy);
							for (var i = 0; i < results.notelist.length; i++)
							{
								controller.page.notes.notelist.push(results.notelist[i]);
							}
						}
						else
						{
							controller.page.notes.notelist.push(results.notelist);
						}
						controller.index = controller.page.notes.notelist.length;
					}
					controller.busy = false;
				},
				function error(errors)
				{
					console.log(errors);
					controller.error = errors;
					controller.busy = false;
				}
			);

		};

		controller.addMoreItems();

		controller.editNote = function editNote(note)
		{
			$rootScope.$emit('loadNoteForEdit', note);
		};

		// Call the findGroupNote function and search for the given note, if found, open the groupNote editor
		controller.editGroupNote = function editGroupNote(note)
		{
			var obj = controller.findGroupNote(note);

			if (obj !== null)
			{
				obj.module.editorNames = note.editorNames;
				controller.gotoState(obj.note, obj.module, obj.note.id);
				return;
			}
		};

		// There is probably a better way of doing this
		controller.findGroupNote = function findGroupNote(note)
		{
			var moduleList = controller.page.columnOne.modules;
			for (var i = 0; i < moduleList.length; i++)
			{

				var summaryItems = moduleList[i].summaryItem;
				for (var k = 0; k < summaryItems.length; k++)
				{
					if (summaryItems[k].noteId === note.noteId)
					{
						return {
							note: summaryItems[k],
							module: moduleList[i]
						};
					}
				}
			}
			return null;
		};

		controller.page.currentEditNote = {};

		controller.isNoteBeingEdited = function isNoteBeingEdited(note)
		{

			if (note.uuid === controller.page.currentEditNote.uuid && note.uuid !== null)
			{
				return true;
			}

			return false;
		};

		$rootScope.$on('currentlyEditingNote', function(event, data)
		{
			controller.page.currentEditNote = data;
		});

		// TODO
		$rootScope.$on('stopEditingNote', function()
		{
			controller.page.currentEditNote = {};
		});

		$rootScope.$on('noteSaved', function(event, data)
		{
			console.log('new data coming in', data);
			var noteFound = false;
			for (var notecount = 0; notecount < controller.page.notes.notelist.length; notecount++)
			{
				if (data.uuid == controller.page.notes.notelist[notecount].uuid)
				{
					console.log('uuid ' + data.uuid + ' notecount ' + notecount, data, controller.page.notes.notelist[notecount]);
					controller.page.notes.notelist[notecount] = data;
					noteFound = true;
					break;
				}
			}

			if (noteFound == false)
			{
				controller.page.notes.notelist.unshift(data);
			}
			controller.index = controller.page.notes.notelist.length;
		});

		// Check if note regular note, if not, we must either display the group note edit window or have no edit option
		controller.isRegularNote = function isRegularNote(note)
		{
			if (note.document || note.rxAnnotation || note.eformData || note.encounterForm || note.invoice || note.ticklerNote || note.cpp)
			{
				return false;
			}

			return true;
		};

		//Note display functions
		controller.setColor = function setColor(note)
		{
			if (note.eformData)
			{
				return {
					'border-left-color': '#DFF0D8',
				};
			}
			else if (note.document)
			{
				return {
					'border-left-color': '#617CB2',
				};
			}
			else if (note.rxAnnotation)
			{
				return {
					'border-left-color': '#D3D3D3',
				};
			}
			else if (note.encounterForm)
			{
				return {
					'border-left-color': '#BCAD75',
				};
			}
			else if (note.invoice)
			{
				return {
					'border-left-color': '##FF7272',
				};
			}
			else if (note.ticklerNote)
			{
				return {
					'border-left-color': '#FFA96F',
				};
			}
			else if (note.cpp)
			{
				return {
					'border-left-color': '#9B8166',
				};
			}
		};

		controller.showNoteHeader = function showNoteHeader(note)
		{
			if (controller.page.onlyNotes)
			{
				if (note.document || note.rxAnnotation || note.eformData || note.encounterForm || note.invoice || note.ticklerNote || note.cpp)
				{
					return false;
				}
			}
			return true;
		};

		controller.showNote = function showNote(note)
		{
			if (controller.page.onlyNotes)
			{
				if (note.document || note.rxAnnotation || note.eformData || note.encounterForm || note.invoice || note.ticklerNote || note.cpp)
				{
					return false;
				}
			}

			if(controller.page.onlyMine)
			{
				// Hide note if the current user is not in the list of editors.
				// TODO: Decide later if we want to filter based on this rather than the author alone
				// if (!Juno.Common.Util.isInArray(user.formattedName, note.editorNames))
				// 	return false;

				// Hide the note if the current user's provder number does not match that of the note author
				if (user.providerNo !== note.providerNo)
					return false;
			}
			return !note.deleted;
		};

		controller.getNoteHeader = function firstLine(noteObj)
		{
			return  noteObj.note.trim().split('\n')[0]; // First line of the note text, split by newline
		};

		controller.trackerUrl = "";

		controller.getTrackerUrl = function getTrackerUrl(demographicNo)
		{
			controller.trackerUrl = '../oscarEncounter/oscarMeasurements/HealthTrackerPage.jspf?template=tracker&demographic_no=' + demographicNo + '&numEle=4&tracker=slim';
		};

		controller.toggleList = function toggleList(mod)
		{

			// If all the items are displayed, reset displaySize to 5 (min), else, show all the items
			if (mod.displaySize >= mod.summaryItem.length)
			{
				mod.displaySize = 5;
			}
			else
			{
				mod.displaySize = mod.summaryItem.length;
			}
		};

		controller.showMoreItems = function showMoreItems(mod)
		{

			if (!angular.isDefined(mod.summaryItem))
			{
				return false;
			}

			if (mod.summaryItem.length == 0)
			{
				return false;
			}

			return true;
		};

		// Return true if a given section is expanded, otherwise return false
		controller.isSectionExpanded = function isSectionExpanded(mod)
		{
			if (mod.displaySize > 5)
			{
				return true;
			}

			return false;
		};

		// Return true if a given section is empty, otherwise return false
		controller.isSectionEmpty = function isSectionEmpty(mod)
		{
			if (mod.summaryItem.length <= 5)
			{
				return true;
			}

			return false;
		};

		// Returns true if the given note is an unsigned encounter note
		controller.isUnsignedEncounterNote = function isUnsignedEncounterNote(note)
		{
			return (!note.isSigned && !note.cpp && !note.document && !note.ticklerNote && !note.eformData);
		};

		// controller.showMoreItemsSymbol = function(mod)
		// {
		// 	if (!angular.isDefined(mod.summaryItem))
		// 	{
		// 		return "";
		// 	}

		// 	if ((mod.displaySize < mod.summaryItem.length) && mod.displaySize == initialDisplayLimit)
		// 	{
		// 		return "glyphicon glyphicon-chevron-down hand-hover pull-right";
		// 	}
		// 	else if ((mod.displaySize == mod.summaryItem.length) && mod.displaySize != initialDisplayLimit)
		// 	{
		// 		return "glyphicon glyphicon-chevron-up hand-hover pull-right";
		// 	}
		// 	else if (mod.summaryItem.length <= initialDisplayLimit)
		// 	{
		// 		return "glyphicon glyphicon-chevron-down glyphicon-chevron-down-disabled pull-right";
		// 	}
		// 	else
		// 	{
		// 		return "";
		// 	}

		// 	if (controller.isSectionExpanded(mod))
		// 	{
		// 		return "glyphicon glyphicon-chevron-up hand-hover pull-right";
		// 	}

		// 	return "glyphicon glyphicon-chevron-down hand-hover pull-right";

		// };

		function getLeftItems()
		{
			summaryService.getSummaryHeaders($stateParams.demographicNo, 'left').then(
				function success(results)
				{
					console.log("left", results);
					controller.page.columnOne.modules = results;
					fillItems(controller.page.columnOne.modules);
				},
				function error(errors)
				{
					console.log(errors);
					controller.error = errors;
				});
		}

		getLeftItems();


		function getRightItems()
		{
			summaryService.getSummaryHeaders($stateParams.demographicNo, 'right').then(
				function success(results)
				{
					console.log("right", results);
					controller.page.columnThree.modules = results;
					fillItems(controller.page.columnThree.modules);
				},
				function error(errors)
				{
					console.log(errors);
					controller.error = errors;
				});
		}

		getRightItems();

		var summaryLists = {};

		function fillItems(itemsToFill)
		{

			for (var i = 0; i < itemsToFill.length; i++)
			{
				summaryLists[itemsToFill[i].summaryCode] = itemsToFill[i];

				summaryService.getFullSummary($stateParams.demographicNo, itemsToFill[i].summaryCode).then(
					function success(results)
					{
						if (angular.isDefined(results.summaryItem))
						{
							if (results.summaryItem instanceof Array)
							{
								summaryLists[results.summaryCode].summaryItem = results.summaryItem;
							}
							else
							{
								summaryLists[results.summaryCode].summaryItem = [results.summaryItem];
							}
						}
					},
					function error(errors)
					{
						console.log(errors);
					});
			}
		}


		controller.editGroupedNotes = function editGroupedNotes(size, mod, action)
		{

			var modalInstance = $uibModal.open(
			{
				templateUrl: 'src/record/summary/groupNotes.jsp',
				controller: 'Record.Summary.GroupNotesController as groupNotesCtrl',
				backdrop: 'static',
				windowClass: 'notesModal',
				size: size,
				resolve:
				{
					mod: function()
					{
						return mod;
					},
					action: function()
					{
						return action;
					},
					user: function()
					{
						return user;
					}
				}
			});

			modalInstance.result.then(
				function success(results)
				{
					console.log(results);
				},
				function error(errors)
				{
					if (editingNoteId != null)
					{
						noteService.removeEditingNoteFlag(editingNoteId, user.providerNo);
						$interval.cancel(itvSet);
						itvSet = null;
						$interval.cancel(itvCheck);
						itvCheck = null;
						editingNoteId = null;
					}
					console.log('Modal dismissed at: ' + new Date());
					console.log(errors);
				});

			console.log($('#myModal'));
		};


		controller.gotoState = function gotoState(item, mod, itemId)
		{
			console.log('ITEM: ', item);
			console.log('MOD: ', mod);

			if (item == "add")
			{
				controller.editGroupedNotes('md', mod, null);

			}
			else if (item.action == 'add' && item.type == 'dx_reg')
			{

				controller.editGroupedNotes('lg', mod, itemId);

			}
			else if (item.type == 'lab' || item.type == 'document' || item.type == 'rx' || item.type == 'allergy' || item.type == 'prevention' || item.type == 'dsguideline')
			{

				if (item.type == 'rx')
				{
					win = "Rx" + $stateParams.demographicNo;
				}
				else if (item.type == 'allergy')
				{
					win = "Allergy" + $stateParams.demographicNo;
				}
				else if (item.type == 'prevention')
				{
					win = "prevention" + $stateParams.demographicNo;
				}
				else
				{
					//item.type == 'lab' || item.type == 'document'
					//var rnd = Math.round(Math.random() * 1000);
					win = "win_item.type_";
				}

				window.open(item.action, win, "scrollbars=yes, location=no, width=900, height=600", "");
				return false;
			}
			else if (item.action == 'action')
			{
				controller.editGroupedNotes('lg', mod, itemId);

			}
			else
			{
				$state.transitionTo(item.action,
				{
					demographicNo: $stateParams.demographicNo,
					type: item.type,
					id: item.id
				},
				{
					location: 'replace',
					notify: true
				});
			}

		};

		controller.viewEform = function viewEform(eFormId)
		{
			$state.transitionTo('record.forms.view',
				{
					demographicNo: $stateParams.demographicNo,
					type: 'eform',
					id: eFormId
				},
				{
					location: 'replace',
					notify: true
				});
		};
		controller.viewDocument = function viewDocument(documentId)
		{
			// get only document summary items
			let itemArray = summaryLists['incoming'].summaryItem;
			let item = null;

			// find the summary item that matches the document id
			for (let i=0; i < itemArray.length; i++)
			{
				if(itemArray[i].id === documentId) {
					item = itemArray[i];
					break;
				}
			}

			// if we found a matching document, open it
			if(item != null) {
				controller.gotoState(item);
			}
			else
			{
				console.error("item not linked to valid document id:" + documentId);
			}
		};


		controller.showPrintModal = function showPrintModal(mod, action)
		{
			var size = 'lg';
			var modalInstance = $uibModal.open(
			{
				templateUrl: 'src/record/print.jsp',
				controller: 'Record.Summary.RecordPrintController as recordPrintCtrl',
				backdrop: 'static',
				size: size,
				resolve:
				{
					mod: function()
					{
						return mod;
					},

					action: function()
					{
						return action;
					}
				}
			});

			modalInstance.result.then(
				function success(results)
				{
					console.log(results);

				},
				function error(errors)
				{
					console.log('Modal dismissed at: ' + new Date());
					console.log(errors);
				});
		};

		// Toggle whether the note is selected for printing
		controller.toggleIsSelectedForPrint = function toggleIsSelectedForPrint(note)
		{
			note.isSelected = !note.isSelected;
		};

	}
]);


var itvSet = null;
var itvCheck = null;
var editingNoteId = null;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/record/tracker/module.js":
/*!**************************************!*\
  !*** ./src/record/tracker/module.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('Record.Tracker', ['Common', 'Common.Services']);

/***/ }),

/***/ "./src/record/tracker/trackerController.js":
/*!*************************************************!*\
  !*** ./src/record/tracker/trackerController.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*

    Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
    This software is published under the GPL GNU General Public License.
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    This software was written for the
    Department of Family Medicine
    McMaster University
    Hamilton
    Ontario, Canada

*/

angular.module('Record.Tracker').controller('Record.Tracker.TrackerController', [

	'$rootScope',
	'$scope',
	'$http',
	'$location',
	'$stateParams',
	'$state',
	'$timeout',
	'demographicService',
	'noteService',
	'uxService',

	function(
		$rootScope,
		$scope,
		$http,
		$location,
		$stateParams,
		$state,
		$timeout,
		demographicService,
		noteService,
		uxService)
	{

		var controller = this;
		controller.getTrackerUrl = function getTrackerUrl()
		{

			url = '../oscarEncounter/oscarMeasurements/HealthTrackerPage.jspf?template=tracker&demographic_no=' + $stateParams.demographicNo;

			return url;

		};

		controller.resizeIframe = function resizeIframe(iframe)
		{

			var h = iframe.contentWindow.document.body.scrollHeight;
			if (h > 0)
			{
				iframe.height = h + "px";
				//alert("h > 0");
			}
			//alert("h" + h);
		};
	}
]);

/***/ }),

/***/ "./src/report/module.js":
/*!******************************!*\
  !*** ./src/report/module.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('Report', ['Common', 'Common.Services']);

/***/ }),

/***/ "./src/report/reportBadAppointmentSheetController.js":
/*!***********************************************************!*\
  !*** ./src/report/reportBadAppointmentSheetController.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Report').controller('Report.ReportBadAppointmentSheetController', [

	'$scope',
	'$log',
	'providerService',
	'$filter',

	function(
		$scope,
		$log,
		providerService,
		$filter)
	{

		var controller = this;

		controller.params = {
			providerNo: '',
			startDate: new Date()
		};

		controller.searchProviders = function searchProviders(val)
		{
			var search = {
				searchTerm: val,
				active: true
			};
			return providerService.searchProviders(search, 0, 10).then(
				function success(results)
				{
					var resp = [];
					for (var x = 0; x < results.length; x++)
					{
						resp.push(
						{
							providerNo: results[x].providerNo,
							name: results[x].firstName + ' ' + results[x].lastName
						});
					}
					return resp;
				},
				function error(errors)
				{
					console.log(errors);
				});
		};
		controller.updateProviderNo = function updateProviderNo(item, model, label)
		{
			controller.params.providerNo = model;
			controller.params.name = label;
		};

		controller.generateReport = function generateReport()
		{
			var p = controller.params;
			var startDate = $filter('date')(p.startDate, 'yyyy-MM-dd');

			var url = '../report/reportapptsheet.jsp?dsmode=all&provider_no=' + p.providerNo + '&sdate=' + startDate;
			window.open(url, 'report_badApptSheet', 'height=900,width=700');
		};
	}
]);

/***/ }),

/***/ "./src/report/reportDaySheetController.js":
/*!************************************************!*\
  !*** ./src/report/reportDaySheetController.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Report').controller('Report.ReportDaySheetController', [

	'$scope',
	'$log',
	'$filter',
	'providerService',

	function(
		$scope,
		$log,
		$filter,
		providerService)
	{

		var controller = this;

		controller.params = {
			providerNo: '',
			type: '',
			startDate: new Date(),
			endDate: new Date(),
			startTime: null,
			endTime: null
		};

		controller.searchProviders = function searchProviders(val)
		{
			var search = {
				searchTerm: val,
				active: true
			};
			return providerService.searchProviders(search, 0, 10).then(
				function success(results)
				{
					var resp = [];
					for (var x = 0; x < results.length; x++)
					{
						resp.push(
						{
							providerNo: results[x].providerNo,
							name: results[x].firstName + ' ' + results[x].lastName
						});
					}
					return resp;
				},
				function error(errors)
				{
					console.log(errors);
				});
		};
		controller.updateProviderNo = function updateProviderNo(item, model, label)
		{
			controller.params.providerNo = model;
			controller.data.providerNo = label;
		};

		controller.generateReport = function generateReport()
		{
			var p = controller.params;
			if (p.type === 'all' || p.type === 'all-nr')
			{
				var startDate = $filter('date')(p.startDate, 'yyyy-MM-dd');
				var endDate = $filter('date')(p.endDate, 'yyyy-MM-dd');

				var startTime = $filter('date')(p.startTime, 'HH:mm');
				var endTime = $filter('date')(p.endTime, 'HH:mm');

				var url = '../report/reportdaysheet.jsp?dsmode=all&provider_no=' + (p.providerNo === '' ? '*' : p.providerNo) + '&sdate=' + startDate + '&edate=' + endDate + '&sTime=' + startTime + '&eTime=' + endTime;

				if (p.type === 'all-nr')
				{
					url += '&rosteredStatus=true';
				}

				window.open(url, 'report_daysheet', 'height=900,width=700');
			}

			if (p.type === 'new')
			{
				var startDate = $filter('date')(p.startDate, 'yyyy-MM-dd');
				var url = '../report/reportdaysheet.jsp?dsmode=new&provider_no=' + (p.providerNo === '' ? '*' : p.providerNo) + '&sdate=' + startDate;
				window.open(url, 'report_daysheet', 'height=900,width=700');
			}
			if (p.type === 'lab')
			{
				var startDate = $filter('date')(p.startDate, 'yyyy-MM-dd');
				var url = '../report/printLabDaySheetAction.do?xmlStyle=labDaySheet.xml&input_date=' + startDate;
				window.open(url, 'report_daysheet', 'height=900,width=700');

			}
			if (p.type === 'billing')
			{
				var startDate = $filter('date')(p.startDate, 'yyyy-MM-dd');
				var url = '../report/printLabDaySheetAction.do?xmlStyle=billDaySheet.xml&input_date=' + startDate;
				window.open(url, 'report_daysheet', 'height=900,width=700');
			}
			if (p.type === 'tab')
			{
				var startDate = $filter('date')(p.startDate, 'yyyy-MM-dd');
				var url = '../report/tabulardaysheetreport.jsp?provider_no=' + (p.providerNo === '' ? '*' : p.providerNo) + '&sdate=' + startDate;
				window.open(url, 'report_daysheet', 'height=900,width=700');
			}
		};

		controller.reset = function reset()
		{
			controller.params = {
				providerNo: '',
				type: '',
				startDate: new Date(),
				endDate: new Date(),
				startTime: null,
				endTime: null
			};
		};
	}
]);

/***/ }),

/***/ "./src/report/reportEdbListController.js":
/*!***********************************************!*\
  !*** ./src/report/reportEdbListController.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Report').controller('Report.ReportEdbListController', [

	'$scope',
	'$log',
	'$filter',

	function(
		$scope,
		$log,
		$filter)
	{

		var controller = this;

		controller.params = {
			startDate: new Date(),
			endDate: new Date(),
			version: '',
			region: 'ON'
		}; //todo: grab region from somewhere

		controller.generateReport = function generateReport()
		{
			$log.log('run edb report');
			var startDate = $filter('date')(controller.params.startDate, 'yyyy-MM-dd');
			var endDate = $filter('date')(controller.params.endDate, 'yyyy-MM-dd');

			var url = '';

			if (controller.params.region === 'BC')
			{
				if (controller.params.version == '05')
				{
					url = '../report/reportbcedblist2007.jsp?startDate=' + startDate + '&endDate=' + endDate;
				}
				else
				{
					url = '../report/reportbcedblist.jsp?startDate=' + startDate + '&endDate=' + endDate;
				}
			}

			if (controller.params.region === 'ON')
			{
				if (controller.params.version == '05')
				{
					url = '../report/reportonedblist.jsp?startDate=' + startDate + '&endDate=' + endDate;
				}
				else
				{
					url = '../report/reportnewedblist.jsp?startDate=' + startDate + '&endDate=' + endDate;
				}
			}


			window.open(url, 'report_edb', 'height=900,width=700');

		};
	}
]);

/***/ }),

/***/ "./src/report/reportFollowUpIntakeController.js":
/*!******************************************************!*\
  !*** ./src/report/reportFollowUpIntakeController.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Report').controller('Report.ReportFollowUpIntakeController', [

	'$scope',
	'$log',
	'$filter',

	function(
		$scope,
		$log,
		$filter)
	{

		var controller = this;

		controller.params = {
			startDate: new Date(),
			endDate: new Date(),
			includePastForms: true
		};

		controller.generateReport = function generateReport()
		{
			$log.log('run follow up intake report');
			var startDate = $filter('date')(controller.params.startDate, 'yyyy-MM-dd');
			var endDate = $filter('date')(controller.params.endDate, 'yyyy-MM-dd');

			var url = '../PMmodule/GenericIntake/Report.do?method=report&type=indepth&startDate=' + startDate + '&endDate=' + endDate + '&includePast=' + controller.params.includePastForms;
			window.open(url, 'report_followup_intake', 'height=900,width=700');

		};
	}
]);

/***/ }),

/***/ "./src/report/reportNoShowAppointmentSheetController.js":
/*!**************************************************************!*\
  !*** ./src/report/reportNoShowAppointmentSheetController.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Report').controller('Report.ReportNoShowAppointmentSheetController', [

	'$scope',
	'$log',
	'$filter',
	'providerService',

	function(
		$scope,
		$log,
		$filter,
		providerService)
	{

		var controller = this;

		controller.params = {
			providerNo: '',
			startDate: new Date()
		};

		controller.searchProviders = function searchProviders(val)
		{
			var search = {
				searchTerm: val,
				active: true
			};
			return providerService.searchProviders(search, 0, 10).then(
				function success(results)
				{
					var resp = [];
					for (var x = 0; x < results.length; x++)
					{
						resp.push(
						{
							providerNo: results[x].providerNo,
							name: results[x].firstName + ' ' + results[x].lastName
						});
					}
					return resp;
				},
				function error(errors)
				{
					console.log(errors);
				});
		};
		controller.updateProviderNo = function updateProviderNo(item, model, label)
		{
			controller.params.providerNo = model;
			controller.params.name = label;
		};

		controller.generateReport = function generateReport()
		{
			var p = controller.params;
			var startDate = $filter('date')(p.startDate, 'yyyy-MM-dd');
			var url = '../report/reportnoshowapptlist.jsp?provider_no=' + p.providerNo + '&sdate=' + startDate;
			window.open(url, 'report_noShowApptSheet', 'height=900,width=700');
		};
	}
]);

/***/ }),

/***/ "./src/report/reportOldPatientsController.js":
/*!***************************************************!*\
  !*** ./src/report/reportOldPatientsController.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Report').controller('Report.ReportOldPatientsController', [

	'$scope',
	'$log',
	'providerService',

	function(
		$scope,
		$log,
		providerService)
	{

		var controller = this;

		controller.params = {
			providerNo: '',
			age: 65
		};

		controller.searchProviders = function searchProviders(val)
		{
			var search = {
				searchTerm: val,
				active: true
			};
			return providerService.searchProviders(search, 0, 10).then(
				function success(response)
				{
					var resp = [];
					for (var x = 0; x < response.length; x++)
					{
						resp.push(
						{
							providerNo: response[x].providerNo,
							name: response[x].firstName + ' ' + response[x].lastName
						});
					}
					return resp;
				},
				function error(errors)
				{
					console.log(errors);
				});
		};
		controller.updateProviderNo = function updateProviderNo(item, model, label)
		{
			controller.params.providerNo = model;
			controller.params.name = label;
		};

		controller.generateReport = function generateReport()
		{
			var p = controller.params;
			var url = '../report/reportpatientchartlistspecial.jsp?provider_no=' + (p.providerNo === '' ? '*' : p.providerNo) + '&age=' + p.age;
			window.open(url, 'report_oldpatients', 'height=900,width=700');
		};
	}
]);

/***/ }),

/***/ "./src/report/reportPatientChartListController.js":
/*!********************************************************!*\
  !*** ./src/report/reportPatientChartListController.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Report').controller('Report.ReportPatientChartListController', [

	'$scope',
	'$log',
	'providerService',

	function(
		$scope,
		$log,
		providerService)
	{

		var controller = this;

		controller.params = {};

		controller.searchProviders = function searchProviders(val)
		{
			var search = {
				searchTerm: val,
				active: true
			};
			return providerService.searchProviders(search, 0, 10).then(
				function success(results)
				{
					var resp = [];
					for (var x = 0; x < results.length; x++)
					{
						resp.push(
						{
							providerNo: results[x].providerNo,
							name: results[x].firstName + ' ' + results[x].lastName
						});
					}
					return resp;
				},
				function error(errors)
				{
					console.log(errors);
				});
		};
		controller.updateProviderNo = function updateProviderNo(item, model, label)
		{
			controller.params.providerNo = model;
			controller.params.name = label;
		};

		controller.generateReport = function generateReport()
		{
			var p = controller.params;
			if (!p.providerNo)
			{
				alert('Please enter a provider');
				return false;
			}
			var url = '../report/reportpatientchartlist.jsp?provider_no=' + p.providerNo;
			window.open(url, 'report_patientchartlist', 'height=900,width=700');
		};
	}
]);

/***/ }),

/***/ "./src/report/reportRegistrationIntakeController.js":
/*!**********************************************************!*\
  !*** ./src/report/reportRegistrationIntakeController.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Report').controller('Report.ReportRegistrationIntakeController', [

	'$scope',
	'$log',
	'$filter',

	function(
		$scope,
		$log,
		$filter)
	{

		var controller = this;

		controller.params = {
			startDate: new Date(),
			endDate: new Date(),
			includePastForms: true
		};

		controller.generateReport = function generateReport()
		{
			$log.log('run registration intake report');
			var startDate = $filter('date')(controller.params.startDate, 'yyyy-MM-dd');
			var endDate = $filter('date')(controller.params.endDate, 'yyyy-MM-dd');

			var url = '../PMmodule/GenericIntake/Report.do?method=report&type=quick&startDate=' + startDate + '&endDate=' + endDate + '&includePast=' + controller.params.includePastForms;
			window.open(url, 'report_registration_intake', 'height=900,width=700');

		};
	}
]);

/***/ }),

/***/ "./src/report/reportSHMentalHealthController.js":
/*!******************************************************!*\
  !*** ./src/report/reportSHMentalHealthController.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Report').controller('Report.ReportSHMentalHealthController', [

	'$scope',
	'$log',
	'$filter',

	function(
		$scope,
		$log,
		$filter)
	{
		var controller = this;

		controller.params = {
			startDate: new Date()
		};

		controller.generateReport = function generateReport()
		{
			$log.log('run sh mental health report');
			var startDate = $filter('date')(controller.params.startDate, 'yyyy-MM-dd');

			var url = '../PMmodule/StreetHealthIntakeReportAction.do?startDate=' + startDate;
			window.open(url, 'report_sh', 'height=900,width=700');

		};
	}
]);

/***/ }),

/***/ "./src/report/reportsController.js":
/*!*****************************************!*\
  !*** ./src/report/reportsController.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Figure out what to do with this. 
angular.module('oscarProviderViewModule').factory('ReportNavigation', [ '$rootScope', function($rootScope)
{
	return {
		location: '',

		load: function(msg)
		{
			this.location = msg;
		}
	};
}]);

angular.module('Report').controller('Report.ReportsController', [

	'$scope',
	'$state',
	'$filter',
	'$log',
	'ReportNavigation',

	function(
		$scope,
		$state,
		$filter,
		$log,
		ReportNavigation)
	{

		var controller = this;

		$scope.$emit('configureShowPatientList', false);

		controller.reports = [
			{
				name: 'Daysheets',
				templateUrl: 'src/report/report_daysheet.jsp'
			},
			{
				name: 'Active Patients',
				templateUrl: 'src/report/report_iframe.jsp',
				iframeUrl: '../report/reportactivepatientlist.jsp'
			},
			{
				name: 'Old Patients',
				templateUrl: 'src/report/report_oldPatients.jsp'
			},
			{
				name: 'Patient Chart List',
				templateUrl: 'src/report/report_patientChartList.jsp'
			},
			{
				name: 'EDB List',
				templateUrl: 'src/report/report_edb_list.jsp'
			},
			{
				name: 'Bad Appointments',
				templateUrl: 'src/report/report_badAppointments.jsp'
			},
			{
				name: 'No Show Appointments',
				templateUrl: 'src/report/report_noShowAppointments.jsp'
			},
			{
				name: 'Consultations',
				templateUrl: 'src/report/report_iframe.jsp',
				iframeUrl: '../oscarReport/ConsultationReport.jsp'
			},
			{
				name: 'Lab Requisitions',
				templateUrl: 'src/report/report_iframe.jsp',
				iframeUrl: '../oscarReport/LabReqReport.jsp'
			},
			{
				name: 'Preventions',
				templateUrl: 'src/report/report_iframe.jsp',
				iframeUrl: '../oscarPrevention/PreventionReporting.jsp'
			},
			{
				name: 'Injections',
				templateUrl: 'src/report/report_iframe.jsp',
				iframeUrl: '../oscarReport/InjectionReport2.jsp'
			},
			{
				name: 'Demographic Report Tool',
				templateUrl: 'src/report/report_iframe.jsp',
				iframeUrl: '../oscarReport/ReportDemographicReport.jsp'
			},
			{
				name: 'Patient Study List',
				templateUrl: 'src/report/report_iframe.jsp',
				iframeUrl: '../report/demographicstudyreport.jsp'
			},
			{
				name: 'Chronic Disease Management',
				templateUrl: 'src/report/report_iframe.jsp',
				iframeUrl: '../oscarReport/oscarMeasurements/SetupSelectCDMReport.do'
			},
			{
				name: 'Waiting List',
				templateUrl: 'src/report/report_iframe.jsp',
				iframeUrl: '../oscarWaitingList/SetupDisplayWaitingList.do?waitingListId='
			},
			{
				name: 'Forms',
				templateUrl: 'src/report/report_iframe.jsp',
				iframeUrl: '../report/reportFormRecord.jsp'
			},
			{
				name: 'Clinical',
				templateUrl: 'src/report/report_iframe.jsp',
				iframeUrl: '../report/ClinicalReports.jsp'
			},
			{
				name: 'SCBP demographic Report',
				templateUrl: 'src/report/report_iframe.jsp',
				iframeUrl: '../report/reportBCARDemo.jsp'
			},
			{
				name: 'Report By Template',
				templateUrl: 'src/report/report_iframe.jsp',
				iframeUrl: '../oscarReport/reportByTemplate/homePage.jsp'
			},
			{
				name: 'General Forms',
				group: 'CAISI',
				templateUrl: 'src/report/report_iframe.jsp',
				iframeUrl: '../PMmodule/ClientManager.do?method=getGeneralFormsReport'
			},
			{
				name: 'Registration Intake',
				group: 'CAISI',
				templateUrl: 'src/report/report_registration_intake.jsp'
			},
			{
				name: 'Follow-up Intake',
				group: 'CAISI',
				templateUrl: 'src/report/report_followup_intake.jsp'
			},
			{
				name: 'Activity Report',
				group: 'CAISI',
				templateUrl: 'src/report/report_iframe.jsp',
				iframeUrl: '../PMmodule/Reports/ProgramActivityReport.do'
			},
			{
				name: 'UCF Report',
				group: 'CAISI',
				templateUrl: 'src/report/report_iframe.jsp',
				iframeUrl: '../SurveyManager.do?method=reportForm'
			},
			{
				name: 'SH Mental Health Report',
				group: 'CAISI',
				templateUrl: 'src/report/report_sh_mental_health.jsp'
			},
			{
				name: 'OSIS Report',
				group: 'Public Health',
				templateUrl: 'src/report/report_iframe.jsp',
				iframeUrl: '../oscarReport/OSISReport.jsp'
			},
			{
				name: 'One Time Consult CDS Report',
				group: 'Public Health',
				templateUrl: 'src/report/report_iframe.jsp',
				iframeUrl: '../oscarReport/CDSOneTimeConsultReport.jsp'
			},

		];

		controller.init = function init()
		{
			controller.reportGroup = "";
			controller.reportGroups = controller.getReportGroups();
			controller.reportSidebar = ReportNavigation;
			controller.test = controller.reportSidebar.url;
		};

		controller.editDemographicSet = function editDemographicSet()
		{
			controller.selectReport(
			{
				name: 'Demographic Set Edit',
				templateUrl: 'src/report/report_iframe.jsp',
				iframeUrl: '../oscarReport/demographicSetEdit.jsp'
			});
		};

		controller.getReports = function getReports()
		{
			if (controller.reportGroup != null && controller.reportGroup.length > 0)
			{
				var filtered = $filter('filter')(controller.reports,
				{
					group: controller.reportGroup
				});
				return filtered;

			}
			return controller.reports;
		};

		controller.getReportGroups = function getReportGroups()
		{
			var groups = [
			{
				value: '',
				label: 'All Groups'
			}];
			var groupMap = {};

			for (var i = 0; i < controller.reports.length; i++)
			{
				if (controller.reports[i].group != null)
				{
					groupMap[controller.reports[i].group] = controller.reports[i].group;
				}
			}

			for (var key in groupMap)
			{
				groups.push(
				{
					value: key,
					label: key
				});
			}

			return groups;
		};

		controller.selectReport = function selectReport(report)
		{
			controller.currentReport = report;

			if (report.direct === true)
			{
				window.open(report.window.url, report.name, 'width=' + report.window.width + '&height=' + report.window.height);
			}
			else
			{
				ReportNavigation.load(report.templateUrl);
			}
		};


		// controller.selectReport(controller.reports[0]);

		// controller.openReportWindow = function openReportWindow(url, name)
		// {
		// 	window.open(url, name, 'height=900,width=700');
		// };
	}
]);

/***/ }),

/***/ "./src/schedule/appointmentAddController.js":
/*!**************************************************!*\
  !*** ./src/schedule/appointmentAddController.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Schedule').controller('Schedule.AppointmentAddController', [

	'$scope',
	'$filter',
	'$uibModalInstance',
	'$timeout',
	'demographicService',
	'demographicsService',
	'me',
	'providerService',
	'scheduleService',
	'apptDate',

	function(
		$scope,
		$filter,
		$uibModalInstance,
		$timeout,
		demographicService,
		demographicsService,
		me,
		providerService,
		scheduleService,
		apptDate)
	{

		var controller = this;

		controller.types = [];

		controller.urgencies = [
		{
			value: '',
			label: 'Normal'
		},
		{
			value: 'critical',
			label: 'Critical'
		}];

		controller.me = me;

		controller.appointment = {
			status: 't',
			appointmentDate: $filter('date')(apptDate, 'yyyy-MM-dd'),
			startTime: '09:00 AM',
			type: '',
			duration: 15,
			providerName: me.formattedName,
			providerNo: me.providerNo,
			reason: '',
			notes: '',
			location: '',
			resources: '',
			critical: ''
		};

		scheduleService.getTypes().then(
			function success(results)
			{
				controller.types = results.types;
				controller.types.unshift(
				{
					name: '',
					duration: 15,
					location: '',
					notes: '',
					reason: '',
					resources: ''
				});
				console.log(JSON.stringify(results));
			},
			function error(errors)
			{
				console.log(errors);
			});

		controller.selectType = function selectType()
		{
			var type = null;

			for (var x = 0; x < controller.types.length; x++)
			{
				if (controller.types[x].name == controller.appointment.type)
				{
					type = controller.types[x];
					break;
				}
			}
			if (type != null)
			{
				controller.appointment.duration = type.duration;
				controller.appointment.location = type.location;
				controller.appointment.notes = type.notes;
				controller.appointment.reason = type.reason;
				controller.appointment.resources = type.resources;

			}

		};

		controller.close = function close()
		{
			if (controller.needsUpdate)
			{
				if (confirm("You have unsaved changes, are you sure?"))
				{
					$uibModalInstance.close(false);
				}
			}
			else
			{
				$uibModalInstance.close(false);
			}

		};

		controller.validate = function validate()
		{
			var t = controller.appointment;

			controller.errors = [];

			if (t.demographic == null)
			{
				controller.errors.push('You must select a patient');
			}
			if (t.providerNo == null)
			{
				controller.errors.push('You must select a provider');
			}
			if (t.startTime == null || t.startTime.length == 0)
			{
				controller.errors.push('start time is required');
			}
			if (t.duration == null || t.duration.length == 0)
			{
				controller.errors.push('start time is required');
			}

			if (controller.errors.length > 0)
			{
				return false;
			}
			return true;
		};

		controller.save = function save()
		{
			controller.showErrors = true;
			if (!controller.validate())
			{
				return;
			}

			var x = {};
			x.status = controller.appointment.status;
			x.appointmentDate = controller.appointment.appointmentDate;
			x.startTime12hWithMedian = controller.appointment.startTime;
			x.type = controller.appointment.type;
			x.duration = controller.appointment.duration;
			x.providerNo = controller.appointment.providerNo;
			x.reason = controller.appointment.reason;
			x.notes = controller.appointment.notes;
			x.location = controller.appointment.location;
			x.resources = controller.appointment.resources;
			x.urgency = controller.appointment.critical;
			x.demographicNo = controller.appointment.demographicNo;

			// TODO: make sure this works with the updated backend service (response changed)
			console.log(JSON.stringify(x));
			scheduleService.addAppointment(x).then(
				function success(results)
				{
					$uibModalInstance.close(true);
				},
				function error(errors)
				{
					console.log(errors);
				});


		};


		controller.updateDemographicNo = function updateDemographicNo(item, model, label)
		{

			demographicService.getDemographic(model).then(
				function success(results)
				{
					controller.appointment.demographicNo = results.demographicNo;
					controller.appointment.demographicName = '';
					controller.appointment.demographic = results;

				},
				function error(errors)
				{
					console.log(errors);
				});

		};

		controller.searchPatients = function searchPatients(term)
		{
			var search = {
				type: 'Name',
				'term': term,
				active: true,
				integrator: false,
				outofdomain: true
			};
			return demographicsService.search(search, 0, 25).then(
				function(results)
				{
					var resp = [];
					for (var x = 0; x < results.content.length; x++)
					{
						resp.push(
						{
							demographicNo: results.content[x].demographicNo,
							name: results.content[x].lastName + ',' + results.content[x].firstName
						});
					}
					return resp;
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.searchProviders = function searchProviders(val)
		{
			var search = {
				searchTerm: val,
				active: true
			};
			return providerService.searchProviders(search, 0, 10).then(
				function success(results)
				{
					var resp = [];
					for (var x = 0; x < results.length; x++)
					{
						resp.push(
						{
							providerNo: results[x].providerNo,
							name: results[x].firstName + ' ' + results[x].lastName
						});
					}
					return resp;
				},
				function error(errors)
				{
					console.log(errors);
				});
		};


		controller.updateProviderNo = function updateProviderNo(item, model, label)
		{
			controller.appointment.providerNo = model;
			controller.appointment.providerName = label;
		};
	}
]);

/***/ }),

/***/ "./src/schedule/appointmentViewController.js":
/*!***************************************************!*\
  !*** ./src/schedule/appointmentViewController.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Schedule').controller('Schedule.AppointmentViewController', [

	'$scope',
	'$filter',
	'$uibModalInstance',
	'$timeout',
	'demographicService',
	'me',
	'providerService',
	'scheduleService',
	'appointment',
	'statusList',

	function(
		$scope,
		$filter,
		$uibModalInstance,
		$timeout,
		demographicService,
		me,
		providerService,
		scheduleService,
		appointment,
		statusList)
	{

		var controller = this;

		controller.me = me;
		controller.appointment = appointment;
		controller.statusList = statusList.content;
		controller.appointmentUpdate = {};

		controller.appointmentWriteAccess = false;

		controller.getStatus = function getStatus(status)
		{

			for (var x = 0; x < controller.statusList.length; x++)
			{
				console.log(JSON.stringify(controller.statusList[x]));
				if (controller.statusList[x].status == status)
				{
					return controller.statusList[x].description;
				}
			}
			return status;
		};

		controller.close = function close()
		{
			$uibModalInstance.close(false);
		};

		controller.deleteAppointment = function deleteAppointment()
		{
			if (confirm('Are you sure you want to delete this appointment?'))
			{
				scheduleService.deleteAppointment(controller.appointment.id).then(
					function success(results)
					{
						$uibModalInstance.close(true);
					},
					function error(errors)
					{
						console.log(errors);
					});
			}
		};

		controller.searchProviders = function searchProviders(val)
		{
			var search = {
				searchTerm: val,
				active: true
			};
			return providerService.searchProviders(search, 0, 10).then(
				function success(results)
				{
					var resp = [];
					for (var x = 0; x < results.length; x++)
					{
						resp.push(
						{
							providerNo: results[x].providerNo,
							name: results[x].firstName + ' ' + results[x].lastName
						});
					}
					return resp;
				},
				function error(errors)
				{
					console.log(errors);
				});
		};


		controller.updateProviderNo = function updateProviderNo(item, model, label)
		{
			controller.appointment.providerNo = model;
			controller.appointment.providerName = label;
		};


		controller.editProvider = function editProvider()
		{
			controller.showProviderFormControl = true;
			controller.appointmentUpdate.providerNo = controller.appointment.providerNo;
			controller.appointmentUpdate.providerName = controller.appointment.provider.lastName + "," + controller.appointment.provider.lastName;
		};

		controller.updateProvider = function updateProvider(item, model, label)
		{
			controller.needsUpdate = true;
			controller.appointment.providerNo = model;
			controller.appointment.providerName = label;
			controller.showProviderFormControl = false;
		};

		controller.cancelProviderUpdate = function cancelProviderUpdate()
		{
			controller.appointmentUpdate.providerNo = null;
			controller.appointmentUpdate.providerName = null;

			controller.showProviderFormControl = false;

		};

		controller.showAppointmentHistory = function showAppointmentHistory()
		{
			scheduleService.appointmentHistory(controller.appointment.demographicNo).then(
				function success(results)
				{
					alert(JSON.stringify(results));
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.noShowAppointment = function noShowAppointment()
		{
			scheduleService.noShowAppointment(controller.appointment.id).then(
				function success(results)
				{
					$uibModalInstance.close(true);
				},
				function error(errors)
				{
					console.log(errors);
				});

		};

		controller.cancelAppointment = function cancelAppointment()
		{
			scheduleService.cancelAppointment(controller.appointment.id).then(
				function success(results)
				{
					$uibModalInstance.close(true);
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

	}
]);

/***/ }),

/***/ "./src/schedule/eventController.js":
/*!*****************************************!*\
  !*** ./src/schedule/eventController.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(moment, $) {


//=========================================================================
// Calendar Event Controller
//=========================================================================/

angular.module('Schedule').controller('Schedule.EventController', [

		'$scope',
		'$q',
		'$timeout',
		'$state',
		'$uibModal',
		'$uibModalInstance',

		'errorsService',

		'demographicService',
		'securityService',
		'keyBinding',
		'focus',
		'type', 'parentScope', 'label', 'editMode', 'data',

	function (
		$scope, $q, $timeout, $state, $uibModal, $uibModalInstance,

		messagesFactory,

		demographicService,
		securityService,
		keyBinding,
		focus,
		type, parentScope, label, editMode, data
	)
{
	$scope.parentScope = parentScope;


	//=========================================================================
	// Access Control
	//=========================================================================/


	//=========================================================================
	// Local scope variables
	//=========================================================================/

	$scope.label = label;
	$scope.editMode = editMode;

	$scope.keyBinding = keyBinding;
	$scope.eventUuid = null;

	$scope.schedule = data.schedule;

	$scope.eventData = {
		startDate: null,
		startTime: null,
		endDate: null,
		endTime: null,
		reason: null,
		notes: null
	};

	$scope.timeInterval = data.timeInterval;

	$scope.lastEventLength = null;

	$scope.patientTypeahead = {};
	$scope.autocompleteValues = {};

	$scope.activeTemplateEvents = [];

	$scope.eventStatuses = $scope.parentScope.eventStatuses;
	$scope.eventStatusOptions = [];
	$scope.selectedEventStatus = null;
	$scope.defaultEventStatus = null;

	$scope.selectedSiteName = null;

	$scope.timepickerFormat = "h:mm A";

	$scope.fieldValueMapping = {
		startDate: 'Start Date',
		startTime: 'Start Time',
		endDate: 'End Date',
		endTime: 'End Time'
	};
	$scope.displayMessages = messagesFactory.factory();

	$scope.initialized = false;
	$scope.working = false;

	$scope.demographicModel = {
		demographicNo: null,
		fullName: null,
		hasPhoto: true,
		patientPhotoUrl: '/imageRenderingServlet?source=local_client&clientId=0',
		data: {
			birthDate: null,
			healthNumber: null,
			ontarioVersionCode: null,
			phoneNumberPrimary: null
		},
		clear: function clear()
		{
			this.demographicNo = null;
			this.fullName = null;
			this.patientPhotoUrl = '/imageRenderingServlet?source=local_client&clientId=0';
			this.data.birthDate = null;
			this.data.healthNumber = null;
			this.data.ontarioVersionCode = null;
			this.data.phoneNumberPrimary = null;
		},
		fillData: function fillData(data)
		{
			this.demographicNo = data.demographicNo;
			this.fullName = Juno.Common.Util.formatName(data.firstName, data.lastName);
			this.patientPhotoUrl = '/imageRenderingServlet?source=local_client&clientId=' + (data.demographicNo? data.demographicNo: 0);

			var dateOfBirth = null;
			if(Juno.Common.Util.exists(data.dob))
			{
				// XXX: Perhaps put this in util?  Is this date format common for juno?
				dateOfBirth = moment(data.dob, "YYYY-MM-DDTHH:mm:ss.SSS+ZZZZ", false);
			}
			else
			{
				dateOfBirth = Juno.Common.Util.getDateMomentFromComponents(
					data.dobYear, data.dobMonth, data.dobDay);
			}
			this.data.birthDate = Juno.Common.Util.formatMomentDate(dateOfBirth);


			this.data.healthNumber = data.hin;
			// XXX: no version code when loaded from autocomplete?  Does that matter?
			this.data.ontarioVersionCode = data.ver;
			this.data.phoneNumberPrimary = data.phone;
		},
		uploadPhoto: function uploadPhoto(file){}
	};

	//=========================================================================
	// Init
	//=========================================================================/

	$scope.init = function init()
	{
		if (!securityService.hasPermission('scheduling_create'))
		{
			$timeout(function ()
			{
				$scope.cancel();
			});
		}

		$scope.demographicModel.clear();

		var momentStart = data.startTime;
		var momentEnd = data.endTime;

		$scope.eventData.startTime = Juno.Common.Util.formatMomentTime(momentStart, $scope.timepickerFormat);
		$scope.eventData.endTime = Juno.Common.Util.formatMomentTime(momentEnd, $scope.timepickerFormat);
		$scope.eventData.startDate = Juno.Common.Util.formatMomentDate(momentStart);
		$scope.eventData.endDate = Juno.Common.Util.formatMomentDate(momentEnd);

		$scope.lastEventLength = momentEnd.diff(momentStart, 'minutes');

		// maintain a list of the 'active' templates based on start time
		$scope.setActiveTemplateEvents();

		//$scope.eventStatusOptions.push("");
		for(var key in $scope.eventStatuses)
		{
			if($scope.eventStatuses.hasOwnProperty(key))
			{
				$scope.eventStatusOptions.push($scope.eventStatuses[key]);
			}
		}
		$scope.defaultEventStatus = data.defaultEventStatus;
		$scope.setSelectedEventStatus(data.eventData.eventStatusCode);


		if(editMode)
		{
			$scope.eventUuid = data.eventData.appointmentNo;
			$scope.eventData.reason = data.eventData.reason;
			$scope.eventData.notes = data.eventData.notes;

			// either load the patient data and init the autocomplete
			// or ensure the patient model is clear
			$scope.initPatientAutocomplete(data.eventData.demographicNo).then(function() {
				$scope.initialized = true;
			});
			$scope.selectedSiteName = data.eventData.site;
		}
		else
		{
			// create mode: adjust the end date (if needed)
			// and clear the patient model
			$scope.adjustEndDatetime();
			$scope.demographicModel.clear();

			// autofocus the patient field
			focus.element("#input-patient");

			$scope.initialized = true;
		}
	};

	$scope.initPatientAutocomplete = function initPatientAutocomplete(demographicNo)
	{
		var deferred = $q.defer();

		if(Juno.Common.Util.exists(demographicNo) && demographicNo != 0)
		{
			demographicService.getDemographic(demographicNo).then(function(data)
			{
				$scope.patientTypeahead = data;
				deferred.resolve();
			},
			function(errors)
			{
				console.log('error initializing patient autocomplete', errors);
				$scope.demographicModel.clear();
				deferred.resolve();
			});
		}
		else
		{
			$scope.demographicModel.clear();
			deferred.resolve();
		}

		return deferred.promise;
	};


	//=========================================================================
	// Private methods
	//=========================================================================/

	$scope.setSelectedEventStatus = function setSelectedEventStatus(selectedCode)
	{
		var eventStatusCode = $scope.defaultEventStatus;

		if(Juno.Common.Util.exists(selectedCode))
		{
			eventStatusCode = selectedCode;
		}

		if(!Juno.Common.Util.exists(eventStatusCode) ||
			!Juno.Common.Util.exists($scope.eventStatuses[eventStatusCode]))
		{
			// if not set or found just pick the first one
			eventStatusCode = $scope.eventStatusOptions[0].displayLetter;
		}

		$scope.selectedEventStatus = $scope.eventStatuses[eventStatusCode];
	};

	// Make a list of the types of appointments available for this appointment
	$scope.setActiveTemplateEvents = function setActiveTemplateEvents()
	{
		// Get templates that happen during the time period
		var momentStart = Juno.Common.Util.getDateAndTimeMoment(
			$scope.eventData.startDate, $scope.formattedTime($scope.eventData.startTime));
		var momentEnd = Juno.Common.Util.getDateAndTimeMoment(
			$scope.eventData.endDate, $scope.formattedTime($scope.eventData.endTime));

		var activeEvents = [];

		// Loop through the events for this day
		for(var i = 0; i < data.events.length; i++)
		{
			if(data.events[i].rendering != "background" || data.events[i].resourceId != $scope.schedule.uuid)
			{
				continue;
			}

			var event = angular.copy(data.events[i]);

			// if start time is before event end time or if end time is after event start
			event.start = Juno.Common.Util.getDatetimeNoTimezoneMoment(event.start);
			event.end = Juno.Common.Util.getDatetimeNoTimezoneMoment(event.end);

			if(momentStart.isValid() && momentEnd.isValid() &&
				event.start.isValid() && event.end.isValid() &&
				momentStart.isBefore(event.end) && momentEnd.isAfter(event.start))
			{
				event.availabilityType = data.availabilityTypes[event.scheduleTemplateCode];
				activeEvents.push(event);
			}
		}

		$scope.activeTemplateEvents = activeEvents;
	};

	$scope.adjustEndDatetime = function adjustEndDatetime(lengthMinutes)
	{
		// adjusts the end time to the specified length or
		// adjusts to keep the event length the same as it last was

		var momentStart = Juno.Common.Util.getDateAndTimeMoment(
			$scope.eventData.startDate, $scope.formattedTime($scope.eventData.startTime));

		if(momentStart.isValid())
		{
			var newEventLength = Juno.Common.Util.exists(lengthMinutes) ?
				lengthMinutes : $scope.lastEventLength;

			var momentEnd = momentStart.add(newEventLength, 'minutes');

			$scope.eventData.endDate = Juno.Common.Util.formatMomentDate(momentEnd);
			$scope.eventData.endTime = Juno.Common.Util.formatMomentTime(momentEnd, $scope.timepickerFormat);
		}
	};

	$scope.updateLastEventLength = function updateLastEventLength()
	{
		// saves the current event length, if the date/times are valid

		var momentStart = Juno.Common.Util.getDateAndTimeMoment(
			$scope.eventData.startDate, $scope.formattedTime($scope.eventData.startTime));
		var momentEnd = Juno.Common.Util.getDateAndTimeMoment(
			$scope.eventData.endDate, $scope.formattedTime($scope.eventData.endTime));

		if(momentStart.isValid() && momentEnd.isValid())
		{
			var eventLength = momentEnd.diff(momentStart, 'minutes');
			if(eventLength > 0)
			{
				$scope.lastEventLength = eventLength;
			}
		}
	};

	$scope.validateForm = function validateForm()
	{
		$scope.displayMessages.clear();

		Juno.Common.Util.validateDateString($scope.eventData.startDate,
			$scope.displayMessages, 'startDate', 'Start Time', true);

		Juno.Common.Util.validateTimeString($scope.formattedTime($scope.eventData.startTime),
			$scope.displayMessages, 'startTime', 'Start Time', true);

		Juno.Common.Util.validateDateString($scope.eventData.endDate,
			$scope.displayMessages, 'endDate', 'End Time', true);

		Juno.Common.Util.validateTimeString($scope.formattedTime($scope.eventData.endTime),
			$scope.displayMessages, 'endTime', 'End Time', true);

		// if all the date/time fields look good, validate range
		if(!$scope.displayMessages.has_errors())
		{
			var startDatetime = Juno.Common.Util.getDateAndTimeMoment(
				$scope.eventData.startDate, $scope.formattedTime($scope.eventData.startTime));
			var endDatetime = Juno.Common.Util.getDateAndTimeMoment(
				$scope.eventData.endDate, $scope.formattedTime($scope.eventData.endTime));

			if(endDatetime.isSame(startDatetime) ||
				endDatetime.isBefore(startDatetime))
			{
				$scope.displayMessages.addStandardError("The appointment must end after it starts");
			}
		}

		return !$scope.displayMessages.has_errors();
	};

	$scope.saveEvent = function saveEvent()
	{
		var deferred = $q.defer();

		var startDatetime = Juno.Common.Util.getDateAndTimeMoment(
				$scope.eventData.startDate, $scope.formattedTime($scope.eventData.startTime));

		var endDatetime = Juno.Common.Util.getDateAndTimeMoment(
				$scope.eventData.endDate, $scope.formattedTime($scope.eventData.endTime));


		parentScope.saveEvent(
			editMode,
			{
				appointmentNo: $scope.eventUuid,
				startTime: startDatetime,
				endTime: endDatetime,
				reason: $scope.eventData.reason,
				notes: $scope.eventData.notes,
				providerNo: $scope.schedule.uuid,
				eventStatusCode: $scope.selectedEventStatus.displayLetter,
				demographicNo: $scope.demographicModel.demographicNo,
				site: $scope.selectedSiteName
			}
		).then(
			function(results)
			{
				if(parentScope.processSaveResults(results, $scope.displayMessages))
				{
					deferred.resolve(results);
				}
				else
				{
					deferred.reject(results);
				}
			},
			function (results)
			{
				parentScope.processSaveResults(results, $scope.displayMessages);
				deferred.reject();
			});

		return deferred.promise;
	};

	$scope.deleteEvent = function deleteEvent()
	{
		var deferred = $q.defer();

		parentScope.deleteEvent($scope.eventUuid).then(function()
		{
			deferred.resolve();

		}, function()
		{
			deferred.reject();
		});

		return deferred.promise;
	};

	$scope.formattedTime = function formattedTime(time_str)
	{
		// the time picker format is HH:MM AM - need to strip spaces
		return time_str.replace(/ /g,'');
	};

	$scope.loadPatientFromTypeahead = function loadPatientFromTypeahead(patientTypeahead)
	{
		$scope.demographicModel.fillData(patientTypeahead);
	};

	//=========================================================================
	// Watches
	//=========================================================================/

	// when the start date is changed,
	// update the active template events
	$scope.$watch('startDate', function(newStartDate, oldStartDate)
	{
		// avoid running first time this fires during initialization
		if(newStartDate !== oldStartDate)
		{
			$scope.setActiveTemplateEvents();
			$scope.adjustEndDatetime();
		}
	});

	// when the start time is changed,
	// update the active template events and adjust the end time
	$scope.$watch('startTime', function(newStartTime, oldStartTime)
	{
		// avoid running first time this fires during initialization
		if(newStartTime !== oldStartTime)
		{
			$scope.setActiveTemplateEvents();
			$scope.adjustEndDatetime();
		}
	});

	// when the end date is changed, track the event length
	$scope.$watch('endDate', function(newEndDate, oldEndDate)
	{
		// avoid running first time this fires during initialization
		if(newEndDate !== oldEndDate)
		{
			$scope.setActiveTemplateEvents();
			$scope.updateLastEventLength();
		}
	});

	// when the end time is changed, track the event length
	$scope.$watch('endTime', function(newEndTime, oldEndTime)
	{
		// avoid running first time this fires during initialization
		if(newEndTime !== oldEndTime)
		{
			$scope.setActiveTemplateEvents();
			$scope.updateLastEventLength();
		}
	});

	$scope.$watch('patientTypeahead', function()
	{
		$scope.loadPatientFromTypeahead($scope.patientTypeahead);
	});

	//=========================================================================
	// Public methods
	//=========================================================================/

	$scope.loadedNewPhoto = function loadedNewPhoto(file, event)
	{
		if(file == null)
		{
			return;
		}
		$scope.preview_patient_image = file;
		$scope.new_photo = true;
		$scope.demographicModel.hasPhoto = true;
		$scope.demographicModel.uploadPhoto(file);
	};

	$scope.isWorking = function isWorking()
	{
		return $scope.working;
	};

	$scope.isInitialized = function isInitialized()
	{
		return $scope.initialized;
	};

	$scope.isPatientSelected = function isPatientSelected()
	{
		return Juno.Common.Util.exists($scope.demographicModel.demographicNo);
	};

	$scope.clearPatient = function clearPatient()
	{
		$scope.autocompleteValues.patient = null;
		$scope.demographicModel.clear();
	};

	$scope.setEventLength = function setEventLength(minutes)
	{
		$scope.adjustEndDatetime(minutes);
	};

	$scope.save = function save()
	{
		if(!$scope.validateForm())
		{
				return false;
		}

		$scope.working = true;
		$scope.saveEvent().then(function()
		{
			$scope.parentScope.refetchEvents();
			$uibModalInstance.close();
			$scope.working = false;
		}, function()
		{
			console.log($scope.displayMessages.field_errors()['location']);
			if(!$scope.displayMessages.has_standard_errors())
			{
				$scope.displayMessages.add_generic_fatal_error();
			}
			$scope.working = false;
		});
	};

	$scope.del = function del()
	{
		$scope.working = true;
		$scope.deleteEvent().then(function()
		{
			$scope.parentScope.refetchEvents();
			$uibModalInstance.close();
			$scope.working = false;
		}, function()
		{
			$scope.displayMessages.add_generic_fatal_error();
			$scope.working = false;
		});
	};

	$scope.cancel = function cancel()
	{
		$uibModalInstance.dismiss('cancel');
	};

	$scope.saveAndBill = function saveAndBill()
	{
		if(!$scope.validateForm())
		{
	  		return false;
		}

		$scope.working = true;
		$scope.saveEvent().then(function()
		{
			$scope.parentScope.refetchEvents();
			$uibModalInstance.close();
			$scope.working = false;
			$scope.parentScope.openCreateInvoice(
				$scope.eventUuid,
				$scope.schedule.uuid,
				$scope.demographicModel.demographicNo);
		}, function()
		{
			$scope.displayMessages.add_generic_fatal_error();
			$scope.working = false;
		});
	};

	$scope.viewInvoices = function viewInvoices()
	{
		$scope.parentScope.open_view_invoices($scope.eventUuid);
	};

	$scope.createPatient = function createPatient()
	{
		var editModeCallback = function() { return false; };
		var onSaveCallback = function() { return $scope.onPatientModalSave; };
		var loadErrorLinkPatientFn = function() { return $scope.onPatientModalSave; };

		$scope.create_patient_dialog = parentScope.calendar_api_adapter.openPatientDialog(
				editModeCallback, onSaveCallback, loadErrorLinkPatientFn);
	};

	$scope.modify_patient = function modify_patient()
	{
		if(!$scope.demographicModel.demographicNo)
		{
			return;
		}

		var editModeCallback = function() { return true; };
		var onSaveCallback = function() { return $scope.onPatientModalSave; };
		var loadErrorLinkPatientFn = function() { return $scope.onPatientModalSave; };

		$scope.modify_patient_dialog = parentScope.calendar_api_adapter.openPatientDialog(
				editModeCallback, onSaveCallback, loadErrorLinkPatientFn);
	};

	// for callback on create/edit patient modal
	$scope.onPatientModalSave = function onPatientModalSave(demographicNo)
	{
		// load the newly created/updated patient
		$scope.demographicModel.demographicNo = demographicNo;
		$scope.initPatientAutocomplete();
	};

	$scope.searchPatients = function searchPatients(term)
	{
		var search = {
			type: 'Name',
			'term': term,
			status: 'active',
			integrator: false,
			outofdomain: true
		};
		return demographicsService.search(search, 0, 25).then(
			function(results)
			{
				var resp = [];
				for (var x = 0; x < results.content.length; x++)
				{
					resp.push(
						{
							demographicNo: results.content[x].demographicNo,
							name: Juno.Common.Util.formatName(
								results.content[x].firstName, results.content[x].lastName)
						});
				}
				return resp;
			},
			function error(errors)
			{
				console.log(errors);
			});
	};

	$scope.newDemographic = function newDemographic(size)
	{
		var modalInstance = $uibModal.open(
			{
				templateUrl: 'src/patient/newPatient.jsp',
				controller: 'Patient.NewPatientController as newPatientCtrl',
				backdrop: 'static',
				size: size
			});

		modalInstance.result.then(
			function success(results)
			{
				console.log(results);
				console.log('patient #: ', results.demographicNo);

				$scope.initPatientAutocomplete(results.demographicNo)
			},
			function error(errors)
			{
				console.log('Modal dismissed at: ' + new Date());
				console.log(errors);
			});

		console.log($('#myModal'));
	};


	//=========================================================================
	//  Key Bindings
	//=========================================================================

	$scope.keyBindSettings =
	{
		"ctrl+enter": {
			title: 'Ctrl+Enter',
			tooltip: 'Save',
			description: 'Save appointment',
			callback_fn: function enter_callback()
			{
				if(!$scope.isWorking())
				{
					$scope.save();
				}
			},
			target: null
		},
		"ctrl+shift+enter": {
			title: 'Ctrl+Shift+Enter',
			tooltip: 'Save And Bill',
			description: 'Save and bill for appointment',
			callback_fn: function enter_callback()
			{
				if(!$scope.isWorking())
				{
					$scope.saveAndBill();
				}
			},
			target: null
		}
	};
	$scope.keyBinding.bindKeyGlobal("ctrl+enter", $scope.keyBindSettings["ctrl+enter"]);
	$scope.keyBinding.bindKeyGlobal("ctrl+shift+enter", $scope.keyBindSettings["ctrl+shift+enter"]);
}]);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! moment */ "./node_modules/moment/moment.js"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/schedule/module.js":
/*!********************************!*\
  !*** ./src/schedule/module.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('Schedule', ['Common', 'Common.Services', 'PatientList']);

/***/ }),

/***/ "./src/schedule/scheduleController.js":
/*!********************************************!*\
  !*** ./src/schedule/scheduleController.js ***!
  \********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(moment, $) {/* harmony import */ var _generated_api_AppointmentApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../generated/api/AppointmentApi */ "./generated/api/AppointmentApi.ts");
/* harmony import */ var _generated_api_AppointmentApi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_generated_api_AppointmentApi__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _generated_api_ScheduleApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../generated/api/ScheduleApi */ "./generated/api/ScheduleApi.ts");
/* harmony import */ var _generated_api_ScheduleApi__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_generated_api_ScheduleApi__WEBPACK_IMPORTED_MODULE_1__);




angular.module('Schedule').controller('Schedule.ScheduleController', [

	'$scope',
	'$stateParams',
	'$q',
	'$http',
	'$httpParamSerializer',
	'$uibModal',
	'$state',
	'focusService',
	'scheduleService',
	'securityService',
	'uiCalendarConfig',

	function(
		$scope,
		$stateParams,
		$q,
		$http,
		$httpParamSerializer,
		$uibModal,
		$state,
		focusService,
		scheduleService,
		securityService,
		uiCalendarConfig
	)
	{
		//var controller = this;

		// XXX: put this address somewhere else
		$scope.appointmentApi = new _generated_api_AppointmentApi__WEBPACK_IMPORTED_MODULE_0__["AppointmentApi"]($http, $httpParamSerializer,
			'http://localhost:9090/ws/rs');

		$scope.scheduleApi = new _generated_api_ScheduleApi__WEBPACK_IMPORTED_MODULE_1__["ScheduleApi"]($http, $httpParamSerializer,
			'http://localhost:9090/ws/rs');


		//=========================================================================
		// Local scope variables
		//=========================================================================/

		$scope.calendarName = 'cpCalendar';
		$scope.initialized = false;
		$scope.calendarLoading = false;

		$scope.uiConfig = {};
		$scope.uiConfigApplied = {};
		$scope.eventSources = [];
		$scope.selectedSchedule = null;
		$scope.selectedSiteName = null;
		$scope.selectedTimeInterval = null;

		// cpCalendar control object.  The cpCalendar directive puts its control API methods in
		// this object.
		$scope.cpCalendarControl = {};


		// Parameters from directive controller


		$scope.schedules = [];
		$scope.scheduleOptions = [];
		$scope.resourceOptions = [];
		$scope.siteOptions = [];
		$scope.defaultEventColor = "#333";
		$scope.defaultTimeInterval = '00:15:00';
		$scope.timeIntervalOptions =
			['00:05:00','00:10:00','00:15:00','00:30:00'];
		$scope.selectedTimeInterval = $scope.defaultTimeInterval;
		$scope.defaultAutoRefreshMinutes = 3;
		$scope.defaultCalendarView = 'agendaWeek';
		$scope.eventStatuses = {};
		$scope.rotateStatuses = [];
		$scope.availabilityTypes = {};
		$scope.resourceOptionHash = {};
		$scope.events = [];
		$scope.scheduleTemplates = {};
		$scope.sites = {};

		$scope.openingDialog = false;
		$scope.dialog = null;


		// Global State parameters
		$scope.defaultDate = null;
		$scope.selectedDate = null;
		$scope.scheduleViewName = null;
		$scope.scheduleDefault = null;
		$scope.scheduleTimeInterval = null;
		$scope.scheduleAutoRefresh = null;
		$scope.scheduleAutoRefreshMinutes = null;

		$scope.scheduleService = scheduleService;


		$scope.init = function init()
		{
			$scope.uiConfig.calendar.defaultView = $scope.calendarViewName();

			// XXX: loadScheduleTemplates seems to not be used

			//{
				$scope.loadAvailabilityTypes().then(function()
				{
					$scope.loadEventStatuses().then(function()
					{
						$scope.loadScheduleOptions().then(function()
						{
							$scope.loadSiteOptions().then(function()
							{
								$scope.loadDefaultSelections();

								$scope.loadSelectedSchedules().then(function()
								{
									$scope.setCalendarResources();

									$scope.setEventSources();

									$scope.initEventsAutoRefresh();

									$scope.applyUiConfig($scope.uiConfig);
									console.log("-- Calendar Initialized ----------------------------");
									$scope.initialized = true;
								});
							});
						});
					});
				});
			//});
		};


		//=========================================================================
		// Public Methods
		//=========================================================================/

		$scope.calendar = function calendar()
		{
			return uiCalendarConfig.calendars[$scope.calendarName];
		};

		$scope.isSchedulingEnabled = function isSchedulingEnabled()
		{
			return true;
		};

		$scope.isInitialized = function isInitialized()
		{
			return $scope.initialized;
		};

		$scope.hasSchedules = function hasSchedules()
		{
			return $scope.schedules.length > 0;
		};

		$scope.hasSites = function hasSites()
		{
			return $scope.siteOptions.length > 0;
		};

		$scope.getTimeIntervalOptions = function getTimeIntervalOptions()
		{
			return $scope.timeIntervalOptions;
		};

		$scope.getScheduleOptions = function getScheduleOptions()
		{
			return $scope.scheduleOptions;
		};

		$scope.getSiteOptions = function getSiteOptions()
		{
			if(!angular.isDefined($scope.selectedSite) || $scope.selectedSite === null)
			{
				$scope.selectedSite = $scope.siteOptions[0];
			}

			return $scope.siteOptions;
		};

		$scope.viewName = function viewName()
		{
			var viewName = $scope.scheduleViewName;

			if(!Juno.Common.Util.exists(viewName))
			{
				viewName = $scope.defaultCalendarView;
			}

			return viewName;
		};

		$scope.calendarEvents = function calendarEvents(start, end, timezone, callback)
		{
			// load the events for each of the loaded schedules
			var promise_array = [];
			for(var i = 0; i < $scope.schedules.length; i++)
			{
				promise_array.push(
					$scope.loadScheduleEvents(
						$scope.schedules[i].uuid, $scope.selectedSiteName, start, end));
			}

			// once all the events are loaded, concat them together and callback
			$q.all(promise_array).then(
				function success(results_array)
				{
					$scope.events = Array.prototype.concat.apply([], results_array);

					try
					{
						callback($scope.events);
					}
					catch(err)
					{
						// the callback throws an error on first load, ignore
					}
				}
			);
		};

		$scope.showTimeIntervals = function showTimeIntervals()
		{
			return $scope.viewName() !== 'month';
		};

		$scope.changeView = function changeView(view)
		{
			// if switching to or from resourceDay view, need to update schedules
			var reload_schedules = false;
			if(view === 'resourceDay' || $scope.scheduleViewName === 'resourceDay')
			{
				reload_schedules = true;
			}

			// save the new view to global state so it gets picked up in rendering
			$scope.scheduleViewName = view;

			if(reload_schedules)
			{
				$scope.loadSelectedSchedules().then(
					function success()
					{
						$scope.setCalendarResources();
						$scope.updateCalendarView();
					});
			}
			else
			{
				$scope.updateCalendarView();
			}
		};

		$scope.showLegend = function showLegend()
		{
			// if already opening a dialog or have one open, ignore and return
			if($scope.openingDialog || $scope.dialog)
			{
				return;
			}
			$scope.openingDialog = true;

			var data = {
				event_statuses: $scope.eventStatuses,
				availability_types: $scope.availabilityTypes
			};

			$scope.dialog = $uibModal.open({
				animation: false,
				backdrop: 'static',
				controller: 'Schedule.LegendController',
				templateUrl: 'code/schedule/legend.html',
				resolve: {
					data: function() { return data }
				}
			});

			// when the dialog closes clear the variable
			$scope.dialog.closed.then(function() {
				$scope.dialog = null;
			});

			$scope.openingDialog = false;
		};

		$scope.refetchEvents = function refetchEvents()
		{
			$scope.calendar().fullCalendar('refetchEvents');
		};

		$scope.changeDate = function changeDate(date)
		{
			$scope.calendar().fullCalendar('gotoDate', date);
		};

		$scope.isAgendaView = function isAgendaView()
		{
			return ($scope.viewName() != 'resourceDay')
		};


		//=========================================================================
		// Private methods
		//=========================================================================/

		$scope.getSelectedSchedule = function getSelectedSchedule(scheduleOptions)
		{
			// priority: last used from global state, then preference setting,
			// then default (first in the list)
			var selectedUuid = null;
			if($scope.scheduleDefault)
			{
				selectedUuid = $scope.scheduleDefault;
			}

			if(Juno.Common.Util.exists(selectedUuid))
			{
				// only choose it if it can be found in the options list
				for(var i = 0; i < scheduleOptions.length; i++)
				{
					if(selectedUuid === scheduleOptions[i].uuid)
					{
						return scheduleOptions[i];
					}
				}
			}

			if(scheduleOptions.length > 0)
			{
				// select the first schedule in the list by default
				return scheduleOptions[0];
			}

			return null;
		};

		$scope.loadSelectedSchedules = function loadSelectedSchedules()
		{
			var deferred = $q.defer();

			var promiseArray = [];

			if(
				Juno.Common.Util.exists($scope.selectedSchedule.providerNos) &&
				angular.isArray($scope.selectedSchedule.providerNos)
			)
			{
				// TODO: this is really gross and I don't like it
				// Potentially put this in the calendarApiAdapter
				angular.forEach($scope.selectedSchedule.providerNos, function(providerNo)
				{
					promiseArray.push($scope.loadSchedule(providerNo.toString()));
				});

				if($scope.selectedSchedule.providerNos.length > 1)
				{
					// Set the calendar to resource mode.  All of these values need to be set.
					$scope.selectedResources = $scope.buildSelectedResources($scope.selectedSchedule.providerNos);
					$scope.uiConfig.calendar.resources = $scope.selectedResources;
					$scope.uiConfig.calendar.defaultView = "resourceDay";

					// save the new view to global state so it gets picked up in rendering
					$scope.scheduleViewName = 'resourceDay';
					$scope.updateCalendarView();
				}
				else
				{
					// Reset everything to single-provider view mode
					$scope.uiConfig.calendar.defaultView = "agendaWeek";
					$scope.scheduleViewName = 'agendaWeek';
					$scope.uiConfig.calendar.resources = false;
				}

				$scope.applyUiConfig($scope.uiConfig);
			}
			else if(
				$scope.viewName() !== 'resourceDay' &&
				$scope.selectedSchedule !== null
			)
			{
				promiseArray.push(
					$scope.loadSchedule($scope.selectedSchedule.uuid));
			}
			else
			{
				angular.forEach($scope.selectedResources, function(selected)
				{
					promiseArray.push($scope.loadSchedule(selected.uuid));
				});
			}

			// Loop through the schedules added above and add them to the schedule list.
			$q.all(promiseArray).then(
				function success(resultsArray)
				{
					$scope.schedules = [];
					for(var i = 0; i < resultsArray.length; i++)
					{
						$scope.schedules[i] = resultsArray[i].data;
					}
					deferred.resolve(resultsArray);
				}, function error(errors)
				{
					console.log('errors');
				});

			return deferred.promise;
		};

		$scope.loadSchedule = function loadSchedule(providerId)
		{
			var deferred = $q.defer();

			// TODO: fill up availabilities and relations, or figure out how to show that info without them
			var schedule = {
				uuid: providerId,
				availabilities: [], // TODO: figure out if these have a Juno equivalent, I don't think
									// TODO: they do.  They are things like holidays and vacation days
				relations: [],
				events: []
			};

			deferred.resolve({data: schedule});

			return deferred.promise;
		};

		$scope.updateCalendarView = function updateCalendarView()
		{
			$scope.uiConfig.calendar.defaultView = $scope.calendarViewName();
			$scope.applyUiConfig($scope.uiConfig);
		};

		// This gets the view name, but if it's resourceDay, it will get agendaDay.
		// TODO Not sure why this works this way.  Maybe it uses it to get a day of events for each
		//      resource in the resource list?
		$scope.calendarViewName = function calendarViewName()
		{
			var view = $scope.viewName();
			if(view == 'resourceDay')
			{
				view = 'agendaDay';
			}
			return view;
		};

		$scope.setCalendarLoading = function setCalendarLoading(isLoading)
		{
			$scope.calendarLoading = isLoading;
		};

		$scope.getLoadedSchedule = function getLoadedSchedule(uuid)
		{
			var schedule = null;
			for(var i = 0; i < $scope.schedules.length; i++)
			{
				if($scope.schedules[i].uuid === uuid)
				{
					schedule = $scope.schedules[i];
					break;
				}
			}
			return schedule;
		};

		// TODO: change this, perhaps?  It is getting the resource details from the groups
		$scope.buildSelectedResources = function buildSelectedResources(providerNos)
		{
			var selectedResources = [];

			for(var i = 0; i < providerNos.length; i++)
			{
				selectedResources.push($scope.resourceOptionHash[providerNos[i]]);
			}

			return selectedResources;
		};

		$scope.setCalendarResources = function setCalendarResources()
		{
			if($scope.viewName() === 'resourceDay')
			{
				$scope.uiConfig.calendar.resources = $scope.selectedResources;
			}
			else
			{
				$scope.uiConfig.calendar.resources = false;
			}

			$scope.applyUiConfig($scope.uiConfig);
		};

		$scope.setEventSources = function setEventSources()
		{
			$scope.eventSources.push($scope.calendarEvents);
		};

		$scope.updateEvent = function updateEvent(calEvent)
		{
			$scope.calendar().fullCalendar('updateEvent', calEvent);
		};

		$scope.timeIntervalMinutes = function timeIntervalMinutes()
		{
			return parseInt($scope.selectedTimeInterval.split(":")[1]);
		};

		$scope.loadAvailabilityTypes = function loadAvailabilityTypes()
		{
			var deferred = $q.defer();
			var availabilityTypes = {};

			scheduleService.getScheduleTemplateCodes().then(
				function success(results)
				{
					for(var i = 0; i < results.length; i++)
					{
						var result = results[i];

						availabilityTypes[result.code] = angular.copy(result);
					}

					$scope.availabilityTypes = availabilityTypes;
					deferred.resolve(availabilityTypes);
				});

			return deferred.promise;
		};

		$scope.loadDefaultSelections = function loadDefaultSelections()
		{
			$scope.selectedSchedule = $scope.getSelectedSchedule($scope.scheduleOptions);

			//$scope.selectedResources = $scope.getSelectedResources($scope.resourceOptions);

			$scope.selectedTimeInterval = $scope.getSelectedTimeInterval(
				$scope.timeIntervalOptions, $scope.defaultTimeInterval);
			$scope.uiConfig.calendar.slotDuration = $scope.selectedTimeInterval;
			$scope.uiConfig.calendar.slotLabelInterval = $scope.selectedTimeInterval;

			$scope.uiConfig.calendar.minTime = $scope.getScheduleMinTime();
			$scope.uiConfig.calendar.maxTime = $scope.getScheduleMaxTime();

			// scroll so that one hour ago is the top of the calendar
			$scope.uiConfig.calendar.scrollTime = moment().subtract(1, 'hours').format('HH:mm:ss');
		};

		$scope.getSelectedTimeInterval = function getSelectedTimeInterval(
			timeIntervalOptions, defaultTimeInterval)
		{
			// priority: last used from global state, then preference setting,
			// then default

			var selectedTimeInterval = null;

			var timeInterval = $scope.scheduleTimeInterval;
			if(timeInterval === null)
			{
				timeInterval = $scope.scheduleTimeInterval;
			}

			if(Juno.Common.Util.exists(timeInterval))
			{
				// only choose it if it can be found in the options list
				for(var i = 0; i < timeIntervalOptions.length; i++)
				{
					if(timeInterval === timeIntervalOptions[i])
					{
						selectedTimeInterval = timeIntervalOptions[i];
						break;
					}
				}
			}

			if(selectedTimeInterval === null)
			{
				return defaultTimeInterval;
			}

			return selectedTimeInterval;
		};

		$scope.getScheduleMinTime = function getScheduleMinTime()
		{
			// restrict day view if user preferences are set

			/*				var min_time = service.get_global_preference_setting('schedule_min_time');
						if (util.exists(min_time)) {
							// format: HH24:MM:SS - expect HH24:MM in preference
							return min_time + ":00";
						}

						return null;*/

			return "08:00";
		};

		$scope.getScheduleMaxTime = function getScheduleMaxTime()
		{
			/*				var max_time = service.get_global_preference_setting('schedule_max_time');
							if(util.exists(max_time))
							{
								// format: HH24:MM:SS - expect HH24:MM in preference
								return max_time + ":00";
							}

							return null;*/
			return "20:00";
		};

		// Loads the list of event statuses from the API (i.e. appointment statuses).  Sets the following:
		// $scope.event_statuses - a table to look up a status by uuid.
		// $scope.rotate_statuses - an array to describe how to cycle through statuses.
		$scope.loadEventStatuses = function loadEventStatuses()
		{
			var deferred = $q.defer();

			$scope.eventStatuses = {};
			$scope.rotateStatuses = [];

			$scope.scheduleApi.getCalendarAppointmentStatuses().then(
				function success(rawResults)
				{
					var results = rawResults.data.body;

					for(var i = 0; i < results.length; i++)
					{
						var result = results[i];
						$scope.eventStatuses[result.displayLetter] = result;
						if(result.rotates)
						{
							$scope.rotateStatuses.push(result);
						}
					}

					deferred.resolve(results);
				});

			return deferred.promise;
		};

		$scope.loadScheduleEvents = function loadScheduleEvents(providerId, siteName, start, end)
		{
			var deferred = $q.defer();

			// Get date strings to pass to the backend.  The calendar provides datetime that describe
			// and inclusive start time and exclusive end time, so one second is removed from
			// the end time to convert to the correct date.
			var startDateString = start.format(Juno.Common.Util.settings.date_format);
			var endDateString = end.subtract(1, 'seconds').format(Juno.Common.Util.settings.date_format);

			$scope.scheduleApi.getCalendarEvents(
				providerId,
				startDateString,
				endDateString,
				siteName
			).then(
				function(results)
				{
					deferred.resolve(results.data.body);
				},
				function(results)
				{
					deferred.reject(results.data.body);
				}
			);

			return deferred.promise;
		};

		$scope.saveEvent = function saveEvent(editMode, calendarAppointment)
		{
			var deferred = $q.defer();

			if(editMode)
			{
				this.appointmentApi.updateAppointment(calendarAppointment).then(
					function(result)
					{
						deferred.resolve(result.data);
					},
					function(result)
					{
						deferred.reject(result.data);
					}
				);
			}
			else
			{
				$scope.appointmentApi.addAppointment(calendarAppointment).then(
					function(result)
					{
						deferred.resolve(result.data);
					},
					function (result)
					{
						deferred.reject(result.data);
					}
				);
			}


			return deferred.promise;
		};

		$scope.moveEvent = function moveEvent(appointment, delta, adjustStartTime)
		{
			var deferred = $q.defer();

			var startMoment = Juno.Common.Util.getDatetimeNoTimezoneMoment(appointment.startTime);
			var endMoment = Juno.Common.Util.getDatetimeNoTimezoneMoment(appointment.endTime);

			var movedAppointment = angular.copy(appointment);

			if(adjustStartTime)
			{
				movedAppointment.startTime = Juno.Common.Util.formatMomentDateTimeNoTimezone(startMoment.add(delta.asMinutes(), 'minutes'));
			}
			movedAppointment.endTime = Juno.Common.Util.formatMomentDateTimeNoTimezone(endMoment.add(delta.asMinutes(), 'minutes'));

			$scope.saveEvent(true, movedAppointment).then(
				function success(data)
				{
					deferred.resolve(data.body);
				},
				function success(data)
				{
					deferred.reject(data.body);
				}
			);


			return deferred.promise;
		};

		// Read the implementation-specific results and return a calendar-compatible object.
		$scope.processSaveResults = function processSaveResults(results, displayErrors)
		{
			var status = (results || {}).status;

			if(status == 'SUCCESS')
			{
				return true;
			}

			var errorMessage = ((results || {}).error || {}).message;
			var validationErrorArray = ((results || {}).error || {}).validationErrors;

			if(Array.isArray(validationErrorArray))
			{
				displayErrors.add_standard_error(errorMessage);
				//for(var error in validationErrorArray)
				for(var i = 0; i < validationErrorArray.length; i++)
				{
					var error = validationErrorArray[i];
					displayErrors.add_field_error(error.path, error.message);
				}
			}
		};

		$scope.deleteEvent = function deleteEvent(appointmentNo)
		{
			var deferred = $q.defer();

			$scope.appointmentApi.deleteAppointment(appointmentNo).then(
				function(result)
				{
					deferred.resolve(result.data);

				},
				function(result)
				{
					deferred.reject(result.data);
				}
			);

			return deferred.promise;
		};

		$scope.openCreateInvoice = function openCreateInvoice(
			event_uuid, schedule_uuid, demographics_patient_uuid)
		{
			var schedule =
				$scope.get_loaded_schedule(schedule_uuid);

			var url = $scope.calendar_api_adapter.get_create_invoice_url(event_uuid,
				schedule.demographics_practitioner_uuid, demographics_patient_uuid);

			window.window_scope = $scope;
			$window.open(url, '_blank');
		};

		$scope.getIconPath = function getIconPath(icon, statusModifier)
		{
			if(!Juno.Common.Util.exists(icon))
			{
				return "";
			}

			var modifierString = "";

			if(Juno.Common.Util.exists(statusModifier))
			{
				modifierString = statusModifier;
			}

			return "../images/" + modifierString + icon;
		};

		$scope.rotateEventStatus = function rotateEventStatus(calEvent)
		{
			$scope.setCalendarLoading(true);

			var appointmentNo = calEvent.data.appointmentNo;

			$scope.appointmentApi.setNextStatus(appointmentNo).then(
				function success(response)
				{
					var newStatus = response.data.body;

					calEvent.color = $scope.eventStatuses[newStatus].color;
					calEvent.data.eventStatusCode = newStatus;

					$scope.updateEvent(calEvent);

					$scope.setCalendarLoading(false);
				},
				function failure(response)
				{

				}
			);
		};

		$scope.getBillingLink = function getBillingLink(calEvent)
		{
			var startMoment = Juno.Common.Util.getDatetimeNoTimezoneMoment(calEvent.data.startTime);

			var appointmentDate = Juno.Common.Util.formatMomentDate(startMoment);
			var startTime = Juno.Common.Util.formatMomentTime(startMoment);

			var providerNo = calEvent.resourceId;

			var referralNoParameter = "";
			if(calEvent.data.billingRdohip)
			{
				referralNoParameter = "&referral_no_1=" + encodeURIComponent(calEvent.data.billingRdohip);
			}

			return "../billing.do" +
				"?billRegion=" + encodeURIComponent(calEvent.data.billingRegion) +
				"&billForm=" + encodeURIComponent(calEvent.data.billingForm) +
				"&hotclick=" +
				"&appointment_no=" + encodeURIComponent(calEvent.data.appointmentNo) +
				"&demographic_name=" + encodeURIComponent(calEvent.data.demographicName) +
				"&status=" + encodeURIComponent(calEvent.data.eventStatusCode) +
				"&demographic_no=" + encodeURIComponent(calEvent.data.demographicNo) +
				"&providerview=" + encodeURIComponent(providerNo) +
				"&user_no=" + encodeURIComponent(calEvent.data.userProviderNo) +
				"&apptProvider_no=" + encodeURIComponent(providerNo) +
				"&appointment_date=" + encodeURIComponent(appointmentDate) +
				"&start_time=" + encodeURIComponent(startTime) +
				"&bNewForm=1" + referralNoParameter;
		};

		$scope.getEncounterLink = function getEncounterLink(calEvent)
		{
			// XXX: Perhaps link to the new encounter page?  Put in an option to choose new or old.
			var providerNo = calEvent.resourceId;

			var startMoment = Juno.Common.Util.getDatetimeNoTimezoneMoment(calEvent.data.startTime);

			var appointmentDate = Juno.Common.Util.formatMomentDate(startMoment);
			var startTime = Juno.Common.Util.formatMomentTime(startMoment);

			return "../oscarEncounter/IncomingEncounter.do" +
				"?providerNo=" + encodeURIComponent(providerNo) +
				"&appointmentNo=" + encodeURIComponent(calEvent.data.appointmentNo) +
				"&demographicNo=" + encodeURIComponent(calEvent.data.demographicNo) +
				"&curProviderNo=" + encodeURIComponent(calEvent.data.userProviderNo) +
				"&reason=" + encodeURIComponent(calEvent.data.reason) +
				"&encType=" + encodeURIComponent("face to face encounter with client") +

				"&userName=" + encodeURIComponent(calEvent.data.userFirstName + " " + calEvent.data.userLastName) +
				"&curDate=" + encodeURIComponent(Juno.Common.Util.formatMomentDate(moment())) +

				"&appointmentDate=" + encodeURIComponent(appointmentDate) +
				"&startTime=" + encodeURIComponent(startTime) +
				"&status=" + encodeURIComponent(calEvent.data.eventStatusCode) +
				"&apptProvider_no=" + encodeURIComponent(providerNo) +
				"&providerview=" + encodeURIComponent(providerNo);
		};

		$scope.getRxLink = function getRxLink(calEvent)
		{
			if (calEvent.data.demographicNo != 0)
			{
				var providerNo = calEvent.resourceId;

				return "../oscarRx/choosePatient.do" +
					"?providerNo=" + encodeURIComponent(providerNo) +
					"&demographicNo=" + encodeURIComponent(calEvent.data.demographicNo);
			}
		};


		//=========================================================================
		// Event Handlers
		//=========================================================================/

		$scope.onEventRender = function onEventRender(event, element, view)
		{
			if(event.rendering !== 'background')
			{
				var eventSiteHtml = '';
				var eventSite = $scope.sites[event.data.site];

				if(Juno.Common.Util.exists(eventSite))
				{
					eventSiteHtml += "<span style='background-color: " + eventSite.color + "'>&nbsp;</span>"
				}


				var eventStatusHtml = '';
				var eventStatus =
					$scope.eventStatuses[event.data.eventStatusCode];
				var eventStatusRotate = Juno.Common.Util.exists(eventStatus.sortOrder);

				if(Juno.Common.Util.exists(eventStatus) && Juno.Common.Util.exists(eventStatus.icon) &&
					Juno.Common.Util.exists(event) && Juno.Common.Util.exists(event.data))
				{
					eventStatusHtml += "<img class='event-status";
					if(eventStatusRotate)
					{
						eventStatusHtml += ' rotate';
					}
					eventStatusHtml += "' src='" + $scope.getIconPath(eventStatus.icon, event.data.eventStatusModifier) + "' />";
				}
				else
				{
					eventStatusHtml = '<span class="event-status';
					if(Juno.Common.Util.exists(eventStatus))
					{
						if(eventStatusRotate)
						{
							eventStatusHtml += ' rotate ';
						}
						eventStatusHtml += '"' + ' title="' + Juno.Common.Util.escapeHtml(eventStatus.name) + '">' +
							Juno.Common.Util.escapeHtml(eventStatus.displayLetter) + '</span>';
					}
					else
					{
						eventStatusHtml += '" title="Unknown">?</span>';
					}
				}

				var eventEncounterHtml = '<span class="event-encounter" title="Open Encounter">E</span>';

				var eventInvoiceHtml = '<span class="event-invoice" title="Create Invoice">B</span>';

				var eventDemographicHtml = '<span class="event-demographic" title="View Patient">M</span>';

				var eventRxHtml = '<span class="event-rx" title="View Prescription">Rx</span>';

				var eventDetails = "";
				if(!Juno.Common.Util.isBlank(event.data.demographicName))
				{
					eventDetails = Juno.Common.Util.escapeHtml(event.data.demographicName);
					if(!Juno.Common.Util.isBlank(event.data.reason))
					{
						eventDetails += " (" + Juno.Common.Util.escapeHtml(event.data.reason) + ")"
					}
				}
				else if(!Juno.Common.Util.isBlank(event.data.reason))
				{
					eventDetails = Juno.Common.Util.escapeHtml(event.data.reason);
				}

				$(element).find('.fc-content').html(eventSiteHtml + eventStatusHtml + eventEncounterHtml +
					eventInvoiceHtml + eventDemographicHtml + eventRxHtml + eventDetails);
			}
		};

		$scope.onViewRender = function onViewRender()
		{
			if($scope.isInitialized() && $scope.calendar())
			{
				$scope.selectedDate = moment(Juno.Common.Util.formatMomentDate(
					moment($scope.calendar().fullCalendar('getDate'))));
			}

			// Voodoo to set the resource view column width from https://stackoverflow.com/a/39297864
			$("#ca-calendar").css('min-width',$('.fc-resource-cell').length*200);
		};

		$scope.afterRender = function afterRender()
		{
			// Voodoo to set the resource view column width from https://stackoverflow.com/a/39297864
			$('.fc-agendaDay-button').click(function()
			{
				$("#schedule_container").css('min-width',$('.fc-resource-cell').length*200);
			});
		};

		$scope.openCreateEventDialog = function openCreateEventDialog(
			start, end, jsEvent, view, resource)
		{
			// XXX: share as much code as possible with edit event
			if(!securityService.hasPermission('scheduling_create') )
			{
				return;
			}

			// if already opening a dialog or have one open, ignore and return
			if($scope.openingDialog || $scope.dialog)
			{
				return;
			}
			$scope.openingDialog = true;

			var scheduleUuid = null;
			var displayName = "";
			if(Juno.Common.Util.exists(resource))
			{
				scheduleUuid = resource.id;
				displayName = resource.display_name;
			}
			else if($scope.selectedSchedule !== null)
			{
				scheduleUuid = $scope.selectedSchedule.uuid;
			}

			var schedule = $scope.getLoadedSchedule(scheduleUuid);
			if(schedule !== null)
			{
				//var defaultEventStatus = schedule.new_event_status_uuid;

				var modalSchedule = angular.copy(schedule);
				modalSchedule.display_name = displayName;

				var data = {
					schedule: modalSchedule,
					defaultEventStatus: null, //defaultEventStatus,
					startTime: start,
					endTime: end,
					timeInterval: $scope.timeIntervalMinutes(),
					scheduleTemplates: $scope.scheduleTemplates,
					availabilityTypes: $scope.availabilityTypes,
					sites: $scope.sites,
					events: $scope.events,
					eventData: {}
				};

				$scope.dialog = $uibModal.open({
					animation: false,
					backdrop: 'static',
					controller: 'Schedule.EventController',
					templateUrl: 'src/schedule/event.jsp',
					resolve: {
						type: [function() { return 'create_edit_event' }],
						label: [function() { return 'Appointment' }],
						parentScope: [function() { return $scope }],
						data: [function() { return data }],
						editMode: [function() { return false }],
						keyBinding: [function() {return {bindKeyGlobal: function(){}}}],
						focus: [function() {return focusService}],
					}
				});

				$scope.dialog.result.catch(function(res) {
					if(!(res === 'cancel' || res === 'escape key press'))
					{
						throw res;
					}
				});

				// when the dialog closes clear the variable
				$scope.dialog.closed.then(function() {
					$scope.dialog = null;
				});
			}

			$scope.openingDialog = false;
		};

		// XXX: make this work
		$scope.openPatientDialog = function openPatientDialog(editModeCallback, onSaveCallback,
			loadErrorLinkPatientFn)
		{
			//global_state.enable_keyboard_shortcuts = false;

			return this.$uibModal.open({
				animation: false,
				backdrop: 'static',
				size: 'lg',
				controller: 'Invoice.Common.Patient.FormController',
				templateUrl: 'code/invoice/common/patient/quick_form.html',
				resolve: {
					edit_mode: editModeCallback,
					on_save_callback: onSaveCallback,
					load_error_link_patient_fn: loadErrorLinkPatientFn
				}
			});
		};

		$scope.openPatientDemographic = function openPatientDemographic(calEvent)
		{
			if (calEvent.data.demographicNo != 0)
			{
				var params = {
					demographicNo: calEvent.data.demographicNo
				};

				if (angular.isDefined(calEvent.data.appointmentNo))
				{
					params.appointmentNo = calEvent.data.appointmentNo;
					params.encType = "face to face encounter with client";
				}

				$state.go('record.summary', params);
			}
		};

		$scope.openEditEventDialog = function openEditEventDialog(calEvent)
		{
			if(!securityService.hasPermission('scheduling_edit') )
			{
				return;
			}

			// if already opening a dialog or have one open, ignore and return
			if($scope.openingDialog || $scope.dialog)
			{
				return;
			}

			$scope.openingDialog = true;

			var scheduleUuid = calEvent.resourceId;
			var displayName = calEvent.data.demographicName;

			if(displayName == null)
			{
				displayName = '';
			}

			var schedule = $scope.getLoadedSchedule(scheduleUuid);

			if(schedule !== null)
			{
				//var defaultEventStatus = schedule.new_event_status_uuid;

				var modalSchedule = angular.copy(schedule);
				modalSchedule.display_name = displayName;

				var data = {
					schedule: modalSchedule,
					defaultEventStatus: null, //defaultEventStatus,
					startTime: calEvent.start,
					endTime: calEvent.end,
					timeInterval: $scope.timeIntervalMinutes(),
					availabilityTypes: $scope.availabilityTypes,
					sites: $scope.sites,
					events: $scope.events,
					eventData: calEvent.data
				};

				$scope.dialog = $uibModal.open({
					animation: false,
					backdrop: 'static',
					controller: 'Schedule.EventController',
					templateUrl: 'src/schedule/event.jsp',
					resolve: {
						type: [function() { return 'create_edit_event' }],
						label: [function() { return 'Appointment' }],
						parentScope: [function() { return $scope }],
						data: [function() { return data }],
						editMode: [function() { return true }],
						keyBinding: [function() {return {bindKeyGlobal: function(){}}}],
						focus: [function() {return focusService}],
					}
				});

				$scope.dialog.result.catch(function(res) {
					if(!(res === 'cancel' || res === 'escape key press'))
					{
						throw res;
					}
				});

				// when the dialog closes clear the variable
				$scope.dialog.closed.then(function() {
					$scope.dialog = null;
				});
			}

			$scope.openingDialog = false;
		};

		$scope.onEventClicked = function onEventClicked(calEvent, jsEvent, view)
		{
			if($(jsEvent.target).is(".event-status.rotate"))
			{
				$scope.rotateEventStatus(calEvent);
			}
			else if($(jsEvent.target).is(".event-encounter"))
			{
				window.open($scope.getEncounterLink(calEvent));
			}
			else if($(jsEvent.target).is(".event-invoice"))
			{
				window.open($scope.getBillingLink(calEvent));
			}
			else if($(jsEvent.target).is(".event-demographic"))
			{
				$scope.openPatientDemographic(calEvent);
			}
			else if($(jsEvent.target).is(".event-rx"))
			{
				window.open($scope.getRxLink(calEvent));
			}
			else
			{
				$scope.openEditEventDialog(calEvent);
			}
		};

		$scope.onEventDrop = function onEventDrop(
			calEvent, delta, revertFunc, jsEvent, ui, view)
		{
			if(!securityService.hasPermission('scheduling_create') )
			{
				revertFunc();
				return;
			}

			// event was dragged and dropped on the calendar:
			// load then update the start and end time based on the delta
			$scope.setCalendarLoading(true);

			var appointment = angular.copy(calEvent.data);
			appointment.providerNo = calEvent.resourceId

			$scope.moveEvent(appointment, delta, true).then(
				function success(eventData)
				{
					var startMoment = moment(eventData.startTime, "YYYY-MM-DDTHH:mm:ss.SSS+ZZZZ", false);
					var endMoment = moment(eventData.endTime, "YYYY-MM-DDTHH:mm:ss.SSS+ZZZZ", false);

					calEvent.data.startTime = Juno.Common.Util.formatMomentTime(
						startMoment, Juno.Common.Util.settings.datetime_no_timezone_format);
					calEvent.data.endTime = Juno.Common.Util.formatMomentTime(
						endMoment, Juno.Common.Util.settings.datetime_no_timezone_format);

					calEvent.data.providerNo = eventData.providerNo;

					$scope.setCalendarLoading(false);

				}, function error(errors)
				{
					console.log('failed to save event', errors);

					// revert on fail
					revertFunc();
					$scope.setCalendarLoading(false);
				});
		};

		$scope.onEventResize = function onEventResize(calEvent, delta, revertFunc, jsEvent, ui, view)
		{
			if(!securityService.hasPermission('scheduling_create') )
			{
				revertFunc();
				return;
			}

			// event was extended by dragging the end of the event on the calendar:
			// load then update the end time based on the delta
			$scope.setCalendarLoading(true);

			var appointment = angular.copy(calEvent.data);
			appointment.providerNo = calEvent.resourceId

			$scope.moveEvent(appointment, delta, false).then(
				function success(eventData)
				{
					var startMoment = moment(eventData.startTime, "YYYY-MM-DDTHH:mm:ss.SSS+ZZZZ", false);
					var endMoment = moment(eventData.endTime, "YYYY-MM-DDTHH:mm:ss.SSS+ZZZZ", false);

					calEvent.data.startTime = Juno.Common.Util.formatMomentTime(
						startMoment, Juno.Common.Util.settings.datetime_no_timezone_format);
					calEvent.data.endTime = Juno.Common.Util.formatMomentTime(
						endMoment, Juno.Common.Util.settings.datetime_no_timezone_format);

					calEvent.data.providerNo = eventData.providerNo;

					//$scope.update_event(calEvent);

					$scope.setCalendarLoading(false);

				}, function error(errors)
				{
					console.log('failed to resize event', errors);

					// revert on fail
					revertFunc();
					$scope.setCalendarLoading(false);
				}
			);
		};

		$scope.onSiteChanged = function onSiteChanged()
		{
			return $scope.onScheduleChanged();
		};

		$scope.onScheduleChanged = function onScheduleChanged()
		{
			var selectedSchedule = $scope.selectedSchedule;
			var selectedSiteName = $scope.selectedSiteName;

			if(!Juno.Common.Util.exists(selectedSchedule))
			{
				return;
			}

			if(Juno.Common.Util.exists(selectedSiteName))
			{
				$scope.selectedSiteName = selectedSiteName;
			}
			else
			{
				$scope.selectedSiteName = null;
			}

			// reload the schedule and then events data, triggering a rerender
			$scope.loadSelectedSchedules().then($scope.refetchEvents);
		};

		$scope.onTimeIntervalChanged = function onTimeIntervalChanged()
		{
			$scope.scheduleTimeInterval = $scope.selectedTimeInterval;

			// updating the config will automatically trigger an events refresh
			$scope.uiConfig.calendar.slotDuration = $scope.selectedTimeInterval;
			$scope.uiConfig.calendar.slotLabelInterval = $scope.selectedTimeInterval;

			$scope.applyUiConfig($scope.uiConfig);
		};


		//=========================================================================
		// Init methods pulled from the directive controller
		//=========================================================================/

		// Loads the schedule dropdown options from the API.  Sets the following:
		// $scope.schedule_options - the array used to build the schedule selection dropdown.
		// $scope.resourceOptionHash - table to look up schedule information by providerNo.  This is
		//                               used to create the resource view headers.
		$scope.loadScheduleOptions = function loadScheduleOptions()
		{
			var deferred = $q.defer();

			scheduleService.getScheduleGroups().then(
				function success(results)
				{
					for(var i = 0; i < results.length; i++)
					{
						var scheduleData = results[i];

						results[i].uuid = results[i].identifier;

						$scope.scheduleOptions.push(scheduleData);

						// Get the possible resources by inferring that the group is a provider
						// by checking if the array has one entry and matches the identifier
						// Also uses fields specific to Juno.
						// TODO: CHANGE THIS!!
						if(
							angular.isArray(scheduleData.providerNos) &&
							scheduleData.providerNos.length == 1 &&
							scheduleData.providerNos[0].toString() == scheduleData.identifier
						)
						{
							var providerNo = scheduleData.providerNos[0];

							$scope.resourceOptionHash[providerNo] = {
								'id': providerNo,
								'uuid': providerNo,
								'name': providerNo,
								'title': scheduleData.name,
								'display_name': scheduleData.name
							};
						}
					}
					deferred.resolve(results);
				});

			return deferred.promise;
		};

		// Load the list of available sites from the API.  Sets the following:
		// $scope.sites - a table to lookup a site's info by name
		// $scope.site_options - the options for the site selection dropdown
		$scope.loadSiteOptions = function loadSiteOptions()
		{
			var deferred = $q.defer();

			$scope.loadSites().then(
				function success(results)
				{
					$scope.sites = {};
					$scope.siteOptions = [];
					if(angular.isArray(results) && results.length > 0)
					{
						// Fill up lookup table
						for(var i = 0; i < results.length; i++)
						{
							$scope.sites[results[i].name] = results[i];
						}

						// Create the dropdown options
						$scope.siteOptions = [
							{
								uuid: null,
								name: null,
								display_name: "All",
							}
						];

						$scope.siteOptions = $scope.siteOptions.concat(results);
					}

					deferred.resolve(results);
				});

			return deferred.promise;
		};

		$scope.loadSites = function loadSites()
		{
			var deferred = $q.defer();

			scheduleService.getSites().then(
				function success(results)
				{
					var out = [];
					if(angular.isArray(results))
					{
						for(var i = 0; i < results.length; i++)
						{
							out.push({
								uuid: results[i].siteId,
								name: results[i].name,
								display_name: results[i].name,
								color: results[i].bgColor,
							});
						}
					}
					deferred.resolve(out);
				}
			);

			return deferred.promise;
		};


		//=========================================================================
		// Watches
		//=========================================================================/

		$scope.$watch('scheduleService.selectedDate', function(newValue, oldValue)
		{
			// avoid running first time this fires during initialization
			if(newValue !== oldValue)
			{
				$scope.changeDate(newValue);
			}
		});


		//=========================================================================
		// Config Array
		//=========================================================================/

		$scope.applyUiConfig = function applyUiConfig(uiConfig)
		{
			$scope.uiConfigApplied = angular.copy(uiConfig);
		};

		$scope.initEventsAutoRefresh = function initEventsAutoRefresh()
		{
			var deferred = $q.defer();

			// if there is already a refresh set up, stop it
			var refresh = $scope.scheduleAutoRefresh;
			if(refresh !== null)
			{
				clearInterval(refresh);
			}

			// get the refresh interval from preferences, or use default
			var minutes = $scope.scheduleAutoRefreshMinutes;
			if(!Juno.Common.Util.exists(minutes) || !Juno.Common.Util.isIntegerString(minutes))
			{
				minutes = $scope.defaultAutoRefreshMinutes;
			}
			else
			{
				minutes = parseInt(minutes);
			}

			if(minutes > 0)
			{
				// start the auto refresh and save its ID to global state
				$scope.scheduleAutoRefresh = setInterval($scope.refetchEvents, minutes * 60 * 1000);
			}

			deferred.resolve();

			return deferred.promise;
		};

		// Any changes to this array need to be applied by calling applyUiConfig()
		$scope.uiConfig = {
			calendar: {
				height: 'auto', //$scope.get_schedule_height(),
				nowIndicator: true,
				header: {
					left: 'prev,next today title',
					center: '',
					right: ''
				},

				allDaySlot: false,

				defaultView: null,
				defaultDate: $scope.defaultDate,
				slotDuration: $scope.selectedTimeInterval,
				slotLabelInterval: $scope.selectedTimeInterval,
				slotLabelFormat: 'h:mma',

				loading: $scope.setCalendarLoading,

				selectable: true,
				select: $scope.openCreateEventDialog,
				eventClick: $scope.onEventClicked,
				eventRender: $scope.onEventRender,
				viewRender: $scope.onViewRender,
				eventAfterAllRender: $scope.afterRender,

				editable: true,
				eventDrop: $scope.onEventDrop,
				eventResize: $scope.onEventResize,
				schedulerLicenseKey: "GPL-My-Project-Is-Open-Source"
			}
		};

		$scope.init();
	}
]);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! moment */ "./node_modules/moment/moment.js"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/settings/changePasswordController.js":
/*!**************************************************!*\
  !*** ./src/settings/changePasswordController.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Settings').controller('Settings.ChangePasswordController', [

	'$scope',
	'$uibModalInstance',

	function(
		$scope,
		$uibModalInstance)
	{

		$scope.close = function()
		{
			$uibModalInstance.close("Someone Closed Me");
		};

		$scope.changePassword = function()
		{
			console.log('password saved - NOT');
			$uibModalInstance.close("Someone Saved Me");
		};
	}
]);

/***/ }),

/***/ "./src/settings/module.js":
/*!********************************!*\
  !*** ./src/settings/module.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('Settings', ['Common', 'Common.Services']);

/***/ }),

/***/ "./src/settings/quickLinkController.js":
/*!*********************************************!*\
  !*** ./src/settings/quickLinkController.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Settings').controller('Settings.QuickLinkController', [

	'$scope',
	'$uibModalInstance',

	function(
		$scope,
		$uibModalInstance)
	{

		$scope.qll = {};

		$scope.close = function()
		{
			$uibModalInstance.close();
		};

		$scope.addQuickLink = function(qlForm)
		{
			if (qlForm.$valid)
			{
				//	alert($scope.qll.toSource());
				$uibModalInstance.close($scope.qll);
			}
		};
	}
]);

/***/ }),

/***/ "./src/settings/settingsController.js":
/*!********************************************!*\
  !*** ./src/settings/settingsController.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Settings').controller('Settings.SettingsController', [

	'$scope',
	'$http',
	'$state',
	'$uibModal',
	'$filter',
	'providerList',
	'user',
	'billingServiceTypes',
	'loadedSettings',
	'providerService',
	'encounterForms',
	'eforms',
	'teams',
	'groupNames',
	'loadedApps',
	'appService',

	function(
		$scope,
		$http,
		$state,
		$uibModal,
		$filter,
		providerList,
		user,
		billingServiceTypes,
		loadedSettings,
		providerService,
		encounterForms,
		eforms,
		teams,
		groupNames,
		loadedApps,
		appService)
	{

		var controller = this;

		$scope.$emit('configureShowPatientList', false);

		controller.providerList = providerList;
		controller.user = user;
		controller.billingServiceTypes = billingServiceTypes;
		controller.pref = loadedSettings;
		controller.encounterForms = encounterForms.content;
		controller.eforms = eforms;
		controller.loadedApps = loadedApps;

		if (controller.pref.recentPatients == null)
		{
			controller.pref.recentPatients = "8";
		}

		//convert to value/label object list from string array
		controller.formGroupNames = [
		{
			"value": "",
			"label": "None"
		}];
		for (var i = 0; i < groupNames.length; i++)
		{
			controller.formGroupNames.push(
			{
				"value": groupNames[i],
				"label": groupNames[i]
			});
		}


		//convert to value/label obj list. Add all/none
		controller.teams = [
		{
			"value": "-1",
			"label": "All"
		}];
		for (var i = 0; i < teams.length; i++)
		{
			controller.teams.push(
			{
				"value": teams[i],
				"label": teams[i]
			});
		}
		controller.teams.push(
		{
			"value": "",
			"label": "None"
		});

		//add none -option to start.
		controller.billingServiceTypesMod = [];
		angular.copy(controller.billingServiceTypes, controller.billingServiceTypesMod);
		controller.billingServiceTypesMod.splice(0, 0,
		{
			"type": "no",
			"name": "--None--"
		});

		//this needs to be done to do the weird checkbox lists. basically add a property to each encounterList object called checked:[true|false]
		for (var i = 0; i < controller.pref.appointmentScreenForms.length; i++)
		{
			var selected = $filter('filter')(controller.encounterForms,
			{
				formName: controller.pref.appointmentScreenForms[i]
			});
			if (selected != null)
			{
				for (var x = 0; x < selected.length; x++)
				{
					if (selected[x].formName === controller.pref.appointmentScreenForms[i])
					{
						selected[x].checked = true;
					}
				}
			}
		}

		//this needs to be done to do the weird checkbox lists. basically add a property to each encounterList object called checked:[true|false]
		for (var i = 0; i < controller.pref.appointmentScreenEforms.length; i++)
		{
			var selected = $filter('filter')(controller.eforms,
			{
				id: controller.pref.appointmentScreenEforms[i]
			});
			if (selected != null)
			{
				for (var x = 0; x < selected.length; x++)
				{
					if (selected[x].id === controller.pref.appointmentScreenEforms[i])
					{
						selected[x].checked = true;
					}
				}
			}
		}


		controller.tabs = [
		{
			id: 0,
			displayName: 'Persona',
			path: 'persona'
		},
		{
			id: 1,
			displayName: 'General',
			path: 'general'
		},
		{
			id: 2,
			displayName: 'Schedule',
			path: 'schedule'
		},
		{
			id: 3,
			displayName: 'Billing',
			path: 'billing'
		},
		{
			id: 4,
			displayName: 'Rx',
			path: 'rx'
		},
		{
			id: 5,
			displayName: 'Master Demographic',
			path: 'masterdemo'
		},
		{
			id: 6,
			displayName: 'Consultations',
			path: 'consults'
		},
		{
			id: 7,
			displayName: 'Documents',
			path: 'documents'
		},
		{
			id: 8,
			displayName: 'Summary',
			path: 'summary'
		},
		{
			id: 9,
			displayName: 'eForms',
			path: 'eforms'
		},
		{
			id: 10,
			displayName: 'Inbox',
			path: 'inbox'
		},
		{
			id: 11,
			displayName: 'Programs',
			path: 'programs'
		},
		{
			id: 12,
			displayName: 'Integration',
			path: 'integration'
		}, ];
		controller.pageSizes = [
		{
			value: 'PageSize.A4',
			label: 'A4'
		},
		{
			value: 'PageSize.A6',
			label: 'A6'
		}];

		controller.rxInteractionWarningLevels = [
		{
			value: '0',
			label: 'Not Specified'
		},
		{
			value: '1',
			label: 'Low'
		},
		{
			value: '2',
			label: 'Medium'
		},
		{
			value: '3',
			label: 'High'
		},
		{
			value: '4',
			label: 'None'
		}];

		controller.staleDates = [
		{
			value: 'A',
			label: 'All'
		},
		{
			value: '0',
			label: '0'
		},
		{
			value: '-1',
			label: '-1'
		},
		{
			value: '-2',
			label: '2'
		},
		{
			value: '-3',
			label: '3'
		},
		{
			value: '-4',
			label: '4'
		},
		{
			value: '-5',
			label: '5'
		},
		{
			value: '-6',
			label: '6'
		},
		{
			value: '-7',
			label: '7'
		},
		{
			value: '-8',
			label: '8'
		},
		{
			value: '-9',
			label: '9'
		},
		{
			value: '-10',
			label: '10'
		},
		{
			value: '-11',
			label: '11'
		},
		{
			value: '-12',
			label: '12'
		},
		{
			value: '-13',
			label: '13'
		},
		{
			value: '-14',
			label: '14'
		},
		{
			value: '-15',
			label: '15'
		},
		{
			value: '-16',
			label: '16'
		},
		{
			value: '-17',
			label: '17'
		},
		{
			value: '-18',
			label: '18'
		},
		{
			value: '-19',
			label: '19'
		},
		{
			value: '-20',
			label: '20'
		},
		{
			value: '-21',
			label: '21'
		},
		{
			value: '-22',
			label: '22'
		},
		{
			value: '-23',
			label: '23'
		},
		{
			value: '-24',
			label: '24'
		},
		{
			value: '-25',
			label: '25'
		},
		{
			value: '-26',
			label: '26'
		},
		{
			value: '-27',
			label: '27'
		},
		{
			value: '-28',
			label: '28'
		},
		{
			value: '-29',
			label: '29'
		},
		{
			value: '-30',
			label: '30'
		},
		{
			value: '-31',
			label: '31'
		},
		{
			value: '-32',
			label: '32'
		},
		{
			value: '-33',
			label: '33'
		},
		{
			value: '-34',
			label: '34'
		},
		{
			value: '-35',
			label: '35'
		},
		{
			value: '-36',
			label: '36'
		}, ];

		controller.olisLabs = [
		{
			value: '',
			label: ''
		},
		{
			value: '5552',
			label: 'Gamma-Dynacare'
		},
		{
			value: '5407',
			label: 'CML'
		},
		{
			value: '5687',
			label: 'LifeLabs'
		}];

		controller.pasteFormats = [
		{
			value: 'single',
			label: 'Single Line'
		},
		{
			value: 'multi',
			label: 'Multi Line'
		}];

		controller.letterHeadNameDefaults = [
		{
			value: '1',
			label: 'Provider (user)'
		},
		{
			value: '2',
			label: 'MRP'
		},
		{
			value: '3',
			label: 'Clinic'
		}];

		if (controller.pref.consultationLetterHeadNameDefault == null)
		{
			controller.pref.consultationLetterHeadNameDefault = "1";
		}


		if ($state.current.data !== undefined)
		{
			controller.currentTab = $filter('filter')(controller.tabs, {path: $state.current.data.tab})[0];
		}
		else
		{
			controller.currentTab = controller.tabs[0];
		}


		controller.isActive = function(tab)
		{
			return (tab != null && controller.currentTab != null && tab.id == controller.currentTab.id);
		};

		controller.changeTab = function(tab)
		{
			controller.currentTab = tab;
			$state.go('settings.' + tab.path);
		};

		controller.save = function()
		{
			var newList = [];
			for (var i = 0; i < controller.pref.appointmentScreenQuickLinks.length; i++)
			{
				if (controller.pref.appointmentScreenQuickLinks[i].checked == null || controller.pref.appointmentScreenQuickLinks[i].checked == false)
				{
					newList.push(
					{
						name: controller.pref.appointmentScreenQuickLinks[i].name,
						url: controller.pref.appointmentScreenQuickLinks[i].url
					});
				}
			}
			controller.pref.appointmentScreenQuickLinks = newList;

			providerService.saveSettings(controller.user.providerNo, controller.pref).then(function(data)
			{
				alert('saved');
			});

		};

		controller.cancel = function()
		{
			controller.pref = {};
			$state.go('dashboard');
		};

		controller.selectEncounterForms = function()
		{
			var selected = $filter('filter')(controller.encounterForms,
			{
				checked: true
			});
			var tmp = [];
			for (var i = 0; i < selected.length; i++)
			{
				tmp.push(selected[i].formName);
			}
			controller.pref.appointmentScreenForms = tmp;
		};

		controller.selectEForms = function()
		{
			var selected = $filter('filter')(controller.eforms,
			{
				checked: true
			});
			var tmp = [];
			for (var i = 0; i < selected.length; i++)
			{
				tmp.push(selected[i].id);
			}
			controller.pref.appointmentScreenEforms = tmp;
		};

		controller.removeQuickLinks = function()
		{
			var newList = [];

			for (var i = 0; i < controller.pref.appointmentScreenQuickLinks.length; i++)
			{
				if (controller.pref.appointmentScreenQuickLinks[i].checked == null || controller.pref.appointmentScreenQuickLinks[i].checked == false)
				{
					newList.push(controller.pref.appointmentScreenQuickLinks[i]);
				}
			}
			controller.pref.appointmentScreenQuickLinks = newList;
		};


		controller.openChangePasswordModal = function()
		{
			/*
        var modalInstance = $uibModal.open({
        	templateUrl: 'src/settings/changePassword.jsp',
            controller: 'ChangePasswordController'
        });
     */
			window.open('../provider/providerchangepassword.jsp', 'change_password', 'width=750,height=500');
		};


		controller.openQuickLinkModal = function()
		{
			var modalInstance = $uibModal.open(
			{
				templateUrl: 'src/settings/quickLink.jsp',
				controller: 'QuickLinkController'
			});

			modalInstance.result.then(function(selectedItem)
			{
				if (selectedItem != null)
				{
					if (selectedItem != null && selectedItem.name != null && selectedItem.url != null)
					{
						controller.pref.appointmentScreenQuickLinks.push(selectedItem);
					}
				}
			});
		};

		controller.editDocumentTemplates = function()
		{
			window.open('../admin/displayDocumentDescriptionTemplate.jsp', 'document_templates', 'width=700,height=450');
		};

		controller.showProviderColourPopup = function()
		{
			window.open('../provider/providerColourPicker.jsp', 'provider_colour', 'width=700,height=450');
		};

		controller.showDefaultEncounterWindowSizePopup = function()
		{
			window.open('../setProviderStaleDate.do?method=viewEncounterWindowSize', 'encounter_window_sz', 'width=700,height=450');
		};

		controller.openConfigureEChartCppPopup = function()
		{
			window.open('../provider/CppPreferences.do', 'configure_echart_cpp', 'width=700,height=450');
		};

		controller.openManageAPIClientPopup = function()
		{
			window.open('../provider/clients.jsp', 'api_clients', 'width=700,height=450');
		};

		controller.openMyOscarUsernamePopup = function()
		{
			window.open('../provider/providerIndivoIdSetter.jsp', 'invivo_setter', 'width=700,height=450');
		};

		controller.authenticate = function(app)
		{
			window.open('../apps/oauth1.jsp?id=' + app.id, 'appAuth', 'width=700,height=450');
		};

		controller.refreshAppList = function()
		{
			console.log("refresh", controller.loadedApps);
			appService.getApps().then(function(data)
				{
					controller.loadedApps = data;
				},
				function(errorMessage)
				{
					console.log("applist:" + errorMessage);
				}
			);
			///
			console.log("refresh", controller.loadedApps);
		};
	}
]);

/***/ }),

/***/ "./src/tickler/module.js":
/*!*******************************!*\
  !*** ./src/tickler/module.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('Tickler', ['Common', 'Common.Services', 'Common.Filters']);

/***/ }),

/***/ "./src/tickler/ticklerAddController.js":
/*!*********************************************!*\
  !*** ./src/tickler/ticklerAddController.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($, moment) {angular.module('Tickler').controller('Tickler.TicklerAddController', [

	'$scope',
	'$uibModalInstance',
	'$filter',
	'$stateParams',
	'demographicService',
	'demographicsService',
	'providerService',
	'ticklerService',

	function(
		$scope,
		$uibModalInstance,
		$filter,
		$stateParams,
		demographicService,
		demographicsService,
		providerService,
		ticklerService)
	{

		var controller = this;

		// holds the patient typeahead selection
		controller.demographicSearch = null;

		//=========================================================================
		// Watches
		//=========================================================================

		// $scope.$watch('controller.demographicSearch',

		// 	function(new_value)
		// 	{
		// 		console.log('watching demographicSearch: ', new_value);

		// 		if (Juno.Common.Util.exists(new_value))
		// 		{
		// 			controller.updateDemographicNo(new_value);
		// 		}
		// 		else
		// 		{
		// 			// no selection
		// 			controller.updateDemographicNo(null);
		// 		}
		// 	}, true);

		controller.tickler = {
			template:
			{
				id: 1,
				name: ''
			},
			serviceDateDate: new Date(),
			serviceDateTime: "12:00 AM",
			suggestedTextId: 0
		};

		controller.priorities = ['Low', 'Normal', 'High'];

		// initialization
		controller.init = function init()
		{
			if (Juno.Common.Util.exists($stateParams.demographicNo))
			{
				console.log('initializing demographicSearch pre-selected', $stateParams.demographicNo);
				demographicService.getDemographic($stateParams.demographicNo).then(function(data)
				{
					controller.demographicSearch = {
						demographicNo: data.demographicNo,
						firstName: data.firstName,
						lastName: data.lastName,
						name: data.lastName + "," + data.firstName // For display purposes
					};
					controller.updateDemographicNo(data);
				});
			}

			$('#timepicker').timepicker({defaultTime: controller.tickler.serviceDateTime});
		};

		ticklerService.getTextSuggestions().then(function(data)
		{
			controller.textSuggestions = data.content;
			controller.textSuggestions.unshift(
			{
				id: 0,
				suggestedText: ''
			});
		}, function(reason)
		{
			alert(reason);
		});

		controller.close = function()
		{
			$uibModalInstance.close(false);
		};

		controller.validate = function()
		{
			var t = controller.tickler;
			controller.errors = [];

			if (t.demographic == null)
			{
				controller.errors.push('You must select a patient');
			}
			if (t.taskAssignedTo == null || t.taskAssignedTo.length == 0)
			{
				controller.errors.push('You must assign a provider');
			}
			if (t.message == null || t.message.length == 0)
			{
				controller.errors.push('Message is required');
			}
			if (controller.errors.length > 0)
			{
				return false;
			}
			return true;
		};

		controller.save = function()
		{
			controller.showErrors = true;
			if (!controller.validate())
			{
				return;
			}

			var t = {};
			t.demographicNo = controller.tickler.demographic.demographicNo;
			t.taskAssignedTo = controller.tickler.taskAssignedTo;
			t.priority = controller.tickler.priority;
			t.status = 'A';
			t.message = controller.tickler.message;

			var givenDate = controller.tickler.serviceDateDate;
			var givenTime = moment(controller.tickler.serviceDateTime, 'hh:mm A');
			givenDate.setHours(givenTime.get('hour'));
			givenDate.setMinutes(givenTime.get('minute'));

			t.serviceDate = givenDate;
			ticklerService.add(t).then(function(data)
			{
				$uibModalInstance.close(true);
			}, function(reason)
			{
				alert(reason);
			});


		};

		controller.updateDemographicNo = function updateDemographicNo(demo)
		{
			if (Juno.Common.Util.exists(demo))
			{
				demographicService.getDemographic(demo.demographicNo).then(function(data)
				{
					// update the selected value on the tickler object
					controller.tickler.demographic = data;
					console.log('set controller.tickler.demographic: ', controller.tickler.demographic);
				});
			}
			else
			{
				controller.tickler.demographic = null;
			}
		};

		controller.searchPatients = function searchPatients(term)
		{
			var search = {
				type: 'Name',
				'term': term,
				status: 'active',
				integrator: false,
				outofdomain: true
			};
			return demographicsService.search(search, 0, 25).then(
				function(results)
				{
					var resp = [];
					for (var x = 0; x < results.content.length; x++)
					{
						resp.push(
						{
							demographicNo: results.content[x].demographicNo,
							name: results.content[x].lastName + ',' + results.content[x].firstName
						});
					}
					return resp;
				},
				function error(errors)
				{
					console.log(errors);
				});
		};

		controller.searchProviders = function(val)
		{
			var search = {
				searchTerm: val,
				active: true
			};
			return providerService.searchProviders(search, 0, 10).then(function(response)
			{
				var resp = [];
				for (var x = 0; x < response.length; x++)
				{
					resp.push(
					{
						providerNo: response[x].providerNo,
						name: response[x].firstName + ' ' + response[x].lastName
					});
				}
				return resp;
			});
		};

		controller.updateProviderNo = function(item, model, label)
		{
			controller.tickler.taskAssignedTo = model;
			controller.tickler.taskAssignedToName = label;
		};

		controller.setSuggestedText = function()
		{
			var results = $filter('filter')(controller.textSuggestions,
			{
				id: controller.tickler.suggestedTextId
			}, true);

			if (results != null)
			{
				controller.tickler.message = results[0].suggestedText;
			}
		};

		controller.addMonthsFromNow = function(num)
		{
			controller.tickler.serviceDateDate = moment().add(num, 'months').toDate();
		};
	}
]);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"), __webpack_require__(/*! moment */ "./node_modules/moment/moment.js")))

/***/ }),

/***/ "./src/tickler/ticklerCommentController.js":
/*!*************************************************!*\
  !*** ./src/tickler/ticklerCommentController.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Tickler').controller('Tickler.TicklerCommentController', [

	'$scope',
	'$uibModalInstance',
	'tickler',

	function(
		$scope,
		$uibModalInstance,
		tickler)
	{

		var controller = this;

		controller.tickler = tickler;

		controller.close = function()
		{
			$uibModalInstance.close("Someone Closed Me");
		};
	}
]);

/***/ }),

/***/ "./src/tickler/ticklerListController.js":
/*!**********************************************!*\
  !*** ./src/tickler/ticklerListController.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Tickler').controller('Tickler.TicklerListController', [

	'$scope',
	'$timeout',
	'$resource',
	'$uibModal',
	'$http',
	'$stateParams',
	'$filter',
	'NgTableParams',
	'securityService',
	'ticklerService',
	'noteService',
	'providerService',
	'providers',


	function(
		$scope,
		$timeout,
		$resource,
		$uibModal,
		$http,
		$stateParams,
		$filter,
		NgTableParams,
		securityService,
		ticklerService,
		noteService,
		providerService,
		providers)
	{

		var controller = this;

		var ticklerAPI = $resource('../ws/rs/tickler/ticklers');

		controller.lastResponse = ""; // Can be removed?
		controller.providers = providers;


		securityService.hasRights(
		{
			items: [
			{
				objectName: '_tickler',
				privilege: 'w'
			},
			{
				objectName: '_tickler',
				privilege: 'r'
			}]
		}).then(function(result)
		{
			if (result.content != null && result.content.length == 2)
			{
				controller.ticklerWriteAccess = result.content[0];
				controller.ticklerReadAccess = result.content[1];

				if (controller.ticklerReadAccess)
				{

					//object which represents all the filters, initialize status.
					controller.search = {
						status: 'A'
					};


					controller.tableParams = new NgTableParams(
					{
						page: 1, // show first page
						count: 10,// initial count per page
						sorting: {
							ServiceDate: "desc"
						}
					},
					{
						// total: 0, // length of data
						getData: function(params)
						{
							// ajax request to api
							controller.search.count = params.url().count;
							controller.search.page = params.url().page;
							controller.search.includeLinks = 'true';
							controller.search.includeComments = 'true';
							controller.search.includeUpdates = 'true';
							controller.search.includeProgram = true;

							// need to parse out the ng-tables sort column/direction values
							// for use in our get parameters.
							var myRegexp = /sorting\[(\w+)\]/g;
							for(var key in params.url()) {
								var match = myRegexp.exec(String(key));
								if(match) {
									controller.search.sortColumn = match[1];
									controller.search.sortDirection = params.url()[String(key)];
								}
							}

							if (angular.isDefined($stateParams.demographicNo))
							{
								controller.search.demographicNo = $stateParams.demographicNo;
							}

							return ticklerAPI.get(controller.search).$promise.then(function(data)
							{
								params.total(data.total); // recal. page nav controls
								var ticklerList = data.content;
								// Grab URLs for tickler links
								for (var i = 0; i < ticklerList.length; i++){
									if (ticklerList[i].ticklerLinks.length > 0 )
                                        ticklerList[i].ticklerLinkUrl = controller.getLinkUrl(ticklerList[i].ticklerLinks[0]);
								}

								return data.content;
							});
						}
					});
				}
			}
			else
			{
				alert('failed to load rights');
			}
		}, function(reason)
		{
			alert(reason);
		});

		controller.doSearch = function()
		{
			controller.tableParams.reload();
		};

		controller.clear = function()
		{
			controller.search = angular.copy(
			{
				status: 'A'
			});
			controller.tableParams.reload();
		};

		controller.checkAll = function checkAll(data)
		{
			angular.forEach(data, function(tickler)
			{
				tickler.checked = true;
			});
		};

		// controller.checkAll = function()
		// {

		// 	angular.forEach(controller.lastResponse, function(item)
		// 	{
		// 		item.checked = true;
		// 	});
		// };

		controller.checkNone = function checkNone(data)
		{
			angular.forEach(data, function(tickler)
			{
				tickler.checked = false;
			});
		};

		controller.completeTicklers = function()
		{
			var selectedTicklers = [];
			angular.forEach(controller.tableParams.data, function(item)
			{
				if (item.checked)
				{
					selectedTicklers.push(item.id);
				}
			});

			ticklerService.setCompleted(selectedTicklers).then(function(data)
			{
				controller.tableParams.reload();
			}, function(reason)
			{
				alert(reason);
			});
		};

		controller.deleteTicklers = function()
		{
			var selectedTicklers = [];
			angular.forEach(controller.tableParams.data, function(item)
			{
				if (item.checked)
				{
					selectedTicklers.push(item.id);
				}
			});

			ticklerService.setDeleted(selectedTicklers).then(function(data)
			{
				controller.tableParams.reload();
			}, function(reason)
			{
				alert(reason);
			});

		};

		controller.addTickler = function()
		{
			var windowProps = "height=400,width=600,location=no,scrollbars=yes,menubars=no,toolbars=no,resizable=yes";
			//window.open('../tickler/ticklerAdd.jsp','ticklerAdd',windowProps);

			var modalInstance = $uibModal.open(
			{
				templateUrl: 'src/tickler/ticklerAdd.jsp',
				controller: 'Tickler.TicklerAddController as ticklerAddCtrl',
				backdrop: 'static',
				size: 'lg'
			});

			modalInstance.result.then(function(data)
			{
				console.log('data from modalInstance ' + data);
				if (data != null && data == true)
				{
					controller.tableParams.reload();
				}
			}, function(reason)
			{
				alert(reason);
			});


		};

		controller.editTickler = function(tickler)
		{

			var modalInstance = $uibModal.open(
			{
				templateUrl: 'src/tickler/ticklerView.jsp',
				controller: 'Tickler.TicklerViewController as ticklerViewCtrl',
				backdrop: 'static',
				size: 'lg',
				resolve:
				{
					tickler: function()
					{
						return tickler;
					},
					ticklerNote: function()
					{
						return noteService.getTicklerNote(tickler.id);
					},
					ticklerWriteAccess: function()
					{
						return controller.ticklerWriteAccess;
					},
					me: function()
					{
						return providerService.getMe();
					}
				}
			});

			modalInstance.result.then(function(data)
			{
				console.log('data from modalInstance ' + data);
				if (data != null && data == true)
				{
					controller.tableParams.reload();
				}
			}, function(reason)
			{
				alert(reason);
			});

		};

		controller.editNote2 = function(tickler)
		{

			noteService.getTicklerNote(tickler.id).then(function(data)
			{
				if (data.ticklerNote != null)
				{
					controller.ticklerNote = data.ticklerNote;
				}
				else
				{
					controller.ticklerNote = {
						"editor": "you",
						"note": "",
						"noteId": 0,
						"observationDate": "now",
						"revision": 0
					};

				}
				var modalInstance = $uibModal.open(
				{
					templateUrl: 'src/tickler/ticklerNote.jsp',
					controller: 'Tickler.TicklerNoteController as ticklerNoteCtrl',
					backdrop: 'static',
					resolve:
					{
						ticklerNote: function()
						{
							return controller.ticklerNote;
						},
						tickler: function()
						{
							return tickler;
						}
					}
				});
			}, function(reason)
			{
				alert(reason);
			});

		};

		controller.showComments = function(tickler)
		{
			controller.tickler = tickler;
			var modalInstance = $uibModal.open(
			{
				templateUrl: 'src/tickler/ticklerComments.jsp',
				controller: 'Tickler.TicklerCommentController as ticklerCommentCtrl',
				backdrop: 'static',
				resolve:
				{
					tickler: function()
					{
						return controller.tickler;
					}
				}
			});
		};

		controller.printArea = function()
		{
			window.print();
		};

		controller.getLinkUrl = function getLinkUrl(input)
		{
            if (input !== null && input.id !== null)
            {
                var url = "";

                if (input.tableName === 'CML')
                {
                    url = "../lab/CA/ON/CMLDisplay.jsp?segmentID=" + input.tableId;
                }
                else if (input.tableName === 'MDS')
                {
                    url = "../oscarMDS/SegmentDisplay.jsp?segmentID=" + input.tableId;
                }
                else if (input.tableName === 'HL7')
                {
                    url = "../lab/CA/ALL/labDisplay.jsp?segmentID=" + input.tableId;
                }
                else if (input.tableName === 'DOC')
                {
                    url = "../dms/ManageDocument.do?method=display&doc_no=" + input.tableId;
                }
                return url;
            }

		};
	}
]);

/***/ }),

/***/ "./src/tickler/ticklerNoteController.js":
/*!**********************************************!*\
  !*** ./src/tickler/ticklerNoteController.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('Tickler').controller('Tickler.TicklerNoteController', [

	'$scope',
	'$uibModalInstance',
	'$http',
	'ticklerNote',
	'tickler',
	'noteService',

	function(
		$scope,
		$uibModalInstance,
		$http,
		ticklerNote,
		tickler,
		noteService)
	{

		var controller = this;

		controller.ticklerNote = ticklerNote;
		controller.originalNote = ticklerNote.note;
		controller.tickler = tickler;

		controller.close = function()
		{
			$uibModalInstance.close("Someone Closed Me");
		};
		controller.save = function()
		{
			var updatedNote = controller.ticklerNote.note;
			controller.ticklerNote.tickler = controller.tickler;

			noteService.saveTicklerNote(controller.ticklerNote).then(function(data)
			{
				$uibModalInstance.close("Someone Saved Me");
			}, function(reason)
			{
				alert(reason);
			});
		};
	}
]);

/***/ }),

/***/ "./src/tickler/ticklerViewController.js":
/*!**********************************************!*\
  !*** ./src/tickler/ticklerViewController.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(moment) {angular.module('Tickler').controller('Tickler.TicklerViewController', [

	'$scope',
	'$filter',
	'$uibModalInstance',
	'$timeout',
	'tickler',
	'ticklerService',
	'ticklerNote',
	'ticklerWriteAccess',
	'providerService',
	'me',

	function(
		$scope,
		$filter,
		$uibModalInstance,
		$timeout,
		tickler,
		ticklerService,
		ticklerNote,
		ticklerWriteAccess,
		providerService,
		me)
	{

		var controller = this;

		controller.ticklerUpdate = angular.copy(tickler);

		controller.serviceDateInput = moment(controller.ticklerUpdate.serviceDate).toDate();
		controller.serviceTimeInput = moment(controller.ticklerUpdate.serviceDate).format("hh:mm A");

		controller.me = me;
		controller.ticklerWriteAccess = ticklerWriteAccess;

		//this object keeps track of the changes being made
		// controller.ticklerUpdate = {
		// 	message: controller.tickler.message,

		// 	taskAssignedTo: controller.tickler.taskAssignedTo,
		// 	taskAssignedToName: controller.tickler.taskAssignedName,
		// 	serviceDate: $filter('date')(controller.tickler.serviceDate, 'yyyy-MM-dd'),
		// 	serviceTime: $filter('date')(controller.tickler.serviceDate, 'HH:mm'),

		// };

		controller.needsUpdate = false;
		controller.showUpdates = false;
		controller.showComments = false;
		controller.showCommentFormControl = false;

		// controller.taskAssignedToName = controller.tickler.taskAssignedName;
		controller.priorities = ['Low', 'Normal', 'High'];
		controller.statuses = [
		{
			id: 'A',
			label: 'Active'
		},
		{
			id: 'C',
			label: 'Completed'
		},
		{
			id: 'D',
			label: 'Deleted'
		}];

		if (ticklerNote != null)
		{
			controller.ticklerNote = ticklerNote.ticklerNote;
		}

		// Keep track of the current status as an object containing id and label
		if (tickler != null)
		{
			controller.selectedStatus = controller.statuses.find(function(status)
			{
				return status.id == tickler.status;
			});
		}

		// $scope.$watch('controller.ticklerUpdate.serviceDate',
		// 	function(new_value)
		// 	{
		// 		console.log('change', new_value);

		// 		if (controller.ticklerUpdate.serviceDate instanceof Date && controller.ticklerUpdate.serviceTime instanceof Date)
		// 		{

		// 			controller.ticklerUpdate.serviceDate = new Date(controller.ticklerUpdate.serviceDate.getTime() + controller.ticklerUpdate.serviceTime.getTime());

		// 			console.log('new val', controller.ticklerUpdate.serviceDate);
		// 		}


		// 	}
		// );

		// Watches the date input and updates serviceDate when a change is made
		$scope.$watch(function()
			{
				return controller.serviceDateInput;
			},
			function(newValue)
			{
				var newDate = moment(newValue.getTime()).format("MM-DD-YYYY");
				var finalVal = moment(newDate + "-" + controller.serviceTimeInput, 'MM-DD-YYYY-hh:mm A').toDate().getTime();

				controller.ticklerUpdate.serviceDate = finalVal;
			}
		);

		// Watches the time input and updates serviceDate when a change is made
		$scope.$watch(function()
			{
				return controller.serviceTimeInput;
			},
			function(newValue)
			{
				var date = moment(controller.serviceDateInput.getTime()).format("MM-DD-YYYY");
				var finalVal = moment(date + "-" + newValue, 'MM-DD-YYYY-hh:mm A').toDate().getTime();

				controller.ticklerUpdate.serviceDate = finalVal;
			}
		);

		controller.close = function()
		{
			if (controller.needsUpdate)
			{
				if (confirm("You have unsaved changes, are you sure?"))
				{
					$uibModalInstance.close(false);
				}
			}
			else
			{
				controller.ticklerUpdate = undefined;
				$uibModalInstance.close(false);
			}

		};

		controller.save = function()
		{
			$uibModalInstance.close("Someone Saved Me");
		};

		controller.updateTaskAssignedTo = function(item, model, label)
		{
			controller.needsUpdate = true;
			controller.ticklerUpdate.taskAssignedTo = model;
			controller.ticklerUpdate.taskAssignedToName = label;
			controller.showTaskAssignedToFormControl = false;
		};

		controller.cancelTaskAssignedToUpdate = function()
		{
			controller.ticklerUpdate.taskAssignedTo = null;
			controller.ticklerUpdate.taskAssignedToName = null;

			controller.showTaskAssignedToFormControl = false;

		};

		controller.editServiceDateAndTime = function()
		{
			// controller.ticklerUpdate.serviceDate = $filter('date')(controller.tickler.serviceDate, 'yyyy-MM-dd');
			// controller.ticklerUpdate.serviceTime = $filter('date')(controller.tickler.serviceDate, 'HH:mm');

			controller.showServiceDateAndTimeFormControl = true;
		};


		controller.updateServiceDateAndTime = function()
		{
			var dp = controller.ticklerUpdate.serviceDate.split("-");
			var tp = controller.ticklerUpdate.serviceTime.split(":");

			if (dp.length != 3 || tp.length != 2)
			{
				alert('Invalid Date/time. Please use yyyy-MM-dd and HH:mm formats');
				return;
			}

			var d = new Date(dp[0], parseInt(dp[1]) - 1, dp[2], tp[0], tp[1], 0, 0);

			if (d == null || isNaN(d.getTime()))
			{
				alert('Invalid Date/time. Please use yyyy-MM-dd and HH:mm formats');
				return;
			}
			controller.needsUpdate = true;
			controller.tickler.serviceDate = d;
			controller.showServiceDateAndTimeFormControl = false;
		};

		controller.cancelServiceDateAndTimeUpdate = function()
		{
			controller.ticklerUpdate.serviceDate = null;
			controller.showServiceDateAndTimeFormControl = false;
		};

		controller.editPriority = function()
		{
			// controller.ticklerUpdate.priority = controller.tickler.priority;
			controller.priorities = ['Low', 'Normal', 'High'];

			controller.showPriorityFormControl = true;
		};

		controller.updatePriority = function(newPriority)
		{
			controller.needsUpdate = true;
			// controller.ticklerUpdate.priority = newPriority; // Don't need this anymore?
			controller.showPriorityFormControl = false;
		};


		controller.cancelPriorityUpdate = function()
		{
			controller.ticklerUpdate.priority = null;
			controller.showPriorityFormControl = false;
		};

		controller.editStatus = function()
		{
			// controller.ticklerUpdate.statusName = controller.tickler.statusName;
			// controller.ticklerUpdate.status = controller.tickler.statusName;
			controller.showStatusFormControl = true;
		};

		controller.updateStatus = function(selectedStatus)
		{
			controller.needsUpdate = true;
			controller.ticklerUpdate.status = selectedStatus.id;
			controller.ticklerUpdate.statusName = selectedStatus.label;
			controller.showStatusFormControl = false;
		};

		controller.cancelStatusUpdate = function()
		{
			controller.ticklerUpdate.statusName = null;
			controller.ticklerUpdate.status = null;

			controller.showStatusFormControl = false;

		};

		controller.addComment = function()
		{
			// controller.ticklerUpdate.comment = '';
			controller.showCommentFormControl = true;

		};

		controller.saveComment = function()
		{
			controller.needsUpdate = true;
			if (controller.ticklerUpdate.ticklerComments == null)
			{
				controller.ticklerUpdate.ticklerComments = [];
			}
			var comment = {
				message: controller.ticklerUpdate.comment,
				providerName: me.formattedName,
				providerNo: me.providerNo,
				updateDate: new Date(),
				newComment: true
			};
			controller.ticklerUpdate.ticklerComments.unshift(comment);
			controller.showCommentFormControl = false;
			controller.showComments = true;
		};

		controller.cancelCommentUpdate = function()
		{
			controller.ticklerUpdate.comment = null;
			controller.showCommentFormControl = false;
		};


		controller.searchProviders = function(val)
		{
			var search = {
				searchTerm: val,
				active: true
			};
			return providerService.searchProviders(search, 0, 10).then(function(response)
			{
				var resp = [];
				for (var x = 0; x < response.length; x++)
				{
					resp.push(
					{
						providerNo: response[x].providerNo,
						name: response[x].firstName + ' ' + response[x].lastName
					});
				}
				return resp;
			});
		};

		controller.saveChanges = function()
		{
			if (tickler.message != controller.ticklerUpdate.message)
			{
				controller.needsUpdate = true;
			}
			// if (tickler.serviceDate != controller.ticklerUpdate.serviceDate.getTime())
			// {
			// 	controller.needsUpdate = true;
			// }

			if (tickler.serviceDate != controller.ticklerUpdate.serviceDate)
			{
				controller.needsUpdate = true;
			}

			if (controller.needsUpdate)
			{
				var postData = angular.copy(controller.ticklerUpdate);
				// if (Juno.Common.Util.exists(postData.serviceDate))
				// {
				// 	// postData.serviceDate = postData.serviceDate.getTime();
				// 	console.log('POST DATA: ', postData);
				// }

				console.log('Post DATA: ', postData);

				ticklerService.update(postData).then(function(data)
				{
					$uibModalInstance.close(true);
				});
			}
			else
			{
				$uibModalInstance.close(false);
			}

		};


		controller.completeTickler = function()
		{
			ticklerService.setCompleted([tickler.id]).then(function(data)
			{
				$uibModalInstance.close(true);
			}, function(reason)
			{
				alert(reason);
			});

		};

		controller.deleteTickler = function()
		{
			ticklerService.setDeleted([tickler.id]).then(function(data)
			{
				$uibModalInstance.close(true);
			}, function(reason)
			{
				alert(reason);
			});

		};

		controller.printTickler = function()
		{
			window.open('../Tickler.do?method=print&id=' + tickler.id);

		};
	}
]);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! moment */ "./node_modules/moment/moment.js")))

/***/ }),

/***/ 0:

  !*** multi ../webapp/share/javascript/Oscar.js ./src/common/displayMessages.js ./src/common/util/util.js ./src/common/util/serviceHelper.js ./src/consults/common.js ./app.js ./src/common/module.js ./src/common/util/module.js ./src/common/util/angular-util.js ./src/common/util/junoHttp.js ./src/common/util/searchListHelper.js ./src/common/services/module.js ./src/common/services/appService.js ./src/common/services/autoCompleteService.js ./src/common/services/billingService.js ./src/common/services/consultService.js ./src/common/services/demographicService.js ./src/common/services/demographicsService.js ./src/common/services/diseaseRegistryService.js ./src/common/services/errorsService.js ./src/common/services/faxAccountService.js ./src/common/services/faxInboundService.js ./src/common/services/faxOutboundService.js ./src/common/services/fieldHelperService.js ./src/common/services/focusService.js ./src/common/services/formService.js ./src/common/services/globalStateService.js ./src/common/services/inboxService.js ./src/common/services/k2aService.js ./src/common/services/messageService.js ./src/common/services/noteService.js ./src/common/services/patientDetailStatusService.js ./src/common/services/personaService.js ./src/common/services/programService.js ./src/common/services/providerService.js ./src/common/services/providersService.js ./src/common/services/reportingService.js ./src/common/services/resultsService.js ./src/common/services/scheduleService.js ./src/common/services/securityService.js ./src/common/services/staticDataService.js ./src/common/services/summaryService.js ./src/common/services/systemPreferenceService.js ./src/common/services/ticklerService.js ./src/common/services/reportByTemplateService.js ./src/common/services/uxService.js ./src/common/services/specialistsService.js ./src/common/services/referralDoctorsService.js ./src/common/filters/module.js ./src/common/filters/age.js ./src/common/filters/cut.js ./src/common/filters/offset.js ./src/common/filters/startFrom.js ./src/common/directives/module.js ./src/common/directives/typeaheadHelper.js ./src/common/directives/patientSearchTypeahead.js ./src/common/directives/patientTypeahead.js ./src/common/directives/datepickerPopup.js ./src/common/directives/jqueryUIResizable.js ./src/common/directives/jqueryUIDraggable.js ./src/common/directives/angular-ui-calendar.js ./src/common/directives/selectOptionTooltip.js ./src/common/directives/clinicaid/ca_field_alphadate.js ./src/common/directives/clinicaid/ca_field_alpha.js ./src/common/directives/clinicaid/ca_field_autocomplete.js ./src/common/directives/clinicaid/ca_field_boolean.js ./src/common/directives/clinicaid/ca_field_button_group.js ./src/common/directives/clinicaid/ca_field_color.js ./src/common/directives/clinicaid/ca_field_currency_filter.js ./src/common/directives/clinicaid/ca_field_currency.js ./src/common/directives/clinicaid/ca_field_date3.js ./src/common/directives/clinicaid/ca_field_date.js ./src/common/directives/clinicaid/ca_field_number.js ./src/common/directives/clinicaid/ca_field_select.js ./src/common/directives/clinicaid/ca_field_text.js ./src/common/directives/clinicaid/ca_field_time.js ./src/common/directives/clinicaid/ca_field_toggle.js ./src/common/directives/clinicaid/ca_focus_field.js ./src/common/directives/clinicaid/ca_info_messages.js ./src/common/directives/clinicaid/ca_key_bind_scope.js ./src/common/directives/clinicaid/ca_pagination.js ./src/common/directives/clinicaid/ca_quill.js ./src/common/directives/clinicaid/ca_sticky_search_results_footer.js ./src/common/directives/clinicaid/ca_zero_pad.js ./src/common/directives/clinicaid/compile_html.js ./src/common/directives/clinicaid/file_model.js ./src/common/directives/clinicaid/resize_handler.js ./src/common/directives/clinicaid/resize.js ./src/common/directives/clinicaid/scroll_handler.js ./src/common/directives/clinicaid/scroll.js ./src/common/directives/clinicaid/zero_pad.js ./src/layout/module.js ./src/layout/bodyController.js ./src/layout/navBarController.js ./src/patient/module.js ./src/patient/newPatientController.js ./src/dashboard/module.js ./src/dashboard/dashboardController.js ./src/dashboard/ticklerConfigureController.js ./src/patientlist/module.js ./src/patientlist/patientListState.js ./src/patientlist/patientListController.js ./src/patientlist/patientListAppointmentListController.js ./src/patientlist/patientListConfigController.js ./src/patientlist/patientListDemographicSetController.js ./src/patientlist/patientListProgramController.js ./src/record/module.js ./src/record/recordController.js ./src/record/summary/module.js ./src/record/summary/summaryController.js ./src/record/summary/recordPrintController.js ./src/record/summary/groupNotesController.js ./src/record/summary/saveWarningController.js ./src/record/forms/module.js ./src/record/forms/formsController.js ./src/record/details/module.js ./src/record/details/detailsController.js ./src/record/phr/module.js ./src/record/phr/phrController.js ./src/record/tracker/module.js ./src/record/tracker/trackerController.js ./src/tickler/module.js ./src/tickler/ticklerListController.js ./src/tickler/ticklerViewController.js ./src/tickler/ticklerAddController.js ./src/tickler/ticklerNoteController.js ./src/tickler/ticklerCommentController.js ./src/schedule/module.js ./src/schedule/scheduleController.js ./src/schedule/eventController.js ./src/schedule/appointmentAddController.js ./src/schedule/appointmentViewController.js ./src/admin/module.js ./src/admin/adminController.js ./src/admin/integration/module.js ./src/admin/integration/fax/module.js ./src/admin/integration/fax/faxConfigurationController.js ./src/admin/integration/fax/faxConfigurationEditController.js ./src/admin/integration/fax/faxSendReceiveController.js ./src/admin/integration/know2act/module.js ./src/admin/integration/know2act/Know2actConfigController.js ./src/admin/integration/know2act/Know2actNotificationController.js ./src/admin/integration/know2act/Know2actTemplateController.js ./src/billing/billingController.js ./src/consults/module.js ./src/consults/consultRequestAttachmentController.js ./src/consults/consultResponseAttachmentController.js ./src/consults/consultRequestListController.js ./src/consults/consultRequestController.js ./src/consults/consultResponseListController.js ./src/consults/consultResponseController.js ./src/inbox/module.js ./src/inbox/inboxController.js ./src/patient/search/module.js ./src/patient/search/patientSearchController.js ./src/patient/search/remotePatientResultsController.js ./src/report/module.js ./src/report/reportsController.js ./src/report/reportBadAppointmentSheetController.js ./src/report/reportDaySheetController.js ./src/report/reportEdbListController.js ./src/report/reportFollowUpIntakeController.js ./src/report/reportNoShowAppointmentSheetController.js ./src/report/reportOldPatientsController.js ./src/report/reportPatientChartListController.js ./src/report/reportRegistrationIntakeController.js ./src/report/reportSHMentalHealthController.js ./src/document/module.js ./src/document/documentsController.js ./src/settings/module.js ./src/settings/settingsController.js ./src/settings/changePasswordController.js ./src/settings/quickLinkController.js ./src/help/module.js ./src/help/supportController.js ./src/help/helpController.js ./src/index.ts ***!

/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../webapp/share/javascript/Oscar.js */"../webapp/share/javascript/Oscar.js");
__webpack_require__(/*! ./src/common/displayMessages.js */"./src/common/displayMessages.js");
__webpack_require__(/*! ./src/common/util/util.js */"./src/common/util/util.js");
__webpack_require__(/*! ./src/common/util/serviceHelper.js */"./src/common/util/serviceHelper.js");
__webpack_require__(/*! ./src/consults/common.js */"./src/consults/common.js");
__webpack_require__(/*! ./app.js */"./app.js");
__webpack_require__(/*! ./src/common/module.js */"./src/common/module.js");
__webpack_require__(/*! ./src/common/util/module.js */"./src/common/util/module.js");
__webpack_require__(/*! ./src/common/util/angular-util.js */"./src/common/util/angular-util.js");
__webpack_require__(/*! ./src/common/util/junoHttp.js */"./src/common/util/junoHttp.js");
__webpack_require__(/*! ./src/common/util/searchListHelper.js */"./src/common/util/searchListHelper.js");
__webpack_require__(/*! ./src/common/services/module.js */"./src/common/services/module.js");
__webpack_require__(/*! ./src/common/services/appService.js */"./src/common/services/appService.js");
__webpack_require__(/*! ./src/common/services/autoCompleteService.js */"./src/common/services/autoCompleteService.js");
__webpack_require__(/*! ./src/common/services/billingService.js */"./src/common/services/billingService.js");
__webpack_require__(/*! ./src/common/services/consultService.js */"./src/common/services/consultService.js");
__webpack_require__(/*! ./src/common/services/demographicService.js */"./src/common/services/demographicService.js");
__webpack_require__(/*! ./src/common/services/demographicsService.js */"./src/common/services/demographicsService.js");
__webpack_require__(/*! ./src/common/services/diseaseRegistryService.js */"./src/common/services/diseaseRegistryService.js");
__webpack_require__(/*! ./src/common/services/errorsService.js */"./src/common/services/errorsService.js");
__webpack_require__(/*! ./src/common/services/faxAccountService.js */"./src/common/services/faxAccountService.js");
__webpack_require__(/*! ./src/common/services/faxInboundService.js */"./src/common/services/faxInboundService.js");
__webpack_require__(/*! ./src/common/services/faxOutboundService.js */"./src/common/services/faxOutboundService.js");
__webpack_require__(/*! ./src/common/services/fieldHelperService.js */"./src/common/services/fieldHelperService.js");
__webpack_require__(/*! ./src/common/services/focusService.js */"./src/common/services/focusService.js");
__webpack_require__(/*! ./src/common/services/formService.js */"./src/common/services/formService.js");
__webpack_require__(/*! ./src/common/services/globalStateService.js */"./src/common/services/globalStateService.js");
__webpack_require__(/*! ./src/common/services/inboxService.js */"./src/common/services/inboxService.js");
__webpack_require__(/*! ./src/common/services/k2aService.js */"./src/common/services/k2aService.js");
__webpack_require__(/*! ./src/common/services/messageService.js */"./src/common/services/messageService.js");
__webpack_require__(/*! ./src/common/services/noteService.js */"./src/common/services/noteService.js");
__webpack_require__(/*! ./src/common/services/patientDetailStatusService.js */"./src/common/services/patientDetailStatusService.js");
__webpack_require__(/*! ./src/common/services/personaService.js */"./src/common/services/personaService.js");
__webpack_require__(/*! ./src/common/services/programService.js */"./src/common/services/programService.js");
__webpack_require__(/*! ./src/common/services/providerService.js */"./src/common/services/providerService.js");
__webpack_require__(/*! ./src/common/services/providersService.js */"./src/common/services/providersService.js");
__webpack_require__(/*! ./src/common/services/reportingService.js */"./src/common/services/reportingService.js");
__webpack_require__(/*! ./src/common/services/resultsService.js */"./src/common/services/resultsService.js");
__webpack_require__(/*! ./src/common/services/scheduleService.js */"./src/common/services/scheduleService.js");
__webpack_require__(/*! ./src/common/services/securityService.js */"./src/common/services/securityService.js");
__webpack_require__(/*! ./src/common/services/staticDataService.js */"./src/common/services/staticDataService.js");
__webpack_require__(/*! ./src/common/services/summaryService.js */"./src/common/services/summaryService.js");
__webpack_require__(/*! ./src/common/services/systemPreferenceService.js */"./src/common/services/systemPreferenceService.js");
__webpack_require__(/*! ./src/common/services/ticklerService.js */"./src/common/services/ticklerService.js");
__webpack_require__(/*! ./src/common/services/reportByTemplateService.js */"./src/common/services/reportByTemplateService.js");
__webpack_require__(/*! ./src/common/services/uxService.js */"./src/common/services/uxService.js");
__webpack_require__(/*! ./src/common/services/specialistsService.js */"./src/common/services/specialistsService.js");
__webpack_require__(/*! ./src/common/services/referralDoctorsService.js */"./src/common/services/referralDoctorsService.js");
__webpack_require__(/*! ./src/common/filters/module.js */"./src/common/filters/module.js");
__webpack_require__(/*! ./src/common/filters/age.js */"./src/common/filters/age.js");
__webpack_require__(/*! ./src/common/filters/cut.js */"./src/common/filters/cut.js");
__webpack_require__(/*! ./src/common/filters/offset.js */"./src/common/filters/offset.js");
__webpack_require__(/*! ./src/common/filters/startFrom.js */"./src/common/filters/startFrom.js");
__webpack_require__(/*! ./src/common/directives/module.js */"./src/common/directives/module.js");
__webpack_require__(/*! ./src/common/directives/typeaheadHelper.js */"./src/common/directives/typeaheadHelper.js");
__webpack_require__(/*! ./src/common/directives/patientSearchTypeahead.js */"./src/common/directives/patientSearchTypeahead.js");
__webpack_require__(/*! ./src/common/directives/patientTypeahead.js */"./src/common/directives/patientTypeahead.js");
__webpack_require__(/*! ./src/common/directives/datepickerPopup.js */"./src/common/directives/datepickerPopup.js");
__webpack_require__(/*! ./src/common/directives/jqueryUIResizable.js */"./src/common/directives/jqueryUIResizable.js");
__webpack_require__(/*! ./src/common/directives/jqueryUIDraggable.js */"./src/common/directives/jqueryUIDraggable.js");
__webpack_require__(/*! ./src/common/directives/angular-ui-calendar.js */"./src/common/directives/angular-ui-calendar.js");
!(function webpackMissingModule() { var e = new Error("Cannot find module './src/common/directives/selectOptionTooltip.js'"); e.code = 'MODULE_NOT_FOUND'; throw e; }());
__webpack_require__(/*! ./src/common/directives/clinicaid/ca_field_alphadate.js */"./src/common/directives/clinicaid/ca_field_alphadate.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/ca_field_alpha.js */"./src/common/directives/clinicaid/ca_field_alpha.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/ca_field_autocomplete.js */"./src/common/directives/clinicaid/ca_field_autocomplete.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/ca_field_boolean.js */"./src/common/directives/clinicaid/ca_field_boolean.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/ca_field_button_group.js */"./src/common/directives/clinicaid/ca_field_button_group.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/ca_field_color.js */"./src/common/directives/clinicaid/ca_field_color.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/ca_field_currency_filter.js */"./src/common/directives/clinicaid/ca_field_currency_filter.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/ca_field_currency.js */"./src/common/directives/clinicaid/ca_field_currency.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/ca_field_date3.js */"./src/common/directives/clinicaid/ca_field_date3.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/ca_field_date.js */"./src/common/directives/clinicaid/ca_field_date.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/ca_field_number.js */"./src/common/directives/clinicaid/ca_field_number.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/ca_field_select.js */"./src/common/directives/clinicaid/ca_field_select.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/ca_field_text.js */"./src/common/directives/clinicaid/ca_field_text.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/ca_field_time.js */"./src/common/directives/clinicaid/ca_field_time.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/ca_field_toggle.js */"./src/common/directives/clinicaid/ca_field_toggle.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/ca_focus_field.js */"./src/common/directives/clinicaid/ca_focus_field.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/ca_info_messages.js */"./src/common/directives/clinicaid/ca_info_messages.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/ca_key_bind_scope.js */"./src/common/directives/clinicaid/ca_key_bind_scope.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/ca_pagination.js */"./src/common/directives/clinicaid/ca_pagination.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/ca_quill.js */"./src/common/directives/clinicaid/ca_quill.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/ca_sticky_search_results_footer.js */"./src/common/directives/clinicaid/ca_sticky_search_results_footer.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/ca_zero_pad.js */"./src/common/directives/clinicaid/ca_zero_pad.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/compile_html.js */"./src/common/directives/clinicaid/compile_html.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/file_model.js */"./src/common/directives/clinicaid/file_model.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/resize_handler.js */"./src/common/directives/clinicaid/resize_handler.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/resize.js */"./src/common/directives/clinicaid/resize.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/scroll_handler.js */"./src/common/directives/clinicaid/scroll_handler.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/scroll.js */"./src/common/directives/clinicaid/scroll.js");
__webpack_require__(/*! ./src/common/directives/clinicaid/zero_pad.js */"./src/common/directives/clinicaid/zero_pad.js");
__webpack_require__(/*! ./src/layout/module.js */"./src/layout/module.js");
__webpack_require__(/*! ./src/layout/bodyController.js */"./src/layout/bodyController.js");
__webpack_require__(/*! ./src/layout/navBarController.js */"./src/layout/navBarController.js");
__webpack_require__(/*! ./src/patient/module.js */"./src/patient/module.js");
__webpack_require__(/*! ./src/patient/newPatientController.js */"./src/patient/newPatientController.js");
__webpack_require__(/*! ./src/dashboard/module.js */"./src/dashboard/module.js");
__webpack_require__(/*! ./src/dashboard/dashboardController.js */"./src/dashboard/dashboardController.js");
__webpack_require__(/*! ./src/dashboard/ticklerConfigureController.js */"./src/dashboard/ticklerConfigureController.js");
__webpack_require__(/*! ./src/patientlist/module.js */"./src/patientlist/module.js");
__webpack_require__(/*! ./src/patientlist/patientListState.js */"./src/patientlist/patientListState.js");
__webpack_require__(/*! ./src/patientlist/patientListController.js */"./src/patientlist/patientListController.js");
__webpack_require__(/*! ./src/patientlist/patientListAppointmentListController.js */"./src/patientlist/patientListAppointmentListController.js");
__webpack_require__(/*! ./src/patientlist/patientListConfigController.js */"./src/patientlist/patientListConfigController.js");
__webpack_require__(/*! ./src/patientlist/patientListDemographicSetController.js */"./src/patientlist/patientListDemographicSetController.js");
__webpack_require__(/*! ./src/patientlist/patientListProgramController.js */"./src/patientlist/patientListProgramController.js");
__webpack_require__(/*! ./src/record/module.js */"./src/record/module.js");
__webpack_require__(/*! ./src/record/recordController.js */"./src/record/recordController.js");
__webpack_require__(/*! ./src/record/summary/module.js */"./src/record/summary/module.js");
__webpack_require__(/*! ./src/record/summary/summaryController.js */"./src/record/summary/summaryController.js");
__webpack_require__(/*! ./src/record/summary/recordPrintController.js */"./src/record/summary/recordPrintController.js");
__webpack_require__(/*! ./src/record/summary/groupNotesController.js */"./src/record/summary/groupNotesController.js");
__webpack_require__(/*! ./src/record/summary/saveWarningController.js */"./src/record/summary/saveWarningController.js");
__webpack_require__(/*! ./src/record/forms/module.js */"./src/record/forms/module.js");
__webpack_require__(/*! ./src/record/forms/formsController.js */"./src/record/forms/formsController.js");
__webpack_require__(/*! ./src/record/details/module.js */"./src/record/details/module.js");
__webpack_require__(/*! ./src/record/details/detailsController.js */"./src/record/details/detailsController.js");
__webpack_require__(/*! ./src/record/phr/module.js */"./src/record/phr/module.js");
__webpack_require__(/*! ./src/record/phr/phrController.js */"./src/record/phr/phrController.js");
__webpack_require__(/*! ./src/record/tracker/module.js */"./src/record/tracker/module.js");
__webpack_require__(/*! ./src/record/tracker/trackerController.js */"./src/record/tracker/trackerController.js");
__webpack_require__(/*! ./src/tickler/module.js */"./src/tickler/module.js");
__webpack_require__(/*! ./src/tickler/ticklerListController.js */"./src/tickler/ticklerListController.js");
__webpack_require__(/*! ./src/tickler/ticklerViewController.js */"./src/tickler/ticklerViewController.js");
__webpack_require__(/*! ./src/tickler/ticklerAddController.js */"./src/tickler/ticklerAddController.js");
__webpack_require__(/*! ./src/tickler/ticklerNoteController.js */"./src/tickler/ticklerNoteController.js");
__webpack_require__(/*! ./src/tickler/ticklerCommentController.js */"./src/tickler/ticklerCommentController.js");
__webpack_require__(/*! ./src/schedule/module.js */"./src/schedule/module.js");
__webpack_require__(/*! ./src/schedule/scheduleController.js */"./src/schedule/scheduleController.js");
__webpack_require__(/*! ./src/schedule/eventController.js */"./src/schedule/eventController.js");
__webpack_require__(/*! ./src/schedule/appointmentAddController.js */"./src/schedule/appointmentAddController.js");
__webpack_require__(/*! ./src/schedule/appointmentViewController.js */"./src/schedule/appointmentViewController.js");
__webpack_require__(/*! ./src/admin/module.js */"./src/admin/module.js");
__webpack_require__(/*! ./src/admin/adminController.js */"./src/admin/adminController.js");
__webpack_require__(/*! ./src/admin/integration/module.js */"./src/admin/integration/module.js");
__webpack_require__(/*! ./src/admin/integration/fax/module.js */"./src/admin/integration/fax/module.js");
__webpack_require__(/*! ./src/admin/integration/fax/faxConfigurationController.js */"./src/admin/integration/fax/faxConfigurationController.js");
__webpack_require__(/*! ./src/admin/integration/fax/faxConfigurationEditController.js */"./src/admin/integration/fax/faxConfigurationEditController.js");
__webpack_require__(/*! ./src/admin/integration/fax/faxSendReceiveController.js */"./src/admin/integration/fax/faxSendReceiveController.js");
__webpack_require__(/*! ./src/admin/integration/know2act/module.js */"./src/admin/integration/know2act/module.js");
__webpack_require__(/*! ./src/admin/integration/know2act/Know2actConfigController.js */"./src/admin/integration/know2act/Know2actConfigController.js");
__webpack_require__(/*! ./src/admin/integration/know2act/Know2actNotificationController.js */"./src/admin/integration/know2act/Know2actNotificationController.js");
__webpack_require__(/*! ./src/admin/integration/know2act/Know2actTemplateController.js */"./src/admin/integration/know2act/Know2actTemplateController.js");
__webpack_require__(/*! ./src/billing/billingController.js */"./src/billing/billingController.js");
__webpack_require__(/*! ./src/consults/module.js */"./src/consults/module.js");
__webpack_require__(/*! ./src/consults/consultRequestAttachmentController.js */"./src/consults/consultRequestAttachmentController.js");
__webpack_require__(/*! ./src/consults/consultResponseAttachmentController.js */"./src/consults/consultResponseAttachmentController.js");
__webpack_require__(/*! ./src/consults/consultRequestListController.js */"./src/consults/consultRequestListController.js");
__webpack_require__(/*! ./src/consults/consultRequestController.js */"./src/consults/consultRequestController.js");
__webpack_require__(/*! ./src/consults/consultResponseListController.js */"./src/consults/consultResponseListController.js");
__webpack_require__(/*! ./src/consults/consultResponseController.js */"./src/consults/consultResponseController.js");
__webpack_require__(/*! ./src/inbox/module.js */"./src/inbox/module.js");
__webpack_require__(/*! ./src/inbox/inboxController.js */"./src/inbox/inboxController.js");
__webpack_require__(/*! ./src/patient/search/module.js */"./src/patient/search/module.js");
__webpack_require__(/*! ./src/patient/search/patientSearchController.js */"./src/patient/search/patientSearchController.js");
__webpack_require__(/*! ./src/patient/search/remotePatientResultsController.js */"./src/patient/search/remotePatientResultsController.js");
__webpack_require__(/*! ./src/report/module.js */"./src/report/module.js");
__webpack_require__(/*! ./src/report/reportsController.js */"./src/report/reportsController.js");
__webpack_require__(/*! ./src/report/reportBadAppointmentSheetController.js */"./src/report/reportBadAppointmentSheetController.js");
__webpack_require__(/*! ./src/report/reportDaySheetController.js */"./src/report/reportDaySheetController.js");
__webpack_require__(/*! ./src/report/reportEdbListController.js */"./src/report/reportEdbListController.js");
__webpack_require__(/*! ./src/report/reportFollowUpIntakeController.js */"./src/report/reportFollowUpIntakeController.js");
__webpack_require__(/*! ./src/report/reportNoShowAppointmentSheetController.js */"./src/report/reportNoShowAppointmentSheetController.js");
__webpack_require__(/*! ./src/report/reportOldPatientsController.js */"./src/report/reportOldPatientsController.js");
__webpack_require__(/*! ./src/report/reportPatientChartListController.js */"./src/report/reportPatientChartListController.js");
__webpack_require__(/*! ./src/report/reportRegistrationIntakeController.js */"./src/report/reportRegistrationIntakeController.js");
__webpack_require__(/*! ./src/report/reportSHMentalHealthController.js */"./src/report/reportSHMentalHealthController.js");
__webpack_require__(/*! ./src/document/module.js */"./src/document/module.js");
__webpack_require__(/*! ./src/document/documentsController.js */"./src/document/documentsController.js");
__webpack_require__(/*! ./src/settings/module.js */"./src/settings/module.js");
__webpack_require__(/*! ./src/settings/settingsController.js */"./src/settings/settingsController.js");
__webpack_require__(/*! ./src/settings/changePasswordController.js */"./src/settings/changePasswordController.js");
__webpack_require__(/*! ./src/settings/quickLinkController.js */"./src/settings/quickLinkController.js");
__webpack_require__(/*! ./src/help/module.js */"./src/help/module.js");
__webpack_require__(/*! ./src/help/supportController.js */"./src/help/supportController.js");
__webpack_require__(/*! ./src/help/helpController.js */"./src/help/helpController.js");
module.exports = __webpack_require__(/*! ./src/index.ts */"./src/index.ts");


/***/ })

},[[0,"runtime~bundle","vendors~bundle"]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,